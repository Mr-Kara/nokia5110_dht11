
test_nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  08005648  08005648  00015648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b58  08005b58  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b58  08005b58  00015b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b60  08005b60  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b64  08005b64  00015b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c4  20000070  08005bd8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08005bd8  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b174  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f64  00000000  00000000  0002b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b50  00000000  00000000  0002d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017309  00000000  00000000  0002e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cbb9  00000000  00000000  00045a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5c3  00000000  00000000  000525ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000debad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e10  00000000  00000000  000dec00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005630 	.word	0x08005630

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005630 	.word	0x08005630

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <delay_us>:
float Temperature=0;
float Humidity=0;
uint8_t Presence=0;

//DHT sensor needs delay at us level
void delay_us(uint16_t time){
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	80fb      	strh	r3, [r7, #6]
		
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <delay_us+0x30>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	625a      	str	r2, [r3, #36]	; 0x24
		
	while((__HAL_TIM_GET_COUNTER(&htim10) < time));	
 8000e92:	bf00      	nop
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <delay_us+0x30>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e9a:	88fb      	ldrh	r3, [r7, #6]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3f9      	bcc.n	8000e94 <delay_us+0x14>
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200002d8 	.word	0x200002d8

08000eb4 <Set_Pin_Output>:

//Setting pin as output or input for read DHT 
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 030c 	add.w	r3, r7, #12
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin=GPIO_Pin;
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode=GPIO_MODE_OUTPUT_PP;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 ff38 	bl	8001d58 <HAL_GPIO_Init>
		
}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Set_Pin_Input>:
void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]
		
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efc:	f107 030c 	add.w	r3, r7, #12
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin=GPIO_Pin;
 8000f0c:	887b      	ldrh	r3, [r7, #2]
 8000f0e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode=GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed=GPIO_SPEED_FREQ_HIGH;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx,&GPIO_InitStruct);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4619      	mov	r1, r3
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 ff18 	bl	8001d58 <HAL_GPIO_Init>
	
}
 8000f28:	bf00      	nop
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <DHT11_Init>:

 //These functions written according to the DHT11 datasheet
void DHT11_Init(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
		
	Set_Pin_Output(DHT_DATA_GPIO_Port,DHT_DATA_Pin);                    // Set DHT pin as output
 8000f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <DHT11_Init+0x54>)
 8000f3a:	f7ff ffbb 	bl	8000eb4 <Set_Pin_Output>
	HAL_GPIO_WritePin(DHT_DATA_GPIO_Port,DHT_DATA_Pin,GPIO_PIN_SET);
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <DHT11_Init+0x54>)
 8000f46:	f001 f8a3 	bl	8002090 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fdce 	bl	8001aec <HAL_Delay>
	HAL_GPIO_WritePin(DHT_DATA_GPIO_Port,DHT_DATA_Pin,GPIO_PIN_RESET);	// Pin goes to low
 8000f50:	2200      	movs	r2, #0
 8000f52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <DHT11_Init+0x54>)
 8000f58:	f001 f89a 	bl	8002090 <HAL_GPIO_WritePin>
	HAL_Delay(18);																										// Delay 20ms for DHT sense the MCU	
 8000f5c:	2012      	movs	r0, #18
 8000f5e:	f000 fdc5 	bl	8001aec <HAL_Delay>
	HAL_GPIO_WritePin(DHT_DATA_GPIO_Port,DHT_DATA_Pin,GPIO_PIN_SET);    // Pin goes to high because datasheet says so
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <DHT11_Init+0x54>)
 8000f6a:	f001 f891 	bl	8002090 <HAL_GPIO_WritePin>
	delay_us(20);																											// we need delay 20-40us, give that 50us to be sure. 		
 8000f6e:	2014      	movs	r0, #20
 8000f70:	f7ff ff86 	bl	8000e80 <delay_us>
	Set_Pin_Input(DHT_DATA_GPIO_Port,DHT_DATA_Pin);											// Set pin as input and wait for DHT response		
 8000f74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <DHT11_Init+0x54>)
 8000f7a:	f7ff ffb9 	bl	8000ef0 <Set_Pin_Input>

}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40020000 	.word	0x40020000

08000f88 <DHT_Response>:


uint8_t DHT_Response(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
	
	uint8_t response = 0; 
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71fb      	strb	r3, [r7, #7]

	delay_us(50);  //wait for 40us so sensor data pin should be low
 8000f92:	2032      	movs	r0, #50	; 0x32
 8000f94:	f7ff ff74 	bl	8000e80 <delay_us>
	
	if(!(HAL_GPIO_ReadPin(DHT_DATA_GPIO_Port,DHT_DATA_Pin))) // if sensor data pin is low
 8000f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f9c:	4811      	ldr	r0, [pc, #68]	; (8000fe4 <DHT_Response+0x5c>)
 8000f9e:	f001 f85f 	bl	8002060 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d10f      	bne.n	8000fc8 <DHT_Response+0x40>
	{ 
		delay_us(80);	//wait for 80us and expected the sensor goes high in this given time
 8000fa8:	2050      	movs	r0, #80	; 0x50
 8000faa:	f7ff ff69 	bl	8000e80 <delay_us>
		if(HAL_GPIO_ReadPin(DHT_DATA_GPIO_Port,DHT_DATA_Pin)){ //if sensor data pin is high 
 8000fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb2:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <DHT_Response+0x5c>)
 8000fb4:	f001 f854 	bl	8002060 <HAL_GPIO_ReadPin>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <DHT_Response+0x3c>
			response = 1; // sensor response is 1
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	71fb      	strb	r3, [r7, #7]
 8000fc2:	e001      	b.n	8000fc8 <DHT_Response+0x40>
		}
		else
		{
			response = 0; // is sensor data pin is low response is 0
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	71fb      	strb	r3, [r7, #7]
		}		   
	}
	
	
	while(HAL_GPIO_ReadPin(DHT_DATA_GPIO_Port,DHT_DATA_Pin)); // wait for go low
 8000fc8:	bf00      	nop
 8000fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <DHT_Response+0x5c>)
 8000fd0:	f001 f846 	bl	8002060 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1f7      	bne.n	8000fca <DHT_Response+0x42>
	
	return response;
 8000fda:	79fb      	ldrb	r3, [r7, #7]
	
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <DHT_Read>:

//When DHT is sending data to MCU, EVERY BIT OF DATA begins with the 50us low-voltage-level 
//and the length of the following high-voltage-level signal determines 
//whether data bit is "0" or "1"

uint8_t DHT_Read(void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	
	uint8_t i,r;

	for(i=0;i<8;i++){ //DTH sensor sending 8 bits data
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71fb      	strb	r3, [r7, #7]
 8000ff2:	e03a      	b.n	800106a <DHT_Read+0x82>
		
	while(!(HAL_GPIO_ReadPin(DHT_DATA_GPIO_Port,DHT_DATA_Pin))); //wait for the pin become high
 8000ff4:	bf00      	nop
 8000ff6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffa:	4820      	ldr	r0, [pc, #128]	; (800107c <DHT_Read+0x94>)
 8000ffc:	f001 f830 	bl	8002060 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f7      	beq.n	8000ff6 <DHT_Read+0xe>
	
	delay_us(50); // wait for 40us to see if pin is high or low
 8001006:	2032      	movs	r0, #50	; 0x32
 8001008:	f7ff ff3a 	bl	8000e80 <delay_us>
	
	if(!(HAL_GPIO_ReadPin(DHT_DATA_GPIO_Port,DHT_DATA_Pin)))
 800100c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001010:	481a      	ldr	r0, [pc, #104]	; (800107c <DHT_Read+0x94>)
 8001012:	f001 f825 	bl	8002060 <HAL_GPIO_ReadPin>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10e      	bne.n	800103a <DHT_Read+0x52>
	{ //
		r&= ~(1<<(7-i)); //write 0
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2201      	movs	r2, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	b25b      	sxtb	r3, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	b25a      	sxtb	r2, r3
 800102e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001032:	4013      	ands	r3, r2
 8001034:	b25b      	sxtb	r3, r3
 8001036:	71bb      	strb	r3, [r7, #6]
 8001038:	e00b      	b.n	8001052 <DHT_Read+0x6a>
	}
	else
	{
		r|=(1<<(7-i));//write 1
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f1c3 0307 	rsb	r3, r3, #7
 8001040:	2201      	movs	r2, #1
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	b25a      	sxtb	r2, r3
 8001048:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800104c:	4313      	orrs	r3, r2
 800104e:	b25b      	sxtb	r3, r3
 8001050:	71bb      	strb	r3, [r7, #6]
	}
	
	while((HAL_GPIO_ReadPin(DHT_DATA_GPIO_Port,DHT_DATA_Pin))); // wait for the pin goes low
 8001052:	bf00      	nop
 8001054:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001058:	4808      	ldr	r0, [pc, #32]	; (800107c <DHT_Read+0x94>)
 800105a:	f001 f801 	bl	8002060 <HAL_GPIO_ReadPin>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1f7      	bne.n	8001054 <DHT_Read+0x6c>
	for(i=0;i<8;i++){ //DTH sensor sending 8 bits data
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	3301      	adds	r3, #1
 8001068:	71fb      	strb	r3, [r7, #7]
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b07      	cmp	r3, #7
 800106e:	d9c1      	bls.n	8000ff4 <DHT_Read+0xc>
	
 }
	
	return r;
 8001070:	79bb      	ldrb	r3, [r7, #6]
 
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40020000 	.word	0x40020000

08001080 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <MX_GPIO_Init+0x9c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a1f      	ldr	r2, [pc, #124]	; (800111c <MX_GPIO_Init+0x9c>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b1d      	ldr	r3, [pc, #116]	; (800111c <MX_GPIO_Init+0x9c>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <MX_GPIO_Init+0x9c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <MX_GPIO_Init+0x9c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_GPIO_Init+0x9c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nokia_rst_Pin|nokia_ce_Pin|nokia_dc_Pin
 80010ce:	2200      	movs	r2, #0
 80010d0:	f44f 51bf 	mov.w	r1, #6112	; 0x17e0
 80010d4:	4812      	ldr	r0, [pc, #72]	; (8001120 <MX_GPIO_Init+0xa0>)
 80010d6:	f000 ffdb 	bl	8002090 <HAL_GPIO_WritePin>
                          |nokia_din_Pin|nokia_clk_Pin|DHT_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	f107 030c 	add.w	r3, r7, #12
 80010ee:	4619      	mov	r1, r3
 80010f0:	480c      	ldr	r0, [pc, #48]	; (8001124 <MX_GPIO_Init+0xa4>)
 80010f2:	f000 fe31 	bl	8001d58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|nokia_rst_Pin|nokia_ce_Pin|nokia_dc_Pin
 80010f6:	f44f 53bf 	mov.w	r3, #6112	; 0x17e0
 80010fa:	60fb      	str	r3, [r7, #12]
                          |nokia_din_Pin|nokia_clk_Pin|DHT_DATA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4804      	ldr	r0, [pc, #16]	; (8001120 <MX_GPIO_Init+0xa0>)
 8001110:	f000 fe22 	bl	8001d58 <HAL_GPIO_Init>

}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020800 	.word	0x40020800

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800112c:	f000 fc6c 	bl	8001a08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001130:	f000 f894 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001134:	f7ff ffa4 	bl	8001080 <MX_GPIO_Init>
  MX_TIM10_Init();
 8001138:	f000 fbf0 	bl	800191c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 800113c:	483a      	ldr	r0, [pc, #232]	; (8001228 <main+0x100>)
 800113e:	f001 fc75 	bl	8002a2c <HAL_TIM_Base_Start_IT>

  LCD_setRST(nokia_rst_GPIO_Port, nokia_rst_Pin);
 8001142:	2140      	movs	r1, #64	; 0x40
 8001144:	4839      	ldr	r0, [pc, #228]	; (800122c <main+0x104>)
 8001146:	f000 f8fb 	bl	8001340 <LCD_setRST>
  LCD_setDIN(nokia_din_GPIO_Port, nokia_din_Pin);
 800114a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800114e:	4837      	ldr	r0, [pc, #220]	; (800122c <main+0x104>)
 8001150:	f000 f932 	bl	80013b8 <LCD_setDIN>
  LCD_setDC(nokia_dc_GPIO_Port, nokia_dc_Pin);
 8001154:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001158:	4834      	ldr	r0, [pc, #208]	; (800122c <main+0x104>)
 800115a:	f000 f919 	bl	8001390 <LCD_setDC>
  LCD_setCE(nokia_ce_GPIO_Port, nokia_ce_Pin);
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	4832      	ldr	r0, [pc, #200]	; (800122c <main+0x104>)
 8001162:	f000 f901 	bl	8001368 <LCD_setCE>
  LCD_setCLK(nokia_clk_GPIO_Port, nokia_clk_Pin);
 8001166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800116a:	4830      	ldr	r0, [pc, #192]	; (800122c <main+0x104>)
 800116c:	f000 f938 	bl	80013e0 <LCD_setCLK>

  LCD_init();
 8001170:	f000 f9ce 	bl	8001510 <LCD_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  DHT11_Init();
 8001174:	f7ff fedc 	bl	8000f30 <DHT11_Init>
	  		Presence=DHT_Response();
 8001178:	f7ff ff06 	bl	8000f88 <DHT_Response>
 800117c:	4603      	mov	r3, r0
 800117e:	461a      	mov	r2, r3
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <main+0x108>)
 8001182:	701a      	strb	r2, [r3, #0]
	  		Rh_byte1=DHT_Read();
 8001184:	f7ff ff30 	bl	8000fe8 <DHT_Read>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <main+0x10c>)
 800118e:	701a      	strb	r2, [r3, #0]
	  		Rh_byte2=DHT_Read();
 8001190:	f7ff ff2a 	bl	8000fe8 <DHT_Read>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <main+0x110>)
 800119a:	701a      	strb	r2, [r3, #0]
	  		Temp_byte1=DHT_Read();
 800119c:	f7ff ff24 	bl	8000fe8 <DHT_Read>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <main+0x114>)
 80011a6:	701a      	strb	r2, [r3, #0]
	  		Temp_byte2=DHT_Read();
 80011a8:	f7ff ff1e 	bl	8000fe8 <DHT_Read>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <main+0x118>)
 80011b2:	701a      	strb	r2, [r3, #0]

	  		SUM=DHT_Read();
 80011b4:	f7ff ff18 	bl	8000fe8 <DHT_Read>
 80011b8:	4603      	mov	r3, r0
 80011ba:	461a      	mov	r2, r3
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <main+0x11c>)
 80011be:	601a      	str	r2, [r3, #0]

	  		TEMP=Temp_byte1;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <main+0x114>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <main+0x120>)
 80011c8:	801a      	strh	r2, [r3, #0]
	  		RH=Rh_byte1;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <main+0x10c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	4b1e      	ldr	r3, [pc, #120]	; (800124c <main+0x124>)
 80011d2:	801a      	strh	r2, [r3, #0]

	  	//  TEMP = ((Temp_byte1<<8)|Temp_byte2);
	  	 // RH = ((Rh_byte1<<8)|Rh_byte2);

	  	  Temperature = (float) TEMP;
 80011d4:	4b1c      	ldr	r3, [pc, #112]	; (8001248 <main+0x120>)
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <main+0x128>)
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	  		Humidity = (float) RH;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <main+0x124>)
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011f2:	4b18      	ldr	r3, [pc, #96]	; (8001254 <main+0x12c>)
 80011f4:	edc3 7a00 	vstr	s15, [r3]


	  		gcvt(Temperature,2,buffer);
 80011f8:	4b15      	ldr	r3, [pc, #84]	; (8001250 <main+0x128>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4914      	ldr	r1, [pc, #80]	; (8001258 <main+0x130>)
 8001208:	2002      	movs	r0, #2
 800120a:	ec43 2b10 	vmov	d0, r2, r3
 800120e:	f001 fe3d 	bl	8002e8c <gcvt>

	  		LCD_print(buffer, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	4810      	ldr	r0, [pc, #64]	; (8001258 <main+0x130>)
 8001218:	f000 f9f2 	bl	8001600 <LCD_print>
	  		HAL_Delay(300);
 800121c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001220:	f000 fc64 	bl	8001aec <HAL_Delay>
  {
 8001224:	e7a6      	b.n	8001174 <main+0x4c>
 8001226:	bf00      	nop
 8001228:	200002d8 	.word	0x200002d8
 800122c:	40020000 	.word	0x40020000
 8001230:	200000a0 	.word	0x200000a0
 8001234:	2000008c 	.word	0x2000008c
 8001238:	2000008d 	.word	0x2000008d
 800123c:	2000008e 	.word	0x2000008e
 8001240:	2000008f 	.word	0x2000008f
 8001244:	20000094 	.word	0x20000094
 8001248:	20000092 	.word	0x20000092
 800124c:	20000090 	.word	0x20000090
 8001250:	20000098 	.word	0x20000098
 8001254:	2000009c 	.word	0x2000009c
 8001258:	200000a4 	.word	0x200000a4

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	; 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	; 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f001 fe5c 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b29      	ldr	r3, [pc, #164]	; (800132c <SystemClock_Config+0xd0>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	4a28      	ldr	r2, [pc, #160]	; (800132c <SystemClock_Config+0xd0>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	; 0x40
 8001290:	4b26      	ldr	r3, [pc, #152]	; (800132c <SystemClock_Config+0xd0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <SystemClock_Config+0xd4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012a8:	4a21      	ldr	r2, [pc, #132]	; (8001330 <SystemClock_Config+0xd4>)
 80012aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b1f      	ldr	r3, [pc, #124]	; (8001330 <SystemClock_Config+0xd4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c0:	2301      	movs	r3, #1
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c4:	2310      	movs	r3, #16
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c8:	2302      	movs	r3, #2
 80012ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012cc:	2300      	movs	r3, #0
 80012ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012d0:	2308      	movs	r3, #8
 80012d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80012d4:	2354      	movs	r3, #84	; 0x54
 80012d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d8:	2302      	movs	r3, #2
 80012da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012dc:	2307      	movs	r3, #7
 80012de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 feed 	bl	80020c4 <HAL_RCC_OscConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012f0:	f000 f820 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f4:	230f      	movs	r3, #15
 80012f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f8:	2302      	movs	r3, #2
 80012fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	2102      	movs	r1, #2
 8001312:	4618      	mov	r0, r3
 8001314:	f001 f94e 	bl	80025b4 <HAL_RCC_ClockConfig>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800131e:	f000 f809 	bl	8001334 <Error_Handler>
  }
}
 8001322:	bf00      	nop
 8001324:	3750      	adds	r7, #80	; 0x50
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40007000 	.word	0x40007000

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <LCD_setRST>:
/*
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 800134c:	4a05      	ldr	r2, [pc, #20]	; (8001364 <LCD_setRST+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <LCD_setRST+0x24>)
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	8093      	strh	r3, [r2, #4]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	200002ac 	.word	0x200002ac

08001368 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8001374:	4a05      	ldr	r2, [pc, #20]	; (800138c <LCD_setCE+0x24>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 800137a:	4a04      	ldr	r2, [pc, #16]	; (800138c <LCD_setCE+0x24>)
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	8193      	strh	r3, [r2, #12]
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	200002ac 	.word	0x200002ac

08001390 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN){
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 800139c:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <LCD_setDC+0x24>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 80013a2:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <LCD_setDC+0x24>)
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	8293      	strh	r3, [r2, #20]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	200002ac 	.word	0x200002ac

080013b8 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN){
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 80013c4:	4a05      	ldr	r2, [pc, #20]	; (80013dc <LCD_setDIN+0x24>)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 80013ca:	4a04      	ldr	r2, [pc, #16]	; (80013dc <LCD_setDIN+0x24>)
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	8393      	strh	r3, [r2, #28]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr
 80013dc:	200002ac 	.word	0x200002ac

080013e0 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <LCD_setCLK+0x24>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 80013f2:	4a04      	ldr	r2, [pc, #16]	; (8001404 <LCD_setCLK+0x24>)
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	8493      	strh	r3, [r2, #36]	; 0x24
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	200002ac 	.word	0x200002ac

08001408 <LCD_send>:

/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++){
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	e026      	b.n	8001466 <LCD_send+0x5e>
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <LCD_send+0x70>)
 800141a:	6998      	ldr	r0, [r3, #24]
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <LCD_send+0x70>)
 800141e:	8b99      	ldrh	r1, [r3, #28]
 8001420:	79fa      	ldrb	r2, [r7, #7]
 8001422:	7bfb      	ldrb	r3, [r7, #15]
 8001424:	f1c3 0307 	rsb	r3, r3, #7
 8001428:	fa42 f303 	asr.w	r3, r2, r3
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	461a      	mov	r2, r3
 800143c:	f000 fe28 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 8001440:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <LCD_send+0x70>)
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <LCD_send+0x70>)
 8001446:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001448:	2201      	movs	r2, #1
 800144a:	4618      	mov	r0, r3
 800144c:	f000 fe20 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <LCD_send+0x70>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <LCD_send+0x70>)
 8001456:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 8001458:	2200      	movs	r2, #0
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fe18 	bl	8002090 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++){
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	3301      	adds	r3, #1
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	2b07      	cmp	r3, #7
 800146a:	d9d5      	bls.n	8001418 <LCD_send+0x10>
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200002ac 	.word	0x200002ac

0800147c <LCD_write>:
/*
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode){
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	460a      	mov	r2, r1
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	4613      	mov	r3, r2
 800148a:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND){
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d11c      	bne.n	80014cc <LCD_write+0x50>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <LCD_write+0x90>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	4a1d      	ldr	r2, [pc, #116]	; (800150c <LCD_write+0x90>)
 8001498:	8a91      	ldrh	r1, [r2, #20]
 800149a:	2200      	movs	r2, #0
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fdf7 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80014a2:	4b1a      	ldr	r3, [pc, #104]	; (800150c <LCD_write+0x90>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4a19      	ldr	r2, [pc, #100]	; (800150c <LCD_write+0x90>)
 80014a8:	8991      	ldrh	r1, [r2, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 fdef 	bl	8002090 <HAL_GPIO_WritePin>
    LCD_send(data);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff ffa7 	bl	8001408 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <LCD_write+0x90>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	4a13      	ldr	r2, [pc, #76]	; (800150c <LCD_write+0x90>)
 80014c0:	8991      	ldrh	r1, [r2, #12]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 fde3 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 80014ca:	e01b      	b.n	8001504 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <LCD_write+0x90>)
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <LCD_write+0x90>)
 80014d2:	8a91      	ldrh	r1, [r2, #20]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fdda 	bl	8002090 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <LCD_write+0x90>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <LCD_write+0x90>)
 80014e2:	8991      	ldrh	r1, [r2, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 fdd2 	bl	8002090 <HAL_GPIO_WritePin>
    LCD_send(data);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff8a 	bl	8001408 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <LCD_write+0x90>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	4a04      	ldr	r2, [pc, #16]	; (800150c <LCD_write+0x90>)
 80014fa:	8991      	ldrh	r1, [r2, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4618      	mov	r0, r3
 8001500:	f000 fdc6 	bl	8002090 <HAL_GPIO_WritePin>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	200002ac 	.word	0x200002ac

08001510 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <LCD_init+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a16      	ldr	r2, [pc, #88]	; (8001574 <LCD_init+0x64>)
 800151a:	8891      	ldrh	r1, [r2, #4]
 800151c:	2200      	movs	r2, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f000 fdb6 	bl	8002090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 8001524:	4b13      	ldr	r3, [pc, #76]	; (8001574 <LCD_init+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <LCD_init+0x64>)
 800152a:	8891      	ldrh	r1, [r2, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fdae 	bl	8002090 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 8001534:	2100      	movs	r1, #0
 8001536:	2021      	movs	r0, #33	; 0x21
 8001538:	f7ff ffa0 	bl	800147c <LCD_write>
  LCD_write(0xA0, LCD_COMMAND); //set LCD Vop(Contrast).
 800153c:	2100      	movs	r1, #0
 800153e:	20a0      	movs	r0, #160	; 0xa0
 8001540:	f7ff ff9c 	bl	800147c <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 8001544:	2100      	movs	r1, #0
 8001546:	2004      	movs	r0, #4
 8001548:	f7ff ff98 	bl	800147c <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 800154c:	2100      	movs	r1, #0
 800154e:	2014      	movs	r0, #20
 8001550:	f7ff ff94 	bl	800147c <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 8001554:	2100      	movs	r1, #0
 8001556:	2020      	movs	r0, #32
 8001558:	f7ff ff90 	bl	800147c <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 800155c:	2100      	movs	r1, #0
 800155e:	200c      	movs	r0, #12
 8001560:	f7ff ff8c 	bl	800147c <LCD_write>
  LCD_clrScr();
 8001564:	f000 f86c 	bl	8001640 <LCD_clrScr>
  lcd.inverttext = false;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <LCD_init+0x68>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200002ac 	.word	0x200002ac
 8001578:	200000b0 	.word	0x200000b0

0800157c <LCD_putChar>:

/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c){
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++){
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e02d      	b.n	80015e8 <LCD_putChar+0x6c>
    if(lcd.inverttext != true)
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <LCD_putChar+0x7c>)
 800158e:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8001592:	f083 0301 	eor.w	r3, r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	d010      	beq.n	80015be <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f1a3 0220 	sub.w	r2, r3, #32
 80015a2:	4916      	ldr	r1, [pc, #88]	; (80015fc <LCD_putChar+0x80>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	18ca      	adds	r2, r1, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ff60 	bl	800147c <LCD_write>
 80015bc:	e011      	b.n	80015e2 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	f1a3 0220 	sub.w	r2, r3, #32
 80015c4:	490d      	ldr	r1, [pc, #52]	; (80015fc <LCD_putChar+0x80>)
 80015c6:	4613      	mov	r3, r2
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	4413      	add	r3, r2
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	18ca      	adds	r2, r1, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4413      	add	r3, r2
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	43db      	mvns	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2101      	movs	r1, #1
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff4d 	bl	800147c <LCD_write>
  for(int i = 0; i < 6; i++){
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	3301      	adds	r3, #1
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b05      	cmp	r3, #5
 80015ec:	ddce      	ble.n	800158c <LCD_putChar+0x10>
  }
}
 80015ee:	bf00      	nop
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	200000b0 	.word	0x200000b0
 80015fc:	08005648 	.word	0x08005648

08001600 <LCD_print>:
/*
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
 800160c:	4613      	mov	r3, r2
 800160e:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 8001610:	78ba      	ldrb	r2, [r7, #2]
 8001612:	78fb      	ldrb	r3, [r7, #3]
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f830 	bl	800167c <LCD_goXY>
  while(*str){
 800161c:	e006      	b.n	800162c <LCD_print+0x2c>
    LCD_putChar(*str++);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff ffa8 	bl	800157c <LCD_putChar>
  while(*str){
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1f4      	bne.n	800161e <LCD_print+0x1e>
  }
}
 8001634:	bf00      	nop
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr(){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++){
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	e00b      	b.n	8001664 <LCD_clrScr+0x24>
    LCD_write(0x00, LCD_DATA);
 800164c:	2101      	movs	r1, #1
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff ff14 	bl	800147c <LCD_write>
    lcd.buffer[i] = 0;
 8001654:	4a08      	ldr	r2, [pc, #32]	; (8001678 <LCD_clrScr+0x38>)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3301      	adds	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 800166a:	dbef      	blt.n	800164c <LCD_clrScr+0xc>
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200000b0 	.word	0x200000b0

0800167c <LCD_goXY>:
/*
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y){
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fef0 	bl	800147c <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 800169c:	79bb      	ldrb	r3, [r7, #6]
 800169e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff fee8 	bl	800147c <LCD_write>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	; (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	; (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	; (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	; 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 faee 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f9ac 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800175e:	f001 f9c7 	bl	8002af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002d8 	.word	0x200002d8

0800176c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_kill>:

int _kill(int pid, int sig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001786:	f001 fba5 	bl	8002ed4 <__errno>
 800178a:	4603      	mov	r3, r0
 800178c:	2216      	movs	r2, #22
 800178e:	601a      	str	r2, [r3, #0]
  return -1;
 8001790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <_exit>:

void _exit (int status)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f7ff ffe7 	bl	800177c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ae:	e7fe      	b.n	80017ae <_exit+0x12>

080017b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	2300      	movs	r3, #0
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	e00a      	b.n	80017d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017c2:	f3af 8000 	nop.w
 80017c6:	4601      	mov	r1, r0
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1c5a      	adds	r2, r3, #1
 80017cc:	60ba      	str	r2, [r7, #8]
 80017ce:	b2ca      	uxtb	r2, r1
 80017d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	3301      	adds	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	429a      	cmp	r2, r3
 80017de:	dbf0      	blt.n	80017c2 <_read+0x12>
  }

  return len;
 80017e0:	687b      	ldr	r3, [r7, #4]
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b086      	sub	sp, #24
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
 80017fa:	e009      	b.n	8001810 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	60ba      	str	r2, [r7, #8]
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	4618      	mov	r0, r3
 8001806:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf1      	blt.n	80017fc <_write+0x12>
  }
  return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_close>:

int _close(int file)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800182a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800184a:	605a      	str	r2, [r3, #4]
  return 0;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <_isatty>:

int _isatty(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4a14      	ldr	r2, [pc, #80]	; (80018e8 <_sbrk+0x5c>)
 8001896:	4b15      	ldr	r3, [pc, #84]	; (80018ec <_sbrk+0x60>)
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d102      	bne.n	80018ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <_sbrk+0x64>)
 80018aa:	4a12      	ldr	r2, [pc, #72]	; (80018f4 <_sbrk+0x68>)
 80018ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ae:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d207      	bcs.n	80018cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018bc:	f001 fb0a 	bl	8002ed4 <__errno>
 80018c0:	4603      	mov	r3, r0
 80018c2:	220c      	movs	r2, #12
 80018c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018c6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ca:	e009      	b.n	80018e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018d2:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <_sbrk+0x64>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <_sbrk+0x64>)
 80018dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20018000 	.word	0x20018000
 80018ec:	00000400 	.word	0x00000400
 80018f0:	200002d4 	.word	0x200002d4
 80018f4:	20000338 	.word	0x20000338

080018f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <SystemInit+0x20>)
 80018fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001902:	4a05      	ldr	r2, [pc, #20]	; (8001918 <SystemInit+0x20>)
 8001904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_TIM10_Init+0x40>)
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <MX_TIM10_Init+0x44>)
 8001924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <MX_TIM10_Init+0x40>)
 8001928:	2253      	movs	r2, #83	; 0x53
 800192a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_TIM10_Init+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65534;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <MX_TIM10_Init+0x40>)
 8001934:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001938:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_TIM10_Init+0x40>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_TIM10_Init+0x40>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_TIM10_Init+0x40>)
 8001948:	f001 f820 	bl	800298c <HAL_TIM_Base_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001952:	f7ff fcef 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200002d8 	.word	0x200002d8
 8001960:	40014400 	.word	0x40014400

08001964 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_TIM_Base_MspInit+0x48>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d115      	bne.n	80019a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_TIM_Base_MspInit+0x4c>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4a0c      	ldr	r2, [pc, #48]	; (80019b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6453      	str	r3, [r2, #68]	; 0x44
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_TIM_Base_MspInit+0x4c>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	2019      	movs	r0, #25
 8001998:	f000 f9a7 	bl	8001cea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800199c:	2019      	movs	r0, #25
 800199e:	f000 f9c0 	bl	8001d22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40014400 	.word	0x40014400
 80019b0:	40023800 	.word	0x40023800

080019b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80019b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019b8:	480d      	ldr	r0, [pc, #52]	; (80019f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ba:	490e      	ldr	r1, [pc, #56]	; (80019f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019c0:	e002      	b.n	80019c8 <LoopCopyDataInit>

080019c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c6:	3304      	adds	r3, #4

080019c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019cc:	d3f9      	bcc.n	80019c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019d0:	4c0b      	ldr	r4, [pc, #44]	; (8001a00 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d4:	e001      	b.n	80019da <LoopFillZerobss>

080019d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d8:	3204      	adds	r2, #4

080019da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019dc:	d3fb      	bcc.n	80019d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80019de:	f7ff ff8b 	bl	80018f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019e2:	f001 fa7d 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019e6:	f7ff fb9f 	bl	8001128 <main>
  bx  lr    
 80019ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80019f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019f8:	08005b68 	.word	0x08005b68
  ldr r2, =_sbss
 80019fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a00:	20000334 	.word	0x20000334

08001a04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a04:	e7fe      	b.n	8001a04 <ADC_IRQHandler>
	...

08001a08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a0c:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <HAL_Init+0x40>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a0d      	ldr	r2, [pc, #52]	; (8001a48 <HAL_Init+0x40>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_Init+0x40>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <HAL_Init+0x40>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a07      	ldr	r2, [pc, #28]	; (8001a48 <HAL_Init+0x40>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a30:	2003      	movs	r0, #3
 8001a32:	f000 f94f 	bl	8001cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f808 	bl	8001a4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a3c:	f7ff fe3a 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	40023c00 	.word	0x40023c00

08001a4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a54:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_InitTick+0x54>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_InitTick+0x58>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f967 	bl	8001d3e <HAL_SYSTICK_Config>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e00e      	b.n	8001a98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2b0f      	cmp	r3, #15
 8001a7e:	d80a      	bhi.n	8001a96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a80:	2200      	movs	r2, #0
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	f04f 30ff 	mov.w	r0, #4294967295
 8001a88:	f000 f92f 	bl	8001cea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a8c:	4a06      	ldr	r2, [pc, #24]	; (8001aa8 <HAL_InitTick+0x5c>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e000      	b.n	8001a98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	20000008 	.word	0x20000008
 8001aa8:	20000004 	.word	0x20000004

08001aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_IncTick+0x20>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_IncTick+0x24>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4413      	add	r3, r2
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_IncTick+0x24>)
 8001abe:	6013      	str	r3, [r2, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	20000008 	.word	0x20000008
 8001ad0:	20000320 	.word	0x20000320

08001ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad8:	4b03      	ldr	r3, [pc, #12]	; (8001ae8 <HAL_GetTick+0x14>)
 8001ada:	681b      	ldr	r3, [r3, #0]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000320 	.word	0x20000320

08001aec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af4:	f7ff ffee 	bl	8001ad4 <HAL_GetTick>
 8001af8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b04:	d005      	beq.n	8001b12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_Delay+0x44>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4413      	add	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b12:	bf00      	nop
 8001b14:	f7ff ffde 	bl	8001ad4 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d8f7      	bhi.n	8001b14 <HAL_Delay+0x28>
  {
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000008 	.word	0x20000008

08001b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b50:	4013      	ands	r3, r2
 8001b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b66:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <__NVIC_SetPriorityGrouping+0x44>)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	60d3      	str	r3, [r2, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b80:	4b04      	ldr	r3, [pc, #16]	; (8001b94 <__NVIC_GetPriorityGrouping+0x18>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	f003 0307 	and.w	r3, r3, #7
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	db0b      	blt.n	8001bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	f003 021f 	and.w	r2, r3, #31
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <__NVIC_EnableIRQ+0x38>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	2001      	movs	r0, #1
 8001bba:	fa00 f202 	lsl.w	r2, r0, r2
 8001bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100

08001bd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	db0a      	blt.n	8001bfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	490c      	ldr	r1, [pc, #48]	; (8001c20 <__NVIC_SetPriority+0x4c>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	b2d2      	uxtb	r2, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bfc:	e00a      	b.n	8001c14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4908      	ldr	r1, [pc, #32]	; (8001c24 <__NVIC_SetPriority+0x50>)
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	3b04      	subs	r3, #4
 8001c0c:	0112      	lsls	r2, r2, #4
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	440b      	add	r3, r1
 8001c12:	761a      	strb	r2, [r3, #24]
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr
 8001c20:	e000e100 	.word	0xe000e100
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f1c3 0307 	rsb	r3, r3, #7
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	bf28      	it	cs
 8001c46:	2304      	movcs	r3, #4
 8001c48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	2b06      	cmp	r3, #6
 8001c50:	d902      	bls.n	8001c58 <NVIC_EncodePriority+0x30>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b03      	subs	r3, #3
 8001c56:	e000      	b.n	8001c5a <NVIC_EncodePriority+0x32>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43da      	mvns	r2, r3
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c70:	f04f 31ff 	mov.w	r1, #4294967295
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c80:	4313      	orrs	r3, r2
         );
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
	...

08001c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ca0:	d301      	bcc.n	8001ca6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00f      	b.n	8001cc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ca6:	4a0a      	ldr	r2, [pc, #40]	; (8001cd0 <SysTick_Config+0x40>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cae:	210f      	movs	r1, #15
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cb4:	f7ff ff8e 	bl	8001bd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <SysTick_Config+0x40>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <SysTick_Config+0x40>)
 8001cc0:	2207      	movs	r2, #7
 8001cc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	e000e010 	.word	0xe000e010

08001cd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff ff29 	bl	8001b34 <__NVIC_SetPriorityGrouping>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cfc:	f7ff ff3e 	bl	8001b7c <__NVIC_GetPriorityGrouping>
 8001d00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	6978      	ldr	r0, [r7, #20]
 8001d08:	f7ff ff8e 	bl	8001c28 <NVIC_EncodePriority>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d12:	4611      	mov	r1, r2
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff5d 	bl	8001bd4 <__NVIC_SetPriority>
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4603      	mov	r3, r0
 8001d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff31 	bl	8001b98 <__NVIC_EnableIRQ>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffa2 	bl	8001c90 <SysTick_Config>
 8001d4c:	4603      	mov	r3, r0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b089      	sub	sp, #36	; 0x24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d62:	2300      	movs	r3, #0
 8001d64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	e159      	b.n	8002028 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	f040 8148 	bne.w	8002022 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d005      	beq.n	8001daa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d130      	bne.n	8001e0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68da      	ldr	r2, [r3, #12]
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001de0:	2201      	movs	r2, #1
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4013      	ands	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f003 0201 	and.w	r2, r3, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	d017      	beq.n	8001e48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d123      	bne.n	8001e9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	08da      	lsrs	r2, r3, #3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	3208      	adds	r2, #8
 8001e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	220f      	movs	r2, #15
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	691a      	ldr	r2, [r3, #16]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f000 80a2 	beq.w	8002022 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	4a56      	ldr	r2, [pc, #344]	; (8002040 <HAL_GPIO_Init+0x2e8>)
 8001ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eec:	6453      	str	r3, [r2, #68]	; 0x44
 8001eee:	4b54      	ldr	r3, [pc, #336]	; (8002040 <HAL_GPIO_Init+0x2e8>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efa:	4a52      	ldr	r2, [pc, #328]	; (8002044 <HAL_GPIO_Init+0x2ec>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a49      	ldr	r2, [pc, #292]	; (8002048 <HAL_GPIO_Init+0x2f0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d019      	beq.n	8001f5a <HAL_GPIO_Init+0x202>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a48      	ldr	r2, [pc, #288]	; (800204c <HAL_GPIO_Init+0x2f4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0x1fe>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a47      	ldr	r2, [pc, #284]	; (8002050 <HAL_GPIO_Init+0x2f8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d00d      	beq.n	8001f52 <HAL_GPIO_Init+0x1fa>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a46      	ldr	r2, [pc, #280]	; (8002054 <HAL_GPIO_Init+0x2fc>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d007      	beq.n	8001f4e <HAL_GPIO_Init+0x1f6>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a45      	ldr	r2, [pc, #276]	; (8002058 <HAL_GPIO_Init+0x300>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d101      	bne.n	8001f4a <HAL_GPIO_Init+0x1f2>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e008      	b.n	8001f5c <HAL_GPIO_Init+0x204>
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	e006      	b.n	8001f5c <HAL_GPIO_Init+0x204>
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e004      	b.n	8001f5c <HAL_GPIO_Init+0x204>
 8001f52:	2302      	movs	r3, #2
 8001f54:	e002      	b.n	8001f5c <HAL_GPIO_Init+0x204>
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_GPIO_Init+0x204>
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	69fa      	ldr	r2, [r7, #28]
 8001f5e:	f002 0203 	and.w	r2, r2, #3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4093      	lsls	r3, r2
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f6c:	4935      	ldr	r1, [pc, #212]	; (8002044 <HAL_GPIO_Init+0x2ec>)
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	089b      	lsrs	r3, r3, #2
 8001f72:	3302      	adds	r3, #2
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f7a:	4b38      	ldr	r3, [pc, #224]	; (800205c <HAL_GPIO_Init+0x304>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4013      	ands	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9e:	4a2f      	ldr	r2, [pc, #188]	; (800205c <HAL_GPIO_Init+0x304>)
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_GPIO_Init+0x304>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc8:	4a24      	ldr	r2, [pc, #144]	; (800205c <HAL_GPIO_Init+0x304>)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_GPIO_Init+0x304>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ff2:	4a1a      	ldr	r2, [pc, #104]	; (800205c <HAL_GPIO_Init+0x304>)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_GPIO_Init+0x304>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800201c:	4a0f      	ldr	r2, [pc, #60]	; (800205c <HAL_GPIO_Init+0x304>)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3301      	adds	r3, #1
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	2b0f      	cmp	r3, #15
 800202c:	f67f aea2 	bls.w	8001d74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002030:	bf00      	nop
 8002032:	bf00      	nop
 8002034:	3724      	adds	r7, #36	; 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	40023800 	.word	0x40023800
 8002044:	40013800 	.word	0x40013800
 8002048:	40020000 	.word	0x40020000
 800204c:	40020400 	.word	0x40020400
 8002050:	40020800 	.word	0x40020800
 8002054:	40020c00 	.word	0x40020c00
 8002058:	40021000 	.word	0x40021000
 800205c:	40013c00 	.word	0x40013c00

08002060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	887b      	ldrh	r3, [r7, #2]
 8002072:	4013      	ands	r3, r2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
 800207c:	e001      	b.n	8002082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002082:	7bfb      	ldrb	r3, [r7, #15]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	619a      	str	r2, [r3, #24]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e267      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020e2:	4b88      	ldr	r3, [pc, #544]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d00c      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b85      	ldr	r3, [pc, #532]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d112      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020fa:	4b82      	ldr	r3, [pc, #520]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002102:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b7e      	ldr	r3, [pc, #504]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e242      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b70      	ldr	r3, [pc, #448]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a6f      	ldr	r2, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b69      	ldr	r3, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a68      	ldr	r2, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b66      	ldr	r3, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a65      	ldr	r2, [pc, #404]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7ff fcaa 	bl	8001ad4 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff fca6 	bl	8001ad4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e207      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b5b      	ldr	r3, [pc, #364]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fc96 	bl	8001ad4 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ac:	f7ff fc92 	bl	8001ad4 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e1f3      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021be:	4b51      	ldr	r3, [pc, #324]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d063      	beq.n	80022a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021da:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00b      	beq.n	80021fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021e6:	4b47      	ldr	r3, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d11c      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b44      	ldr	r3, [pc, #272]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d116      	bne.n	800222c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e1c7      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4937      	ldr	r1, [pc, #220]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800222a:	e03a      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002234:	4b34      	ldr	r3, [pc, #208]	; (8002308 <HAL_RCC_OscConfig+0x244>)
 8002236:	2201      	movs	r2, #1
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800223a:	f7ff fc4b 	bl	8001ad4 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002242:	f7ff fc47 	bl	8001ad4 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e1a8      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002260:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4925      	ldr	r1, [pc, #148]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]
 8002274:	e015      	b.n	80022a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002276:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_OscConfig+0x244>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800227c:	f7ff fc2a 	bl	8001ad4 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002284:	f7ff fc26 	bl	8001ad4 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e187      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d036      	beq.n	800231c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d016      	beq.n	80022e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <HAL_RCC_OscConfig+0x248>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022bc:	f7ff fc0a 	bl	8001ad4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022c4:	f7ff fc06 	bl	8001ad4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e167      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022d6:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x240>)
 80022d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
 80022e2:	e01b      	b.n	800231c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_OscConfig+0x248>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7ff fbf3 	bl	8001ad4 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f0:	e00e      	b.n	8002310 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022f2:	f7ff fbef 	bl	8001ad4 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d907      	bls.n	8002310 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e150      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002304:	40023800 	.word	0x40023800
 8002308:	42470000 	.word	0x42470000
 800230c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b88      	ldr	r3, [pc, #544]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1ea      	bne.n	80022f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8097 	beq.w	8002458 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b81      	ldr	r3, [pc, #516]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10f      	bne.n	800235a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	4b7d      	ldr	r3, [pc, #500]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002342:	4a7c      	ldr	r2, [pc, #496]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002348:	6413      	str	r3, [r2, #64]	; 0x40
 800234a:	4b7a      	ldr	r3, [pc, #488]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002352:	60bb      	str	r3, [r7, #8]
 8002354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002356:	2301      	movs	r3, #1
 8002358:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800235a:	4b77      	ldr	r3, [pc, #476]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002362:	2b00      	cmp	r3, #0
 8002364:	d118      	bne.n	8002398 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002366:	4b74      	ldr	r3, [pc, #464]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a73      	ldr	r2, [pc, #460]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002372:	f7ff fbaf 	bl	8001ad4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237a:	f7ff fbab 	bl	8001ad4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e10c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <HAL_RCC_OscConfig+0x474>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d106      	bne.n	80023ae <HAL_RCC_OscConfig+0x2ea>
 80023a0:	4b64      	ldr	r3, [pc, #400]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a4:	4a63      	ldr	r2, [pc, #396]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6713      	str	r3, [r2, #112]	; 0x70
 80023ac:	e01c      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d10c      	bne.n	80023d0 <HAL_RCC_OscConfig+0x30c>
 80023b6:	4b5f      	ldr	r3, [pc, #380]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5e      	ldr	r2, [pc, #376]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023bc:	f043 0304 	orr.w	r3, r3, #4
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b5c      	ldr	r3, [pc, #368]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a5b      	ldr	r2, [pc, #364]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
 80023ce:	e00b      	b.n	80023e8 <HAL_RCC_OscConfig+0x324>
 80023d0:	4b58      	ldr	r3, [pc, #352]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	4a57      	ldr	r2, [pc, #348]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023d6:	f023 0301 	bic.w	r3, r3, #1
 80023da:	6713      	str	r3, [r2, #112]	; 0x70
 80023dc:	4b55      	ldr	r3, [pc, #340]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a54      	ldr	r2, [pc, #336]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f023 0304 	bic.w	r3, r3, #4
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d015      	beq.n	800241c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f0:	f7ff fb70 	bl	8001ad4 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023f8:	f7ff fb6c 	bl	8001ad4 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0cb      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240e:	4b49      	ldr	r3, [pc, #292]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0ee      	beq.n	80023f8 <HAL_RCC_OscConfig+0x334>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7ff fb5a 	bl	8001ad4 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002422:	e00a      	b.n	800243a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002424:	f7ff fb56 	bl	8001ad4 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e0b5      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243a:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800243c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1ee      	bne.n	8002424 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002446:	7dfb      	ldrb	r3, [r7, #23]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d105      	bne.n	8002458 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244c:	4b39      	ldr	r3, [pc, #228]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	4a38      	ldr	r2, [pc, #224]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002452:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002456:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80a1 	beq.w	80025a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002462:	4b34      	ldr	r3, [pc, #208]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d05c      	beq.n	8002528 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	699b      	ldr	r3, [r3, #24]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d141      	bne.n	80024fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_RCC_OscConfig+0x478>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff fb2a 	bl	8001ad4 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002484:	f7ff fb26 	bl	8001ad4 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e087      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69da      	ldr	r2, [r3, #28]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	019b      	lsls	r3, r3, #6
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	085b      	lsrs	r3, r3, #1
 80024ba:	3b01      	subs	r3, #1
 80024bc:	041b      	lsls	r3, r3, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	491b      	ldr	r1, [pc, #108]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff faff 	bl	8001ad4 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024da:	f7ff fafb 	bl	8001ad4 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e05c      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x416>
 80024f8:	e054      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_RCC_OscConfig+0x478>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff fae8 	bl	8001ad4 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002508:	f7ff fae4 	bl	8001ad4 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e045      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_RCC_OscConfig+0x470>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x444>
 8002526:	e03d      	b.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d107      	bne.n	8002540 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e038      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4ec>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d028      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d121      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002576:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002578:	4293      	cmp	r3, r2
 800257a:	d111      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	085b      	lsrs	r3, r3, #1
 8002588:	3b01      	subs	r3, #1
 800258a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800

080025b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0cc      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c8:	4b68      	ldr	r3, [pc, #416]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d90c      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b65      	ldr	r3, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002612:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002626:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800262a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d044      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d119      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d003      	beq.n	8002672 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800266e:	2b03      	cmp	r3, #3
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002672:	4b3f      	ldr	r3, [pc, #252]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002682:	4b3b      	ldr	r3, [pc, #236]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e067      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b37      	ldr	r3, [pc, #220]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4934      	ldr	r1, [pc, #208]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026a4:	f7ff fa16 	bl	8001ad4 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7ff fa12 	bl	8001ad4 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e04f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026d4:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d20c      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026e2:	4b22      	ldr	r3, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c0>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1c8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f976 	bl	8001a4c <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00
 8002770:	40023800 	.word	0x40023800
 8002774:	08005888 	.word	0x08005888
 8002778:	20000000 	.word	0x20000000
 800277c:	20000004 	.word	0x20000004

08002780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002784:	b094      	sub	sp, #80	; 0x50
 8002786:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	647b      	str	r3, [r7, #68]	; 0x44
 800278c:	2300      	movs	r3, #0
 800278e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002790:	2300      	movs	r3, #0
 8002792:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002798:	4b79      	ldr	r3, [pc, #484]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 030c 	and.w	r3, r3, #12
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d00d      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	f200 80e1 	bhi.w	800296c <HAL_RCC_GetSysClockFreq+0x1ec>
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x34>
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d003      	beq.n	80027ba <HAL_RCC_GetSysClockFreq+0x3a>
 80027b2:	e0db      	b.n	800296c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027b4:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_GetSysClockFreq+0x204>)
 80027b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80027b8:	e0db      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027ba:	4b73      	ldr	r3, [pc, #460]	; (8002988 <HAL_RCC_GetSysClockFreq+0x208>)
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027be:	e0d8      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c0:	4b6f      	ldr	r3, [pc, #444]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d063      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d6:	4b6a      	ldr	r3, [pc, #424]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	099b      	lsrs	r3, r3, #6
 80027dc:	2200      	movs	r2, #0
 80027de:	63bb      	str	r3, [r7, #56]	; 0x38
 80027e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027f2:	4622      	mov	r2, r4
 80027f4:	462b      	mov	r3, r5
 80027f6:	f04f 0000 	mov.w	r0, #0
 80027fa:	f04f 0100 	mov.w	r1, #0
 80027fe:	0159      	lsls	r1, r3, #5
 8002800:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002804:	0150      	lsls	r0, r2, #5
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4621      	mov	r1, r4
 800280c:	1a51      	subs	r1, r2, r1
 800280e:	6139      	str	r1, [r7, #16]
 8002810:	4629      	mov	r1, r5
 8002812:	eb63 0301 	sbc.w	r3, r3, r1
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002824:	4659      	mov	r1, fp
 8002826:	018b      	lsls	r3, r1, #6
 8002828:	4651      	mov	r1, sl
 800282a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282e:	4651      	mov	r1, sl
 8002830:	018a      	lsls	r2, r1, #6
 8002832:	4651      	mov	r1, sl
 8002834:	ebb2 0801 	subs.w	r8, r2, r1
 8002838:	4659      	mov	r1, fp
 800283a:	eb63 0901 	sbc.w	r9, r3, r1
 800283e:	f04f 0200 	mov.w	r2, #0
 8002842:	f04f 0300 	mov.w	r3, #0
 8002846:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800284a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002852:	4690      	mov	r8, r2
 8002854:	4699      	mov	r9, r3
 8002856:	4623      	mov	r3, r4
 8002858:	eb18 0303 	adds.w	r3, r8, r3
 800285c:	60bb      	str	r3, [r7, #8]
 800285e:	462b      	mov	r3, r5
 8002860:	eb49 0303 	adc.w	r3, r9, r3
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002872:	4629      	mov	r1, r5
 8002874:	024b      	lsls	r3, r1, #9
 8002876:	4621      	mov	r1, r4
 8002878:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800287c:	4621      	mov	r1, r4
 800287e:	024a      	lsls	r2, r1, #9
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002886:	2200      	movs	r2, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
 800288a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800288c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002890:	f7fe f974 	bl	8000b7c <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800289c:	e058      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	099b      	lsrs	r3, r3, #6
 80028a4:	2200      	movs	r2, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	4611      	mov	r1, r2
 80028aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
 80028b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	f04f 0000 	mov.w	r0, #0
 80028c0:	f04f 0100 	mov.w	r1, #0
 80028c4:	0159      	lsls	r1, r3, #5
 80028c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ca:	0150      	lsls	r0, r2, #5
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4641      	mov	r1, r8
 80028d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80028d6:	4649      	mov	r1, r9
 80028d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f0:	ebb2 040a 	subs.w	r4, r2, sl
 80028f4:	eb63 050b 	sbc.w	r5, r3, fp
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	00eb      	lsls	r3, r5, #3
 8002902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4643      	mov	r3, r8
 800290e:	18e3      	adds	r3, r4, r3
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	464b      	mov	r3, r9
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002926:	4629      	mov	r1, r5
 8002928:	028b      	lsls	r3, r1, #10
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002930:	4621      	mov	r1, r4
 8002932:	028a      	lsls	r2, r1, #10
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800293a:	2200      	movs	r2, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	61fa      	str	r2, [r7, #28]
 8002940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002944:	f7fe f91a 	bl	8000b7c <__aeabi_uldivmod>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4613      	mov	r3, r2
 800294e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_RCC_GetSysClockFreq+0x200>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	3301      	adds	r3, #1
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002964:	fbb2 f3f3 	udiv	r3, r2, r3
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800296a:	e002      	b.n	8002972 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_RCC_GetSysClockFreq+0x204>)
 800296e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002972:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002974:	4618      	mov	r0, r3
 8002976:	3750      	adds	r7, #80	; 0x50
 8002978:	46bd      	mov	sp, r7
 800297a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	00f42400 	.word	0x00f42400
 8002988:	007a1200 	.word	0x007a1200

0800298c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e041      	b.n	8002a22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe ffd6 	bl	8001964 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2202      	movs	r2, #2
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f000 f9ca 	bl	8002d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3708      	adds	r7, #8
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
	...

08002a2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d001      	beq.n	8002a44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e044      	b.n	8002ace <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68da      	ldr	r2, [r3, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1e      	ldr	r2, [pc, #120]	; (8002adc <HAL_TIM_Base_Start_IT+0xb0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d018      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x6c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d013      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x6c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1a      	ldr	r2, [pc, #104]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x6c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a19      	ldr	r2, [pc, #100]	; (8002ae4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d009      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x6c>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_TIM_Base_Start_IT+0x6c>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a16      	ldr	r2, [pc, #88]	; (8002aec <HAL_TIM_Base_Start_IT+0xc0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d111      	bne.n	8002abc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b06      	cmp	r3, #6
 8002aa8:	d010      	beq.n	8002acc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aba:	e007      	b.n	8002acc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40000c00 	.word	0x40000c00
 8002aec:	40014000 	.word	0x40014000

08002af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d122      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d11b      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f06f 0202 	mvn.w	r2, #2
 8002b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f8f8 	bl	8002d28 <HAL_TIM_IC_CaptureCallback>
 8002b38:	e005      	b.n	8002b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 f8ea 	bl	8002d14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 f8fb 	bl	8002d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0304 	and.w	r3, r3, #4
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0204 	mvn.w	r2, #4
 8002b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2202      	movs	r2, #2
 8002b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f8ce 	bl	8002d28 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 f8c0 	bl	8002d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f8d1 	bl	8002d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0308 	and.w	r3, r3, #8
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0308 	and.w	r3, r3, #8
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0208 	mvn.w	r2, #8
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2204      	movs	r2, #4
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f8a4 	bl	8002d28 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 f896 	bl	8002d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8a7 	bl	8002d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0310 	and.w	r3, r3, #16
 8002bfe:	2b10      	cmp	r3, #16
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0210 	mvn.w	r2, #16
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f87a 	bl	8002d28 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f86c 	bl	8002d14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f87d 	bl	8002d3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10e      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d107      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0201 	mvn.w	r2, #1
 8002c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f846 	bl	8002d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d10e      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8c:	2b80      	cmp	r3, #128	; 0x80
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 f8ec 	bl	8002e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d10e      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d107      	bne.n	8002ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f842 	bl	8002d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	f003 0320 	and.w	r3, r3, #32
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d107      	bne.n	8002cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f06f 0220 	mvn.w	r2, #32
 8002cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f8b6 	bl	8002e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <TIM_Base_SetConfig+0xe4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00f      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d82:	d00b      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a31      	ldr	r2, [pc, #196]	; (8002e4c <TIM_Base_SetConfig+0xe8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d007      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a30      	ldr	r2, [pc, #192]	; (8002e50 <TIM_Base_SetConfig+0xec>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d003      	beq.n	8002d9c <TIM_Base_SetConfig+0x38>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <TIM_Base_SetConfig+0xf0>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d108      	bne.n	8002dae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a25      	ldr	r2, [pc, #148]	; (8002e48 <TIM_Base_SetConfig+0xe4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d01b      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbc:	d017      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <TIM_Base_SetConfig+0xe8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d013      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a21      	ldr	r2, [pc, #132]	; (8002e50 <TIM_Base_SetConfig+0xec>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d00f      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a20      	ldr	r2, [pc, #128]	; (8002e54 <TIM_Base_SetConfig+0xf0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00b      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	; (8002e58 <TIM_Base_SetConfig+0xf4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <TIM_Base_SetConfig+0xf8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d003      	beq.n	8002dee <TIM_Base_SetConfig+0x8a>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <TIM_Base_SetConfig+0xfc>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d108      	bne.n	8002e00 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002df4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68fa      	ldr	r2, [r7, #12]
 8002e12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <TIM_Base_SetConfig+0xe4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d103      	bne.n	8002e34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	615a      	str	r2, [r3, #20]
}
 8002e3a:	bf00      	nop
 8002e3c:	3714      	adds	r7, #20
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40010000 	.word	0x40010000
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40014400 	.word	0x40014400
 8002e60:	40014800 	.word	0x40014800

08002e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <gcvt>:
 8002e8c:	b530      	push	{r4, r5, lr}
 8002e8e:	2200      	movs	r2, #0
 8002e90:	b085      	sub	sp, #20
 8002e92:	460c      	mov	r4, r1
 8002e94:	4605      	mov	r5, r0
 8002e96:	2300      	movs	r3, #0
 8002e98:	ec51 0b10 	vmov	r0, r1, d0
 8002e9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002ea0:	f7fd fe1c 	bl	8000adc <__aeabi_dcmplt>
 8002ea4:	ed9d 0b02 	vldr	d0, [sp, #8]
 8002ea8:	4622      	mov	r2, r4
 8002eaa:	b118      	cbz	r0, 8002eb4 <gcvt+0x28>
 8002eac:	232d      	movs	r3, #45	; 0x2d
 8002eae:	f802 3b01 	strb.w	r3, [r2], #1
 8002eb2:	3d01      	subs	r5, #1
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	4806      	ldr	r0, [pc, #24]	; (8002ed0 <gcvt+0x44>)
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	4629      	mov	r1, r5
 8002ebc:	2367      	movs	r3, #103	; 0x67
 8002ebe:	6800      	ldr	r0, [r0, #0]
 8002ec0:	f000 f8b2 	bl	8003028 <_gcvt>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	bf14      	ite	ne
 8002ec8:	4620      	movne	r0, r4
 8002eca:	2000      	moveq	r0, #0
 8002ecc:	b005      	add	sp, #20
 8002ece:	bd30      	pop	{r4, r5, pc}
 8002ed0:	2000000c 	.word	0x2000000c

08002ed4 <__errno>:
 8002ed4:	4b01      	ldr	r3, [pc, #4]	; (8002edc <__errno+0x8>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	2000000c 	.word	0x2000000c

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4d0d      	ldr	r5, [pc, #52]	; (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2600      	movs	r6, #0
 8002eec:	42a6      	cmp	r6, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4d0b      	ldr	r5, [pc, #44]	; (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	; (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f002 fb9c 	bl	8005630 <_init>
 8002ef8:	1b64      	subs	r4, r4, r5
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2600      	movs	r6, #0
 8002efe:	42a6      	cmp	r6, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f08:	4798      	blx	r3
 8002f0a:	3601      	adds	r6, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f12:	4798      	blx	r3
 8002f14:	3601      	adds	r6, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08005b60 	.word	0x08005b60
 8002f1c:	08005b60 	.word	0x08005b60
 8002f20:	08005b60 	.word	0x08005b60
 8002f24:	08005b64 	.word	0x08005b64

08002f28 <memset>:
 8002f28:	4402      	add	r2, r0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <print_e>:
 8002f38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	ec43 2b10 	vmov	d0, r2, r3
 8002f40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002f42:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8002f46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002f48:	ab04      	add	r3, sp, #16
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	ab03      	add	r3, sp, #12
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	1c62      	adds	r2, r4, #1
 8002f52:	ab05      	add	r3, sp, #20
 8002f54:	460f      	mov	r7, r1
 8002f56:	2102      	movs	r1, #2
 8002f58:	f000 fe36 	bl	8003bc8 <_dtoa_r>
 8002f5c:	9a05      	ldr	r2, [sp, #20]
 8002f5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d105      	bne.n	8002f72 <print_e+0x3a>
 8002f66:	4601      	mov	r1, r0
 8002f68:	4638      	mov	r0, r7
 8002f6a:	f000 fd79 	bl	8003a60 <strcpy>
 8002f6e:	b007      	add	sp, #28
 8002f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f72:	463b      	mov	r3, r7
 8002f74:	7801      	ldrb	r1, [r0, #0]
 8002f76:	f803 1b01 	strb.w	r1, [r3], #1
 8002f7a:	2c00      	cmp	r4, #0
 8002f7c:	bfc8      	it	gt
 8002f7e:	2501      	movgt	r5, #1
 8002f80:	212e      	movs	r1, #46	; 0x2e
 8002f82:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8002f86:	b10f      	cbz	r7, 8002f8c <print_e+0x54>
 8002f88:	2c00      	cmp	r4, #0
 8002f8a:	dc37      	bgt.n	8002ffc <print_e+0xc4>
 8002f8c:	2e67      	cmp	r6, #103	; 0x67
 8002f8e:	d046      	beq.n	800301e <print_e+0xe6>
 8002f90:	2e47      	cmp	r6, #71	; 0x47
 8002f92:	d046      	beq.n	8003022 <print_e+0xea>
 8002f94:	212e      	movs	r1, #46	; 0x2e
 8002f96:	2030      	movs	r0, #48	; 0x30
 8002f98:	2c00      	cmp	r4, #0
 8002f9a:	dc38      	bgt.n	800300e <print_e+0xd6>
 8002f9c:	1e51      	subs	r1, r2, #1
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	bfb8      	it	lt
 8002fa2:	f1c2 0201 	rsblt	r2, r2, #1
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	9105      	str	r1, [sp, #20]
 8002faa:	bfac      	ite	ge
 8002fac:	222b      	movge	r2, #43	; 0x2b
 8002fae:	9205      	strlt	r2, [sp, #20]
 8002fb0:	f800 6b02 	strb.w	r6, [r0], #2
 8002fb4:	bfa8      	it	ge
 8002fb6:	705a      	strbge	r2, [r3, #1]
 8002fb8:	9a05      	ldr	r2, [sp, #20]
 8002fba:	bfbc      	itt	lt
 8002fbc:	212d      	movlt	r1, #45	; 0x2d
 8002fbe:	7059      	strblt	r1, [r3, #1]
 8002fc0:	2a63      	cmp	r2, #99	; 0x63
 8002fc2:	dd0b      	ble.n	8002fdc <print_e+0xa4>
 8002fc4:	2164      	movs	r1, #100	; 0x64
 8002fc6:	fb92 f1f1 	sdiv	r1, r2, r1
 8002fca:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8002fce:	1cd8      	adds	r0, r3, #3
 8002fd0:	709c      	strb	r4, [r3, #2]
 8002fd2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8002fd6:	fb03 2201 	mla	r2, r3, r1, r2
 8002fda:	9205      	str	r2, [sp, #20]
 8002fdc:	9b05      	ldr	r3, [sp, #20]
 8002fde:	220a      	movs	r2, #10
 8002fe0:	fb93 f2f2 	sdiv	r2, r3, r2
 8002fe4:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8002fe8:	7001      	strb	r1, [r0, #0]
 8002fea:	f06f 0109 	mvn.w	r1, #9
 8002fee:	fb01 3302 	mla	r3, r1, r2, r3
 8002ff2:	3330      	adds	r3, #48	; 0x30
 8002ff4:	7043      	strb	r3, [r0, #1]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	7083      	strb	r3, [r0, #2]
 8002ffa:	e7b8      	b.n	8002f6e <print_e+0x36>
 8002ffc:	b10d      	cbz	r5, 8003002 <print_e+0xca>
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	7805      	ldrb	r5, [r0, #0]
 8003004:	f803 5b01 	strb.w	r5, [r3], #1
 8003008:	3c01      	subs	r4, #1
 800300a:	2500      	movs	r5, #0
 800300c:	e7b9      	b.n	8002f82 <print_e+0x4a>
 800300e:	b10d      	cbz	r5, 8003014 <print_e+0xdc>
 8003010:	f803 1b01 	strb.w	r1, [r3], #1
 8003014:	f803 0b01 	strb.w	r0, [r3], #1
 8003018:	3c01      	subs	r4, #1
 800301a:	2500      	movs	r5, #0
 800301c:	e7bc      	b.n	8002f98 <print_e+0x60>
 800301e:	2665      	movs	r6, #101	; 0x65
 8003020:	e7bc      	b.n	8002f9c <print_e+0x64>
 8003022:	2645      	movs	r6, #69	; 0x45
 8003024:	e7ba      	b.n	8002f9c <print_e+0x64>
	...

08003028 <_gcvt>:
 8003028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800302c:	ec55 4b10 	vmov	r4, r5, d0
 8003030:	b088      	sub	sp, #32
 8003032:	4681      	mov	r9, r0
 8003034:	4688      	mov	r8, r1
 8003036:	4616      	mov	r6, r2
 8003038:	469a      	mov	sl, r3
 800303a:	ee10 0a10 	vmov	r0, s0
 800303e:	2200      	movs	r2, #0
 8003040:	2300      	movs	r3, #0
 8003042:	4629      	mov	r1, r5
 8003044:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8003046:	f7fd fd49 	bl	8000adc <__aeabi_dcmplt>
 800304a:	b110      	cbz	r0, 8003052 <_gcvt+0x2a>
 800304c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003050:	461d      	mov	r5, r3
 8003052:	2200      	movs	r2, #0
 8003054:	2300      	movs	r3, #0
 8003056:	4620      	mov	r0, r4
 8003058:	4629      	mov	r1, r5
 800305a:	f7fd fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800305e:	b138      	cbz	r0, 8003070 <_gcvt+0x48>
 8003060:	2330      	movs	r3, #48	; 0x30
 8003062:	7033      	strb	r3, [r6, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	7073      	strb	r3, [r6, #1]
 8003068:	4630      	mov	r0, r6
 800306a:	b008      	add	sp, #32
 800306c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003070:	a34b      	add	r3, pc, #300	; (adr r3, 80031a0 <_gcvt+0x178>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	4620      	mov	r0, r4
 8003078:	4629      	mov	r1, r5
 800307a:	f7fd fd39 	bl	8000af0 <__aeabi_dcmple>
 800307e:	b158      	cbz	r0, 8003098 <_gcvt+0x70>
 8003080:	f108 31ff 	add.w	r1, r8, #4294967295
 8003084:	9100      	str	r1, [sp, #0]
 8003086:	e9cd a701 	strd	sl, r7, [sp, #4]
 800308a:	4622      	mov	r2, r4
 800308c:	462b      	mov	r3, r5
 800308e:	4631      	mov	r1, r6
 8003090:	4648      	mov	r0, r9
 8003092:	f7ff ff51 	bl	8002f38 <print_e>
 8003096:	e7e7      	b.n	8003068 <_gcvt+0x40>
 8003098:	4640      	mov	r0, r8
 800309a:	f000 fc09 	bl	80038b0 <_mprec_log10>
 800309e:	4622      	mov	r2, r4
 80030a0:	ec51 0b10 	vmov	r0, r1, d0
 80030a4:	462b      	mov	r3, r5
 80030a6:	f7fd fd23 	bl	8000af0 <__aeabi_dcmple>
 80030aa:	2800      	cmp	r0, #0
 80030ac:	d1e8      	bne.n	8003080 <_gcvt+0x58>
 80030ae:	ab07      	add	r3, sp, #28
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	ab06      	add	r3, sp, #24
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	4642      	mov	r2, r8
 80030b8:	ab05      	add	r3, sp, #20
 80030ba:	ec45 4b10 	vmov	d0, r4, r5
 80030be:	2102      	movs	r1, #2
 80030c0:	4648      	mov	r0, r9
 80030c2:	f000 fd81 	bl	8003bc8 <_dtoa_r>
 80030c6:	9a05      	ldr	r2, [sp, #20]
 80030c8:	f242 730f 	movw	r3, #9999	; 0x270f
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d00e      	beq.n	80030ee <_gcvt+0xc6>
 80030d0:	4633      	mov	r3, r6
 80030d2:	44b0      	add	r8, r6
 80030d4:	4605      	mov	r5, r0
 80030d6:	f810 1b01 	ldrb.w	r1, [r0], #1
 80030da:	9c05      	ldr	r4, [sp, #20]
 80030dc:	eba8 0203 	sub.w	r2, r8, r3
 80030e0:	b109      	cbz	r1, 80030e6 <_gcvt+0xbe>
 80030e2:	2c00      	cmp	r4, #0
 80030e4:	dc08      	bgt.n	80030f8 <_gcvt+0xd0>
 80030e6:	2100      	movs	r1, #0
 80030e8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80030ec:	e00d      	b.n	800310a <_gcvt+0xe2>
 80030ee:	4601      	mov	r1, r0
 80030f0:	4630      	mov	r0, r6
 80030f2:	f000 fcb5 	bl	8003a60 <strcpy>
 80030f6:	e7b7      	b.n	8003068 <_gcvt+0x40>
 80030f8:	3c01      	subs	r4, #1
 80030fa:	f803 1b01 	strb.w	r1, [r3], #1
 80030fe:	9405      	str	r4, [sp, #20]
 8003100:	e7e8      	b.n	80030d4 <_gcvt+0xac>
 8003102:	f803 cb01 	strb.w	ip, [r3], #1
 8003106:	3a01      	subs	r2, #1
 8003108:	2101      	movs	r1, #1
 800310a:	2c00      	cmp	r4, #0
 800310c:	4620      	mov	r0, r4
 800310e:	dc2a      	bgt.n	8003166 <_gcvt+0x13e>
 8003110:	b101      	cbz	r1, 8003114 <_gcvt+0xec>
 8003112:	9405      	str	r4, [sp, #20]
 8003114:	b90f      	cbnz	r7, 800311a <_gcvt+0xf2>
 8003116:	7829      	ldrb	r1, [r5, #0]
 8003118:	b311      	cbz	r1, 8003160 <_gcvt+0x138>
 800311a:	42b3      	cmp	r3, r6
 800311c:	bf04      	itt	eq
 800311e:	2130      	moveq	r1, #48	; 0x30
 8003120:	f803 1b01 	strbeq.w	r1, [r3], #1
 8003124:	212e      	movs	r1, #46	; 0x2e
 8003126:	7019      	strb	r1, [r3, #0]
 8003128:	9905      	ldr	r1, [sp, #20]
 800312a:	4618      	mov	r0, r3
 800312c:	2400      	movs	r4, #0
 800312e:	eba1 0c03 	sub.w	ip, r1, r3
 8003132:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8003136:	eb1c 0f00 	cmn.w	ip, r0
 800313a:	d41c      	bmi.n	8003176 <_gcvt+0x14e>
 800313c:	2900      	cmp	r1, #0
 800313e:	f1c1 0000 	rsb	r0, r1, #0
 8003142:	bfc8      	it	gt
 8003144:	2000      	movgt	r0, #0
 8003146:	f100 0c01 	add.w	ip, r0, #1
 800314a:	4463      	add	r3, ip
 800314c:	4401      	add	r1, r0
 800314e:	b104      	cbz	r4, 8003152 <_gcvt+0x12a>
 8003150:	9105      	str	r1, [sp, #20]
 8003152:	1e69      	subs	r1, r5, #1
 8003154:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8003158:	b108      	cbz	r0, 800315e <_gcvt+0x136>
 800315a:	2a00      	cmp	r2, #0
 800315c:	dc0f      	bgt.n	800317e <_gcvt+0x156>
 800315e:	b9df      	cbnz	r7, 8003198 <_gcvt+0x170>
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e780      	b.n	8003068 <_gcvt+0x40>
 8003166:	2a00      	cmp	r2, #0
 8003168:	f104 34ff 	add.w	r4, r4, #4294967295
 800316c:	dcc9      	bgt.n	8003102 <_gcvt+0xda>
 800316e:	2900      	cmp	r1, #0
 8003170:	d0d0      	beq.n	8003114 <_gcvt+0xec>
 8003172:	9005      	str	r0, [sp, #20]
 8003174:	e7ce      	b.n	8003114 <_gcvt+0xec>
 8003176:	f800 ef01 	strb.w	lr, [r0, #1]!
 800317a:	2401      	movs	r4, #1
 800317c:	e7db      	b.n	8003136 <_gcvt+0x10e>
 800317e:	f803 0b01 	strb.w	r0, [r3], #1
 8003182:	3a01      	subs	r2, #1
 8003184:	e7e6      	b.n	8003154 <_gcvt+0x12c>
 8003186:	f801 5b01 	strb.w	r5, [r1], #1
 800318a:	1a60      	subs	r0, r4, r1
 800318c:	2800      	cmp	r0, #0
 800318e:	dcfa      	bgt.n	8003186 <_gcvt+0x15e>
 8003190:	2a00      	cmp	r2, #0
 8003192:	bfa8      	it	ge
 8003194:	189b      	addge	r3, r3, r2
 8003196:	e7e3      	b.n	8003160 <_gcvt+0x138>
 8003198:	4619      	mov	r1, r3
 800319a:	189c      	adds	r4, r3, r2
 800319c:	2530      	movs	r5, #48	; 0x30
 800319e:	e7f4      	b.n	800318a <_gcvt+0x162>
 80031a0:	eb1c432d 	.word	0xeb1c432d
 80031a4:	3f1a36e2 	.word	0x3f1a36e2

080031a8 <_Balloc>:
 80031a8:	b570      	push	{r4, r5, r6, lr}
 80031aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80031ac:	4604      	mov	r4, r0
 80031ae:	460d      	mov	r5, r1
 80031b0:	b976      	cbnz	r6, 80031d0 <_Balloc+0x28>
 80031b2:	2010      	movs	r0, #16
 80031b4:	f001 fb08 	bl	80047c8 <malloc>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6260      	str	r0, [r4, #36]	; 0x24
 80031bc:	b920      	cbnz	r0, 80031c8 <_Balloc+0x20>
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <_Balloc+0x78>)
 80031c0:	4818      	ldr	r0, [pc, #96]	; (8003224 <_Balloc+0x7c>)
 80031c2:	2166      	movs	r1, #102	; 0x66
 80031c4:	f000 fc54 	bl	8003a70 <__assert_func>
 80031c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80031cc:	6006      	str	r6, [r0, #0]
 80031ce:	60c6      	str	r6, [r0, #12]
 80031d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80031d2:	68f3      	ldr	r3, [r6, #12]
 80031d4:	b183      	cbz	r3, 80031f8 <_Balloc+0x50>
 80031d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80031de:	b9b8      	cbnz	r0, 8003210 <_Balloc+0x68>
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f605 	lsl.w	r6, r1, r5
 80031e6:	1d72      	adds	r2, r6, #5
 80031e8:	0092      	lsls	r2, r2, #2
 80031ea:	4620      	mov	r0, r4
 80031ec:	f000 fb7e 	bl	80038ec <_calloc_r>
 80031f0:	b160      	cbz	r0, 800320c <_Balloc+0x64>
 80031f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80031f6:	e00e      	b.n	8003216 <_Balloc+0x6e>
 80031f8:	2221      	movs	r2, #33	; 0x21
 80031fa:	2104      	movs	r1, #4
 80031fc:	4620      	mov	r0, r4
 80031fe:	f000 fb75 	bl	80038ec <_calloc_r>
 8003202:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003204:	60f0      	str	r0, [r6, #12]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e4      	bne.n	80031d6 <_Balloc+0x2e>
 800320c:	2000      	movs	r0, #0
 800320e:	bd70      	pop	{r4, r5, r6, pc}
 8003210:	6802      	ldr	r2, [r0, #0]
 8003212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003216:	2300      	movs	r3, #0
 8003218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800321c:	e7f7      	b.n	800320e <_Balloc+0x66>
 800321e:	bf00      	nop
 8003220:	0800589c 	.word	0x0800589c
 8003224:	080058b3 	.word	0x080058b3

08003228 <_Bfree>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800322c:	4605      	mov	r5, r0
 800322e:	460c      	mov	r4, r1
 8003230:	b976      	cbnz	r6, 8003250 <_Bfree+0x28>
 8003232:	2010      	movs	r0, #16
 8003234:	f001 fac8 	bl	80047c8 <malloc>
 8003238:	4602      	mov	r2, r0
 800323a:	6268      	str	r0, [r5, #36]	; 0x24
 800323c:	b920      	cbnz	r0, 8003248 <_Bfree+0x20>
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <_Bfree+0x3c>)
 8003240:	4809      	ldr	r0, [pc, #36]	; (8003268 <_Bfree+0x40>)
 8003242:	218a      	movs	r1, #138	; 0x8a
 8003244:	f000 fc14 	bl	8003a70 <__assert_func>
 8003248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800324c:	6006      	str	r6, [r0, #0]
 800324e:	60c6      	str	r6, [r0, #12]
 8003250:	b13c      	cbz	r4, 8003262 <_Bfree+0x3a>
 8003252:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003254:	6862      	ldr	r2, [r4, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800325c:	6021      	str	r1, [r4, #0]
 800325e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003262:	bd70      	pop	{r4, r5, r6, pc}
 8003264:	0800589c 	.word	0x0800589c
 8003268:	080058b3 	.word	0x080058b3

0800326c <__multadd>:
 800326c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003270:	690d      	ldr	r5, [r1, #16]
 8003272:	4607      	mov	r7, r0
 8003274:	460c      	mov	r4, r1
 8003276:	461e      	mov	r6, r3
 8003278:	f101 0c14 	add.w	ip, r1, #20
 800327c:	2000      	movs	r0, #0
 800327e:	f8dc 3000 	ldr.w	r3, [ip]
 8003282:	b299      	uxth	r1, r3
 8003284:	fb02 6101 	mla	r1, r2, r1, r6
 8003288:	0c1e      	lsrs	r6, r3, #16
 800328a:	0c0b      	lsrs	r3, r1, #16
 800328c:	fb02 3306 	mla	r3, r2, r6, r3
 8003290:	b289      	uxth	r1, r1
 8003292:	3001      	adds	r0, #1
 8003294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003298:	4285      	cmp	r5, r0
 800329a:	f84c 1b04 	str.w	r1, [ip], #4
 800329e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80032a2:	dcec      	bgt.n	800327e <__multadd+0x12>
 80032a4:	b30e      	cbz	r6, 80032ea <__multadd+0x7e>
 80032a6:	68a3      	ldr	r3, [r4, #8]
 80032a8:	42ab      	cmp	r3, r5
 80032aa:	dc19      	bgt.n	80032e0 <__multadd+0x74>
 80032ac:	6861      	ldr	r1, [r4, #4]
 80032ae:	4638      	mov	r0, r7
 80032b0:	3101      	adds	r1, #1
 80032b2:	f7ff ff79 	bl	80031a8 <_Balloc>
 80032b6:	4680      	mov	r8, r0
 80032b8:	b928      	cbnz	r0, 80032c6 <__multadd+0x5a>
 80032ba:	4602      	mov	r2, r0
 80032bc:	4b0c      	ldr	r3, [pc, #48]	; (80032f0 <__multadd+0x84>)
 80032be:	480d      	ldr	r0, [pc, #52]	; (80032f4 <__multadd+0x88>)
 80032c0:	21b5      	movs	r1, #181	; 0xb5
 80032c2:	f000 fbd5 	bl	8003a70 <__assert_func>
 80032c6:	6922      	ldr	r2, [r4, #16]
 80032c8:	3202      	adds	r2, #2
 80032ca:	f104 010c 	add.w	r1, r4, #12
 80032ce:	0092      	lsls	r2, r2, #2
 80032d0:	300c      	adds	r0, #12
 80032d2:	f001 fa81 	bl	80047d8 <memcpy>
 80032d6:	4621      	mov	r1, r4
 80032d8:	4638      	mov	r0, r7
 80032da:	f7ff ffa5 	bl	8003228 <_Bfree>
 80032de:	4644      	mov	r4, r8
 80032e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80032e4:	3501      	adds	r5, #1
 80032e6:	615e      	str	r6, [r3, #20]
 80032e8:	6125      	str	r5, [r4, #16]
 80032ea:	4620      	mov	r0, r4
 80032ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032f0:	0800590f 	.word	0x0800590f
 80032f4:	080058b3 	.word	0x080058b3

080032f8 <__hi0bits>:
 80032f8:	0c03      	lsrs	r3, r0, #16
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	b9d3      	cbnz	r3, 8003334 <__hi0bits+0x3c>
 80032fe:	0400      	lsls	r0, r0, #16
 8003300:	2310      	movs	r3, #16
 8003302:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003306:	bf04      	itt	eq
 8003308:	0200      	lsleq	r0, r0, #8
 800330a:	3308      	addeq	r3, #8
 800330c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003310:	bf04      	itt	eq
 8003312:	0100      	lsleq	r0, r0, #4
 8003314:	3304      	addeq	r3, #4
 8003316:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800331a:	bf04      	itt	eq
 800331c:	0080      	lsleq	r0, r0, #2
 800331e:	3302      	addeq	r3, #2
 8003320:	2800      	cmp	r0, #0
 8003322:	db05      	blt.n	8003330 <__hi0bits+0x38>
 8003324:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003328:	f103 0301 	add.w	r3, r3, #1
 800332c:	bf08      	it	eq
 800332e:	2320      	moveq	r3, #32
 8003330:	4618      	mov	r0, r3
 8003332:	4770      	bx	lr
 8003334:	2300      	movs	r3, #0
 8003336:	e7e4      	b.n	8003302 <__hi0bits+0xa>

08003338 <__lo0bits>:
 8003338:	6803      	ldr	r3, [r0, #0]
 800333a:	f013 0207 	ands.w	r2, r3, #7
 800333e:	4601      	mov	r1, r0
 8003340:	d00b      	beq.n	800335a <__lo0bits+0x22>
 8003342:	07da      	lsls	r2, r3, #31
 8003344:	d423      	bmi.n	800338e <__lo0bits+0x56>
 8003346:	0798      	lsls	r0, r3, #30
 8003348:	bf49      	itett	mi
 800334a:	085b      	lsrmi	r3, r3, #1
 800334c:	089b      	lsrpl	r3, r3, #2
 800334e:	2001      	movmi	r0, #1
 8003350:	600b      	strmi	r3, [r1, #0]
 8003352:	bf5c      	itt	pl
 8003354:	600b      	strpl	r3, [r1, #0]
 8003356:	2002      	movpl	r0, #2
 8003358:	4770      	bx	lr
 800335a:	b298      	uxth	r0, r3
 800335c:	b9a8      	cbnz	r0, 800338a <__lo0bits+0x52>
 800335e:	0c1b      	lsrs	r3, r3, #16
 8003360:	2010      	movs	r0, #16
 8003362:	b2da      	uxtb	r2, r3
 8003364:	b90a      	cbnz	r2, 800336a <__lo0bits+0x32>
 8003366:	3008      	adds	r0, #8
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	071a      	lsls	r2, r3, #28
 800336c:	bf04      	itt	eq
 800336e:	091b      	lsreq	r3, r3, #4
 8003370:	3004      	addeq	r0, #4
 8003372:	079a      	lsls	r2, r3, #30
 8003374:	bf04      	itt	eq
 8003376:	089b      	lsreq	r3, r3, #2
 8003378:	3002      	addeq	r0, #2
 800337a:	07da      	lsls	r2, r3, #31
 800337c:	d403      	bmi.n	8003386 <__lo0bits+0x4e>
 800337e:	085b      	lsrs	r3, r3, #1
 8003380:	f100 0001 	add.w	r0, r0, #1
 8003384:	d005      	beq.n	8003392 <__lo0bits+0x5a>
 8003386:	600b      	str	r3, [r1, #0]
 8003388:	4770      	bx	lr
 800338a:	4610      	mov	r0, r2
 800338c:	e7e9      	b.n	8003362 <__lo0bits+0x2a>
 800338e:	2000      	movs	r0, #0
 8003390:	4770      	bx	lr
 8003392:	2020      	movs	r0, #32
 8003394:	4770      	bx	lr
	...

08003398 <__i2b>:
 8003398:	b510      	push	{r4, lr}
 800339a:	460c      	mov	r4, r1
 800339c:	2101      	movs	r1, #1
 800339e:	f7ff ff03 	bl	80031a8 <_Balloc>
 80033a2:	4602      	mov	r2, r0
 80033a4:	b928      	cbnz	r0, 80033b2 <__i2b+0x1a>
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <__i2b+0x24>)
 80033a8:	4805      	ldr	r0, [pc, #20]	; (80033c0 <__i2b+0x28>)
 80033aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80033ae:	f000 fb5f 	bl	8003a70 <__assert_func>
 80033b2:	2301      	movs	r3, #1
 80033b4:	6144      	str	r4, [r0, #20]
 80033b6:	6103      	str	r3, [r0, #16]
 80033b8:	bd10      	pop	{r4, pc}
 80033ba:	bf00      	nop
 80033bc:	0800590f 	.word	0x0800590f
 80033c0:	080058b3 	.word	0x080058b3

080033c4 <__multiply>:
 80033c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033c8:	4691      	mov	r9, r2
 80033ca:	690a      	ldr	r2, [r1, #16]
 80033cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	bfb8      	it	lt
 80033d4:	460b      	movlt	r3, r1
 80033d6:	460c      	mov	r4, r1
 80033d8:	bfbc      	itt	lt
 80033da:	464c      	movlt	r4, r9
 80033dc:	4699      	movlt	r9, r3
 80033de:	6927      	ldr	r7, [r4, #16]
 80033e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80033e4:	68a3      	ldr	r3, [r4, #8]
 80033e6:	6861      	ldr	r1, [r4, #4]
 80033e8:	eb07 060a 	add.w	r6, r7, sl
 80033ec:	42b3      	cmp	r3, r6
 80033ee:	b085      	sub	sp, #20
 80033f0:	bfb8      	it	lt
 80033f2:	3101      	addlt	r1, #1
 80033f4:	f7ff fed8 	bl	80031a8 <_Balloc>
 80033f8:	b930      	cbnz	r0, 8003408 <__multiply+0x44>
 80033fa:	4602      	mov	r2, r0
 80033fc:	4b44      	ldr	r3, [pc, #272]	; (8003510 <__multiply+0x14c>)
 80033fe:	4845      	ldr	r0, [pc, #276]	; (8003514 <__multiply+0x150>)
 8003400:	f240 115d 	movw	r1, #349	; 0x15d
 8003404:	f000 fb34 	bl	8003a70 <__assert_func>
 8003408:	f100 0514 	add.w	r5, r0, #20
 800340c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003410:	462b      	mov	r3, r5
 8003412:	2200      	movs	r2, #0
 8003414:	4543      	cmp	r3, r8
 8003416:	d321      	bcc.n	800345c <__multiply+0x98>
 8003418:	f104 0314 	add.w	r3, r4, #20
 800341c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003420:	f109 0314 	add.w	r3, r9, #20
 8003424:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003428:	9202      	str	r2, [sp, #8]
 800342a:	1b3a      	subs	r2, r7, r4
 800342c:	3a15      	subs	r2, #21
 800342e:	f022 0203 	bic.w	r2, r2, #3
 8003432:	3204      	adds	r2, #4
 8003434:	f104 0115 	add.w	r1, r4, #21
 8003438:	428f      	cmp	r7, r1
 800343a:	bf38      	it	cc
 800343c:	2204      	movcc	r2, #4
 800343e:	9201      	str	r2, [sp, #4]
 8003440:	9a02      	ldr	r2, [sp, #8]
 8003442:	9303      	str	r3, [sp, #12]
 8003444:	429a      	cmp	r2, r3
 8003446:	d80c      	bhi.n	8003462 <__multiply+0x9e>
 8003448:	2e00      	cmp	r6, #0
 800344a:	dd03      	ble.n	8003454 <__multiply+0x90>
 800344c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05a      	beq.n	800350a <__multiply+0x146>
 8003454:	6106      	str	r6, [r0, #16]
 8003456:	b005      	add	sp, #20
 8003458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800345c:	f843 2b04 	str.w	r2, [r3], #4
 8003460:	e7d8      	b.n	8003414 <__multiply+0x50>
 8003462:	f8b3 a000 	ldrh.w	sl, [r3]
 8003466:	f1ba 0f00 	cmp.w	sl, #0
 800346a:	d024      	beq.n	80034b6 <__multiply+0xf2>
 800346c:	f104 0e14 	add.w	lr, r4, #20
 8003470:	46a9      	mov	r9, r5
 8003472:	f04f 0c00 	mov.w	ip, #0
 8003476:	f85e 2b04 	ldr.w	r2, [lr], #4
 800347a:	f8d9 1000 	ldr.w	r1, [r9]
 800347e:	fa1f fb82 	uxth.w	fp, r2
 8003482:	b289      	uxth	r1, r1
 8003484:	fb0a 110b 	mla	r1, sl, fp, r1
 8003488:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800348c:	f8d9 2000 	ldr.w	r2, [r9]
 8003490:	4461      	add	r1, ip
 8003492:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003496:	fb0a c20b 	mla	r2, sl, fp, ip
 800349a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800349e:	b289      	uxth	r1, r1
 80034a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80034a4:	4577      	cmp	r7, lr
 80034a6:	f849 1b04 	str.w	r1, [r9], #4
 80034aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80034ae:	d8e2      	bhi.n	8003476 <__multiply+0xb2>
 80034b0:	9a01      	ldr	r2, [sp, #4]
 80034b2:	f845 c002 	str.w	ip, [r5, r2]
 80034b6:	9a03      	ldr	r2, [sp, #12]
 80034b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80034bc:	3304      	adds	r3, #4
 80034be:	f1b9 0f00 	cmp.w	r9, #0
 80034c2:	d020      	beq.n	8003506 <__multiply+0x142>
 80034c4:	6829      	ldr	r1, [r5, #0]
 80034c6:	f104 0c14 	add.w	ip, r4, #20
 80034ca:	46ae      	mov	lr, r5
 80034cc:	f04f 0a00 	mov.w	sl, #0
 80034d0:	f8bc b000 	ldrh.w	fp, [ip]
 80034d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80034d8:	fb09 220b 	mla	r2, r9, fp, r2
 80034dc:	4492      	add	sl, r2
 80034de:	b289      	uxth	r1, r1
 80034e0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80034e4:	f84e 1b04 	str.w	r1, [lr], #4
 80034e8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80034ec:	f8be 1000 	ldrh.w	r1, [lr]
 80034f0:	0c12      	lsrs	r2, r2, #16
 80034f2:	fb09 1102 	mla	r1, r9, r2, r1
 80034f6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80034fa:	4567      	cmp	r7, ip
 80034fc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003500:	d8e6      	bhi.n	80034d0 <__multiply+0x10c>
 8003502:	9a01      	ldr	r2, [sp, #4]
 8003504:	50a9      	str	r1, [r5, r2]
 8003506:	3504      	adds	r5, #4
 8003508:	e79a      	b.n	8003440 <__multiply+0x7c>
 800350a:	3e01      	subs	r6, #1
 800350c:	e79c      	b.n	8003448 <__multiply+0x84>
 800350e:	bf00      	nop
 8003510:	0800590f 	.word	0x0800590f
 8003514:	080058b3 	.word	0x080058b3

08003518 <__pow5mult>:
 8003518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800351c:	4615      	mov	r5, r2
 800351e:	f012 0203 	ands.w	r2, r2, #3
 8003522:	4606      	mov	r6, r0
 8003524:	460f      	mov	r7, r1
 8003526:	d007      	beq.n	8003538 <__pow5mult+0x20>
 8003528:	4c25      	ldr	r4, [pc, #148]	; (80035c0 <__pow5mult+0xa8>)
 800352a:	3a01      	subs	r2, #1
 800352c:	2300      	movs	r3, #0
 800352e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003532:	f7ff fe9b 	bl	800326c <__multadd>
 8003536:	4607      	mov	r7, r0
 8003538:	10ad      	asrs	r5, r5, #2
 800353a:	d03d      	beq.n	80035b8 <__pow5mult+0xa0>
 800353c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800353e:	b97c      	cbnz	r4, 8003560 <__pow5mult+0x48>
 8003540:	2010      	movs	r0, #16
 8003542:	f001 f941 	bl	80047c8 <malloc>
 8003546:	4602      	mov	r2, r0
 8003548:	6270      	str	r0, [r6, #36]	; 0x24
 800354a:	b928      	cbnz	r0, 8003558 <__pow5mult+0x40>
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <__pow5mult+0xac>)
 800354e:	481e      	ldr	r0, [pc, #120]	; (80035c8 <__pow5mult+0xb0>)
 8003550:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003554:	f000 fa8c 	bl	8003a70 <__assert_func>
 8003558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800355c:	6004      	str	r4, [r0, #0]
 800355e:	60c4      	str	r4, [r0, #12]
 8003560:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003568:	b94c      	cbnz	r4, 800357e <__pow5mult+0x66>
 800356a:	f240 2171 	movw	r1, #625	; 0x271
 800356e:	4630      	mov	r0, r6
 8003570:	f7ff ff12 	bl	8003398 <__i2b>
 8003574:	2300      	movs	r3, #0
 8003576:	f8c8 0008 	str.w	r0, [r8, #8]
 800357a:	4604      	mov	r4, r0
 800357c:	6003      	str	r3, [r0, #0]
 800357e:	f04f 0900 	mov.w	r9, #0
 8003582:	07eb      	lsls	r3, r5, #31
 8003584:	d50a      	bpl.n	800359c <__pow5mult+0x84>
 8003586:	4639      	mov	r1, r7
 8003588:	4622      	mov	r2, r4
 800358a:	4630      	mov	r0, r6
 800358c:	f7ff ff1a 	bl	80033c4 <__multiply>
 8003590:	4639      	mov	r1, r7
 8003592:	4680      	mov	r8, r0
 8003594:	4630      	mov	r0, r6
 8003596:	f7ff fe47 	bl	8003228 <_Bfree>
 800359a:	4647      	mov	r7, r8
 800359c:	106d      	asrs	r5, r5, #1
 800359e:	d00b      	beq.n	80035b8 <__pow5mult+0xa0>
 80035a0:	6820      	ldr	r0, [r4, #0]
 80035a2:	b938      	cbnz	r0, 80035b4 <__pow5mult+0x9c>
 80035a4:	4622      	mov	r2, r4
 80035a6:	4621      	mov	r1, r4
 80035a8:	4630      	mov	r0, r6
 80035aa:	f7ff ff0b 	bl	80033c4 <__multiply>
 80035ae:	6020      	str	r0, [r4, #0]
 80035b0:	f8c0 9000 	str.w	r9, [r0]
 80035b4:	4604      	mov	r4, r0
 80035b6:	e7e4      	b.n	8003582 <__pow5mult+0x6a>
 80035b8:	4638      	mov	r0, r7
 80035ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035be:	bf00      	nop
 80035c0:	08005a10 	.word	0x08005a10
 80035c4:	0800589c 	.word	0x0800589c
 80035c8:	080058b3 	.word	0x080058b3

080035cc <__lshift>:
 80035cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d0:	460c      	mov	r4, r1
 80035d2:	6849      	ldr	r1, [r1, #4]
 80035d4:	6923      	ldr	r3, [r4, #16]
 80035d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80035da:	68a3      	ldr	r3, [r4, #8]
 80035dc:	4607      	mov	r7, r0
 80035de:	4691      	mov	r9, r2
 80035e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80035e4:	f108 0601 	add.w	r6, r8, #1
 80035e8:	42b3      	cmp	r3, r6
 80035ea:	db0b      	blt.n	8003604 <__lshift+0x38>
 80035ec:	4638      	mov	r0, r7
 80035ee:	f7ff fddb 	bl	80031a8 <_Balloc>
 80035f2:	4605      	mov	r5, r0
 80035f4:	b948      	cbnz	r0, 800360a <__lshift+0x3e>
 80035f6:	4602      	mov	r2, r0
 80035f8:	4b2a      	ldr	r3, [pc, #168]	; (80036a4 <__lshift+0xd8>)
 80035fa:	482b      	ldr	r0, [pc, #172]	; (80036a8 <__lshift+0xdc>)
 80035fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003600:	f000 fa36 	bl	8003a70 <__assert_func>
 8003604:	3101      	adds	r1, #1
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	e7ee      	b.n	80035e8 <__lshift+0x1c>
 800360a:	2300      	movs	r3, #0
 800360c:	f100 0114 	add.w	r1, r0, #20
 8003610:	f100 0210 	add.w	r2, r0, #16
 8003614:	4618      	mov	r0, r3
 8003616:	4553      	cmp	r3, sl
 8003618:	db37      	blt.n	800368a <__lshift+0xbe>
 800361a:	6920      	ldr	r0, [r4, #16]
 800361c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003620:	f104 0314 	add.w	r3, r4, #20
 8003624:	f019 091f 	ands.w	r9, r9, #31
 8003628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800362c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003630:	d02f      	beq.n	8003692 <__lshift+0xc6>
 8003632:	f1c9 0e20 	rsb	lr, r9, #32
 8003636:	468a      	mov	sl, r1
 8003638:	f04f 0c00 	mov.w	ip, #0
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	fa02 f209 	lsl.w	r2, r2, r9
 8003642:	ea42 020c 	orr.w	r2, r2, ip
 8003646:	f84a 2b04 	str.w	r2, [sl], #4
 800364a:	f853 2b04 	ldr.w	r2, [r3], #4
 800364e:	4298      	cmp	r0, r3
 8003650:	fa22 fc0e 	lsr.w	ip, r2, lr
 8003654:	d8f2      	bhi.n	800363c <__lshift+0x70>
 8003656:	1b03      	subs	r3, r0, r4
 8003658:	3b15      	subs	r3, #21
 800365a:	f023 0303 	bic.w	r3, r3, #3
 800365e:	3304      	adds	r3, #4
 8003660:	f104 0215 	add.w	r2, r4, #21
 8003664:	4290      	cmp	r0, r2
 8003666:	bf38      	it	cc
 8003668:	2304      	movcc	r3, #4
 800366a:	f841 c003 	str.w	ip, [r1, r3]
 800366e:	f1bc 0f00 	cmp.w	ip, #0
 8003672:	d001      	beq.n	8003678 <__lshift+0xac>
 8003674:	f108 0602 	add.w	r6, r8, #2
 8003678:	3e01      	subs	r6, #1
 800367a:	4638      	mov	r0, r7
 800367c:	612e      	str	r6, [r5, #16]
 800367e:	4621      	mov	r1, r4
 8003680:	f7ff fdd2 	bl	8003228 <_Bfree>
 8003684:	4628      	mov	r0, r5
 8003686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800368a:	f842 0f04 	str.w	r0, [r2, #4]!
 800368e:	3301      	adds	r3, #1
 8003690:	e7c1      	b.n	8003616 <__lshift+0x4a>
 8003692:	3904      	subs	r1, #4
 8003694:	f853 2b04 	ldr.w	r2, [r3], #4
 8003698:	f841 2f04 	str.w	r2, [r1, #4]!
 800369c:	4298      	cmp	r0, r3
 800369e:	d8f9      	bhi.n	8003694 <__lshift+0xc8>
 80036a0:	e7ea      	b.n	8003678 <__lshift+0xac>
 80036a2:	bf00      	nop
 80036a4:	0800590f 	.word	0x0800590f
 80036a8:	080058b3 	.word	0x080058b3

080036ac <__mcmp>:
 80036ac:	b530      	push	{r4, r5, lr}
 80036ae:	6902      	ldr	r2, [r0, #16]
 80036b0:	690c      	ldr	r4, [r1, #16]
 80036b2:	1b12      	subs	r2, r2, r4
 80036b4:	d10e      	bne.n	80036d4 <__mcmp+0x28>
 80036b6:	f100 0314 	add.w	r3, r0, #20
 80036ba:	3114      	adds	r1, #20
 80036bc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80036c0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80036c4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80036c8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80036cc:	42a5      	cmp	r5, r4
 80036ce:	d003      	beq.n	80036d8 <__mcmp+0x2c>
 80036d0:	d305      	bcc.n	80036de <__mcmp+0x32>
 80036d2:	2201      	movs	r2, #1
 80036d4:	4610      	mov	r0, r2
 80036d6:	bd30      	pop	{r4, r5, pc}
 80036d8:	4283      	cmp	r3, r0
 80036da:	d3f3      	bcc.n	80036c4 <__mcmp+0x18>
 80036dc:	e7fa      	b.n	80036d4 <__mcmp+0x28>
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
 80036e2:	e7f7      	b.n	80036d4 <__mcmp+0x28>

080036e4 <__mdiff>:
 80036e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e8:	460c      	mov	r4, r1
 80036ea:	4606      	mov	r6, r0
 80036ec:	4611      	mov	r1, r2
 80036ee:	4620      	mov	r0, r4
 80036f0:	4690      	mov	r8, r2
 80036f2:	f7ff ffdb 	bl	80036ac <__mcmp>
 80036f6:	1e05      	subs	r5, r0, #0
 80036f8:	d110      	bne.n	800371c <__mdiff+0x38>
 80036fa:	4629      	mov	r1, r5
 80036fc:	4630      	mov	r0, r6
 80036fe:	f7ff fd53 	bl	80031a8 <_Balloc>
 8003702:	b930      	cbnz	r0, 8003712 <__mdiff+0x2e>
 8003704:	4b3a      	ldr	r3, [pc, #232]	; (80037f0 <__mdiff+0x10c>)
 8003706:	4602      	mov	r2, r0
 8003708:	f240 2132 	movw	r1, #562	; 0x232
 800370c:	4839      	ldr	r0, [pc, #228]	; (80037f4 <__mdiff+0x110>)
 800370e:	f000 f9af 	bl	8003a70 <__assert_func>
 8003712:	2301      	movs	r3, #1
 8003714:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003718:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800371c:	bfa4      	itt	ge
 800371e:	4643      	movge	r3, r8
 8003720:	46a0      	movge	r8, r4
 8003722:	4630      	mov	r0, r6
 8003724:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003728:	bfa6      	itte	ge
 800372a:	461c      	movge	r4, r3
 800372c:	2500      	movge	r5, #0
 800372e:	2501      	movlt	r5, #1
 8003730:	f7ff fd3a 	bl	80031a8 <_Balloc>
 8003734:	b920      	cbnz	r0, 8003740 <__mdiff+0x5c>
 8003736:	4b2e      	ldr	r3, [pc, #184]	; (80037f0 <__mdiff+0x10c>)
 8003738:	4602      	mov	r2, r0
 800373a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800373e:	e7e5      	b.n	800370c <__mdiff+0x28>
 8003740:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003744:	6926      	ldr	r6, [r4, #16]
 8003746:	60c5      	str	r5, [r0, #12]
 8003748:	f104 0914 	add.w	r9, r4, #20
 800374c:	f108 0514 	add.w	r5, r8, #20
 8003750:	f100 0e14 	add.w	lr, r0, #20
 8003754:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8003758:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800375c:	f108 0210 	add.w	r2, r8, #16
 8003760:	46f2      	mov	sl, lr
 8003762:	2100      	movs	r1, #0
 8003764:	f859 3b04 	ldr.w	r3, [r9], #4
 8003768:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800376c:	fa1f f883 	uxth.w	r8, r3
 8003770:	fa11 f18b 	uxtah	r1, r1, fp
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	eba1 0808 	sub.w	r8, r1, r8
 800377a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800377e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003782:	fa1f f888 	uxth.w	r8, r8
 8003786:	1419      	asrs	r1, r3, #16
 8003788:	454e      	cmp	r6, r9
 800378a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800378e:	f84a 3b04 	str.w	r3, [sl], #4
 8003792:	d8e7      	bhi.n	8003764 <__mdiff+0x80>
 8003794:	1b33      	subs	r3, r6, r4
 8003796:	3b15      	subs	r3, #21
 8003798:	f023 0303 	bic.w	r3, r3, #3
 800379c:	3304      	adds	r3, #4
 800379e:	3415      	adds	r4, #21
 80037a0:	42a6      	cmp	r6, r4
 80037a2:	bf38      	it	cc
 80037a4:	2304      	movcc	r3, #4
 80037a6:	441d      	add	r5, r3
 80037a8:	4473      	add	r3, lr
 80037aa:	469e      	mov	lr, r3
 80037ac:	462e      	mov	r6, r5
 80037ae:	4566      	cmp	r6, ip
 80037b0:	d30e      	bcc.n	80037d0 <__mdiff+0xec>
 80037b2:	f10c 0203 	add.w	r2, ip, #3
 80037b6:	1b52      	subs	r2, r2, r5
 80037b8:	f022 0203 	bic.w	r2, r2, #3
 80037bc:	3d03      	subs	r5, #3
 80037be:	45ac      	cmp	ip, r5
 80037c0:	bf38      	it	cc
 80037c2:	2200      	movcc	r2, #0
 80037c4:	441a      	add	r2, r3
 80037c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80037ca:	b17b      	cbz	r3, 80037ec <__mdiff+0x108>
 80037cc:	6107      	str	r7, [r0, #16]
 80037ce:	e7a3      	b.n	8003718 <__mdiff+0x34>
 80037d0:	f856 8b04 	ldr.w	r8, [r6], #4
 80037d4:	fa11 f288 	uxtah	r2, r1, r8
 80037d8:	1414      	asrs	r4, r2, #16
 80037da:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80037de:	b292      	uxth	r2, r2
 80037e0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80037e4:	f84e 2b04 	str.w	r2, [lr], #4
 80037e8:	1421      	asrs	r1, r4, #16
 80037ea:	e7e0      	b.n	80037ae <__mdiff+0xca>
 80037ec:	3f01      	subs	r7, #1
 80037ee:	e7ea      	b.n	80037c6 <__mdiff+0xe2>
 80037f0:	0800590f 	.word	0x0800590f
 80037f4:	080058b3 	.word	0x080058b3

080037f8 <__d2b>:
 80037f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037fc:	4689      	mov	r9, r1
 80037fe:	2101      	movs	r1, #1
 8003800:	ec57 6b10 	vmov	r6, r7, d0
 8003804:	4690      	mov	r8, r2
 8003806:	f7ff fccf 	bl	80031a8 <_Balloc>
 800380a:	4604      	mov	r4, r0
 800380c:	b930      	cbnz	r0, 800381c <__d2b+0x24>
 800380e:	4602      	mov	r2, r0
 8003810:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <__d2b+0xb0>)
 8003812:	4826      	ldr	r0, [pc, #152]	; (80038ac <__d2b+0xb4>)
 8003814:	f240 310a 	movw	r1, #778	; 0x30a
 8003818:	f000 f92a 	bl	8003a70 <__assert_func>
 800381c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8003820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003824:	bb35      	cbnz	r5, 8003874 <__d2b+0x7c>
 8003826:	2e00      	cmp	r6, #0
 8003828:	9301      	str	r3, [sp, #4]
 800382a:	d028      	beq.n	800387e <__d2b+0x86>
 800382c:	4668      	mov	r0, sp
 800382e:	9600      	str	r6, [sp, #0]
 8003830:	f7ff fd82 	bl	8003338 <__lo0bits>
 8003834:	9900      	ldr	r1, [sp, #0]
 8003836:	b300      	cbz	r0, 800387a <__d2b+0x82>
 8003838:	9a01      	ldr	r2, [sp, #4]
 800383a:	f1c0 0320 	rsb	r3, r0, #32
 800383e:	fa02 f303 	lsl.w	r3, r2, r3
 8003842:	430b      	orrs	r3, r1
 8003844:	40c2      	lsrs	r2, r0
 8003846:	6163      	str	r3, [r4, #20]
 8003848:	9201      	str	r2, [sp, #4]
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	61a3      	str	r3, [r4, #24]
 800384e:	2b00      	cmp	r3, #0
 8003850:	bf14      	ite	ne
 8003852:	2202      	movne	r2, #2
 8003854:	2201      	moveq	r2, #1
 8003856:	6122      	str	r2, [r4, #16]
 8003858:	b1d5      	cbz	r5, 8003890 <__d2b+0x98>
 800385a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800385e:	4405      	add	r5, r0
 8003860:	f8c9 5000 	str.w	r5, [r9]
 8003864:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003868:	f8c8 0000 	str.w	r0, [r8]
 800386c:	4620      	mov	r0, r4
 800386e:	b003      	add	sp, #12
 8003870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003878:	e7d5      	b.n	8003826 <__d2b+0x2e>
 800387a:	6161      	str	r1, [r4, #20]
 800387c:	e7e5      	b.n	800384a <__d2b+0x52>
 800387e:	a801      	add	r0, sp, #4
 8003880:	f7ff fd5a 	bl	8003338 <__lo0bits>
 8003884:	9b01      	ldr	r3, [sp, #4]
 8003886:	6163      	str	r3, [r4, #20]
 8003888:	2201      	movs	r2, #1
 800388a:	6122      	str	r2, [r4, #16]
 800388c:	3020      	adds	r0, #32
 800388e:	e7e3      	b.n	8003858 <__d2b+0x60>
 8003890:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003894:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003898:	f8c9 0000 	str.w	r0, [r9]
 800389c:	6918      	ldr	r0, [r3, #16]
 800389e:	f7ff fd2b 	bl	80032f8 <__hi0bits>
 80038a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80038a6:	e7df      	b.n	8003868 <__d2b+0x70>
 80038a8:	0800590f 	.word	0x0800590f
 80038ac:	080058b3 	.word	0x080058b3

080038b0 <_mprec_log10>:
 80038b0:	2817      	cmp	r0, #23
 80038b2:	b5d0      	push	{r4, r6, r7, lr}
 80038b4:	4604      	mov	r4, r0
 80038b6:	dc07      	bgt.n	80038c8 <_mprec_log10+0x18>
 80038b8:	4809      	ldr	r0, [pc, #36]	; (80038e0 <_mprec_log10+0x30>)
 80038ba:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80038be:	e9d4 0100 	ldrd	r0, r1, [r4]
 80038c2:	ec41 0b10 	vmov	d0, r0, r1
 80038c6:	bdd0      	pop	{r4, r6, r7, pc}
 80038c8:	4906      	ldr	r1, [pc, #24]	; (80038e4 <_mprec_log10+0x34>)
 80038ca:	4f07      	ldr	r7, [pc, #28]	; (80038e8 <_mprec_log10+0x38>)
 80038cc:	2000      	movs	r0, #0
 80038ce:	2600      	movs	r6, #0
 80038d0:	4632      	mov	r2, r6
 80038d2:	463b      	mov	r3, r7
 80038d4:	f7fc fe90 	bl	80005f8 <__aeabi_dmul>
 80038d8:	3c01      	subs	r4, #1
 80038da:	d1f9      	bne.n	80038d0 <_mprec_log10+0x20>
 80038dc:	e7f1      	b.n	80038c2 <_mprec_log10+0x12>
 80038de:	bf00      	nop
 80038e0:	08005948 	.word	0x08005948
 80038e4:	3ff00000 	.word	0x3ff00000
 80038e8:	40240000 	.word	0x40240000

080038ec <_calloc_r>:
 80038ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80038ee:	fba1 2402 	umull	r2, r4, r1, r2
 80038f2:	b94c      	cbnz	r4, 8003908 <_calloc_r+0x1c>
 80038f4:	4611      	mov	r1, r2
 80038f6:	9201      	str	r2, [sp, #4]
 80038f8:	f000 f82e 	bl	8003958 <_malloc_r>
 80038fc:	9a01      	ldr	r2, [sp, #4]
 80038fe:	4605      	mov	r5, r0
 8003900:	b930      	cbnz	r0, 8003910 <_calloc_r+0x24>
 8003902:	4628      	mov	r0, r5
 8003904:	b003      	add	sp, #12
 8003906:	bd30      	pop	{r4, r5, pc}
 8003908:	220c      	movs	r2, #12
 800390a:	6002      	str	r2, [r0, #0]
 800390c:	2500      	movs	r5, #0
 800390e:	e7f8      	b.n	8003902 <_calloc_r+0x16>
 8003910:	4621      	mov	r1, r4
 8003912:	f7ff fb09 	bl	8002f28 <memset>
 8003916:	e7f4      	b.n	8003902 <_calloc_r+0x16>

08003918 <sbrk_aligned>:
 8003918:	b570      	push	{r4, r5, r6, lr}
 800391a:	4e0e      	ldr	r6, [pc, #56]	; (8003954 <sbrk_aligned+0x3c>)
 800391c:	460c      	mov	r4, r1
 800391e:	6831      	ldr	r1, [r6, #0]
 8003920:	4605      	mov	r5, r0
 8003922:	b911      	cbnz	r1, 800392a <sbrk_aligned+0x12>
 8003924:	f000 f88c 	bl	8003a40 <_sbrk_r>
 8003928:	6030      	str	r0, [r6, #0]
 800392a:	4621      	mov	r1, r4
 800392c:	4628      	mov	r0, r5
 800392e:	f000 f887 	bl	8003a40 <_sbrk_r>
 8003932:	1c43      	adds	r3, r0, #1
 8003934:	d00a      	beq.n	800394c <sbrk_aligned+0x34>
 8003936:	1cc4      	adds	r4, r0, #3
 8003938:	f024 0403 	bic.w	r4, r4, #3
 800393c:	42a0      	cmp	r0, r4
 800393e:	d007      	beq.n	8003950 <sbrk_aligned+0x38>
 8003940:	1a21      	subs	r1, r4, r0
 8003942:	4628      	mov	r0, r5
 8003944:	f000 f87c 	bl	8003a40 <_sbrk_r>
 8003948:	3001      	adds	r0, #1
 800394a:	d101      	bne.n	8003950 <sbrk_aligned+0x38>
 800394c:	f04f 34ff 	mov.w	r4, #4294967295
 8003950:	4620      	mov	r0, r4
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	20000328 	.word	0x20000328

08003958 <_malloc_r>:
 8003958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4607      	mov	r7, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d905      	bls.n	8003980 <_malloc_r+0x28>
 8003974:	230c      	movs	r3, #12
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	2600      	movs	r6, #0
 800397a:	4630      	mov	r0, r6
 800397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003980:	4e2e      	ldr	r6, [pc, #184]	; (8003a3c <_malloc_r+0xe4>)
 8003982:	f000 ff37 	bl	80047f4 <__malloc_lock>
 8003986:	6833      	ldr	r3, [r6, #0]
 8003988:	461c      	mov	r4, r3
 800398a:	bb34      	cbnz	r4, 80039da <_malloc_r+0x82>
 800398c:	4629      	mov	r1, r5
 800398e:	4638      	mov	r0, r7
 8003990:	f7ff ffc2 	bl	8003918 <sbrk_aligned>
 8003994:	1c43      	adds	r3, r0, #1
 8003996:	4604      	mov	r4, r0
 8003998:	d14d      	bne.n	8003a36 <_malloc_r+0xde>
 800399a:	6834      	ldr	r4, [r6, #0]
 800399c:	4626      	mov	r6, r4
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d140      	bne.n	8003a24 <_malloc_r+0xcc>
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	4631      	mov	r1, r6
 80039a6:	4638      	mov	r0, r7
 80039a8:	eb04 0803 	add.w	r8, r4, r3
 80039ac:	f000 f848 	bl	8003a40 <_sbrk_r>
 80039b0:	4580      	cmp	r8, r0
 80039b2:	d13a      	bne.n	8003a2a <_malloc_r+0xd2>
 80039b4:	6821      	ldr	r1, [r4, #0]
 80039b6:	3503      	adds	r5, #3
 80039b8:	1a6d      	subs	r5, r5, r1
 80039ba:	f025 0503 	bic.w	r5, r5, #3
 80039be:	3508      	adds	r5, #8
 80039c0:	2d0c      	cmp	r5, #12
 80039c2:	bf38      	it	cc
 80039c4:	250c      	movcc	r5, #12
 80039c6:	4629      	mov	r1, r5
 80039c8:	4638      	mov	r0, r7
 80039ca:	f7ff ffa5 	bl	8003918 <sbrk_aligned>
 80039ce:	3001      	adds	r0, #1
 80039d0:	d02b      	beq.n	8003a2a <_malloc_r+0xd2>
 80039d2:	6823      	ldr	r3, [r4, #0]
 80039d4:	442b      	add	r3, r5
 80039d6:	6023      	str	r3, [r4, #0]
 80039d8:	e00e      	b.n	80039f8 <_malloc_r+0xa0>
 80039da:	6822      	ldr	r2, [r4, #0]
 80039dc:	1b52      	subs	r2, r2, r5
 80039de:	d41e      	bmi.n	8003a1e <_malloc_r+0xc6>
 80039e0:	2a0b      	cmp	r2, #11
 80039e2:	d916      	bls.n	8003a12 <_malloc_r+0xba>
 80039e4:	1961      	adds	r1, r4, r5
 80039e6:	42a3      	cmp	r3, r4
 80039e8:	6025      	str	r5, [r4, #0]
 80039ea:	bf18      	it	ne
 80039ec:	6059      	strne	r1, [r3, #4]
 80039ee:	6863      	ldr	r3, [r4, #4]
 80039f0:	bf08      	it	eq
 80039f2:	6031      	streq	r1, [r6, #0]
 80039f4:	5162      	str	r2, [r4, r5]
 80039f6:	604b      	str	r3, [r1, #4]
 80039f8:	4638      	mov	r0, r7
 80039fa:	f104 060b 	add.w	r6, r4, #11
 80039fe:	f000 feff 	bl	8004800 <__malloc_unlock>
 8003a02:	f026 0607 	bic.w	r6, r6, #7
 8003a06:	1d23      	adds	r3, r4, #4
 8003a08:	1af2      	subs	r2, r6, r3
 8003a0a:	d0b6      	beq.n	800397a <_malloc_r+0x22>
 8003a0c:	1b9b      	subs	r3, r3, r6
 8003a0e:	50a3      	str	r3, [r4, r2]
 8003a10:	e7b3      	b.n	800397a <_malloc_r+0x22>
 8003a12:	6862      	ldr	r2, [r4, #4]
 8003a14:	42a3      	cmp	r3, r4
 8003a16:	bf0c      	ite	eq
 8003a18:	6032      	streq	r2, [r6, #0]
 8003a1a:	605a      	strne	r2, [r3, #4]
 8003a1c:	e7ec      	b.n	80039f8 <_malloc_r+0xa0>
 8003a1e:	4623      	mov	r3, r4
 8003a20:	6864      	ldr	r4, [r4, #4]
 8003a22:	e7b2      	b.n	800398a <_malloc_r+0x32>
 8003a24:	4634      	mov	r4, r6
 8003a26:	6876      	ldr	r6, [r6, #4]
 8003a28:	e7b9      	b.n	800399e <_malloc_r+0x46>
 8003a2a:	230c      	movs	r3, #12
 8003a2c:	603b      	str	r3, [r7, #0]
 8003a2e:	4638      	mov	r0, r7
 8003a30:	f000 fee6 	bl	8004800 <__malloc_unlock>
 8003a34:	e7a1      	b.n	800397a <_malloc_r+0x22>
 8003a36:	6025      	str	r5, [r4, #0]
 8003a38:	e7de      	b.n	80039f8 <_malloc_r+0xa0>
 8003a3a:	bf00      	nop
 8003a3c:	20000324 	.word	0x20000324

08003a40 <_sbrk_r>:
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	4d06      	ldr	r5, [pc, #24]	; (8003a5c <_sbrk_r+0x1c>)
 8003a44:	2300      	movs	r3, #0
 8003a46:	4604      	mov	r4, r0
 8003a48:	4608      	mov	r0, r1
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	f7fd ff1e 	bl	800188c <_sbrk>
 8003a50:	1c43      	adds	r3, r0, #1
 8003a52:	d102      	bne.n	8003a5a <_sbrk_r+0x1a>
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	b103      	cbz	r3, 8003a5a <_sbrk_r+0x1a>
 8003a58:	6023      	str	r3, [r4, #0]
 8003a5a:	bd38      	pop	{r3, r4, r5, pc}
 8003a5c:	2000032c 	.word	0x2000032c

08003a60 <strcpy>:
 8003a60:	4603      	mov	r3, r0
 8003a62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a66:	f803 2b01 	strb.w	r2, [r3], #1
 8003a6a:	2a00      	cmp	r2, #0
 8003a6c:	d1f9      	bne.n	8003a62 <strcpy+0x2>
 8003a6e:	4770      	bx	lr

08003a70 <__assert_func>:
 8003a70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a72:	4614      	mov	r4, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b09      	ldr	r3, [pc, #36]	; (8003a9c <__assert_func+0x2c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	68d8      	ldr	r0, [r3, #12]
 8003a7e:	b14c      	cbz	r4, 8003a94 <__assert_func+0x24>
 8003a80:	4b07      	ldr	r3, [pc, #28]	; (8003aa0 <__assert_func+0x30>)
 8003a82:	9100      	str	r1, [sp, #0]
 8003a84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003a88:	4906      	ldr	r1, [pc, #24]	; (8003aa4 <__assert_func+0x34>)
 8003a8a:	462b      	mov	r3, r5
 8003a8c:	f000 fe8a 	bl	80047a4 <fiprintf>
 8003a90:	f001 fab6 	bl	8005000 <abort>
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <__assert_func+0x38>)
 8003a96:	461c      	mov	r4, r3
 8003a98:	e7f3      	b.n	8003a82 <__assert_func+0x12>
 8003a9a:	bf00      	nop
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	08005a1c 	.word	0x08005a1c
 8003aa4:	08005a29 	.word	0x08005a29
 8003aa8:	08005a57 	.word	0x08005a57

08003aac <quorem>:
 8003aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab0:	6903      	ldr	r3, [r0, #16]
 8003ab2:	690c      	ldr	r4, [r1, #16]
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	4607      	mov	r7, r0
 8003ab8:	f2c0 8081 	blt.w	8003bbe <quorem+0x112>
 8003abc:	3c01      	subs	r4, #1
 8003abe:	f101 0814 	add.w	r8, r1, #20
 8003ac2:	f100 0514 	add.w	r5, r0, #20
 8003ac6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ad0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003adc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003ae0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ae4:	d331      	bcc.n	8003b4a <quorem+0x9e>
 8003ae6:	f04f 0e00 	mov.w	lr, #0
 8003aea:	4640      	mov	r0, r8
 8003aec:	46ac      	mov	ip, r5
 8003aee:	46f2      	mov	sl, lr
 8003af0:	f850 2b04 	ldr.w	r2, [r0], #4
 8003af4:	b293      	uxth	r3, r2
 8003af6:	fb06 e303 	mla	r3, r6, r3, lr
 8003afa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	ebaa 0303 	sub.w	r3, sl, r3
 8003b04:	f8dc a000 	ldr.w	sl, [ip]
 8003b08:	0c12      	lsrs	r2, r2, #16
 8003b0a:	fa13 f38a 	uxtah	r3, r3, sl
 8003b0e:	fb06 e202 	mla	r2, r6, r2, lr
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	9b00      	ldr	r3, [sp, #0]
 8003b16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b1a:	b292      	uxth	r2, r2
 8003b1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b24:	f8bd 3000 	ldrh.w	r3, [sp]
 8003b28:	4581      	cmp	r9, r0
 8003b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b2e:	f84c 3b04 	str.w	r3, [ip], #4
 8003b32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003b36:	d2db      	bcs.n	8003af0 <quorem+0x44>
 8003b38:	f855 300b 	ldr.w	r3, [r5, fp]
 8003b3c:	b92b      	cbnz	r3, 8003b4a <quorem+0x9e>
 8003b3e:	9b01      	ldr	r3, [sp, #4]
 8003b40:	3b04      	subs	r3, #4
 8003b42:	429d      	cmp	r5, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	d32e      	bcc.n	8003ba6 <quorem+0xfa>
 8003b48:	613c      	str	r4, [r7, #16]
 8003b4a:	4638      	mov	r0, r7
 8003b4c:	f7ff fdae 	bl	80036ac <__mcmp>
 8003b50:	2800      	cmp	r0, #0
 8003b52:	db24      	blt.n	8003b9e <quorem+0xf2>
 8003b54:	3601      	adds	r6, #1
 8003b56:	4628      	mov	r0, r5
 8003b58:	f04f 0c00 	mov.w	ip, #0
 8003b5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8003b60:	f8d0 e000 	ldr.w	lr, [r0]
 8003b64:	b293      	uxth	r3, r2
 8003b66:	ebac 0303 	sub.w	r3, ip, r3
 8003b6a:	0c12      	lsrs	r2, r2, #16
 8003b6c:	fa13 f38e 	uxtah	r3, r3, lr
 8003b70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b7e:	45c1      	cmp	r9, r8
 8003b80:	f840 3b04 	str.w	r3, [r0], #4
 8003b84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b88:	d2e8      	bcs.n	8003b5c <quorem+0xb0>
 8003b8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b92:	b922      	cbnz	r2, 8003b9e <quorem+0xf2>
 8003b94:	3b04      	subs	r3, #4
 8003b96:	429d      	cmp	r5, r3
 8003b98:	461a      	mov	r2, r3
 8003b9a:	d30a      	bcc.n	8003bb2 <quorem+0x106>
 8003b9c:	613c      	str	r4, [r7, #16]
 8003b9e:	4630      	mov	r0, r6
 8003ba0:	b003      	add	sp, #12
 8003ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	3b04      	subs	r3, #4
 8003baa:	2a00      	cmp	r2, #0
 8003bac:	d1cc      	bne.n	8003b48 <quorem+0x9c>
 8003bae:	3c01      	subs	r4, #1
 8003bb0:	e7c7      	b.n	8003b42 <quorem+0x96>
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	3b04      	subs	r3, #4
 8003bb6:	2a00      	cmp	r2, #0
 8003bb8:	d1f0      	bne.n	8003b9c <quorem+0xf0>
 8003bba:	3c01      	subs	r4, #1
 8003bbc:	e7eb      	b.n	8003b96 <quorem+0xea>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	e7ee      	b.n	8003ba0 <quorem+0xf4>
 8003bc2:	0000      	movs	r0, r0
 8003bc4:	0000      	movs	r0, r0
	...

08003bc8 <_dtoa_r>:
 8003bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	ed2d 8b04 	vpush	{d8-d9}
 8003bd0:	ec57 6b10 	vmov	r6, r7, d0
 8003bd4:	b093      	sub	sp, #76	; 0x4c
 8003bd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003bd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003bdc:	9106      	str	r1, [sp, #24]
 8003bde:	ee10 aa10 	vmov	sl, s0
 8003be2:	4604      	mov	r4, r0
 8003be4:	9209      	str	r2, [sp, #36]	; 0x24
 8003be6:	930c      	str	r3, [sp, #48]	; 0x30
 8003be8:	46bb      	mov	fp, r7
 8003bea:	b975      	cbnz	r5, 8003c0a <_dtoa_r+0x42>
 8003bec:	2010      	movs	r0, #16
 8003bee:	f000 fdeb 	bl	80047c8 <malloc>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	6260      	str	r0, [r4, #36]	; 0x24
 8003bf6:	b920      	cbnz	r0, 8003c02 <_dtoa_r+0x3a>
 8003bf8:	4ba7      	ldr	r3, [pc, #668]	; (8003e98 <_dtoa_r+0x2d0>)
 8003bfa:	21ea      	movs	r1, #234	; 0xea
 8003bfc:	48a7      	ldr	r0, [pc, #668]	; (8003e9c <_dtoa_r+0x2d4>)
 8003bfe:	f7ff ff37 	bl	8003a70 <__assert_func>
 8003c02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003c06:	6005      	str	r5, [r0, #0]
 8003c08:	60c5      	str	r5, [r0, #12]
 8003c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c0c:	6819      	ldr	r1, [r3, #0]
 8003c0e:	b151      	cbz	r1, 8003c26 <_dtoa_r+0x5e>
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	604a      	str	r2, [r1, #4]
 8003c14:	2301      	movs	r3, #1
 8003c16:	4093      	lsls	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff fb04 	bl	8003228 <_Bfree>
 8003c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	1e3b      	subs	r3, r7, #0
 8003c28:	bfaa      	itet	ge
 8003c2a:	2300      	movge	r3, #0
 8003c2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003c30:	f8c8 3000 	strge.w	r3, [r8]
 8003c34:	4b9a      	ldr	r3, [pc, #616]	; (8003ea0 <_dtoa_r+0x2d8>)
 8003c36:	bfbc      	itt	lt
 8003c38:	2201      	movlt	r2, #1
 8003c3a:	f8c8 2000 	strlt.w	r2, [r8]
 8003c3e:	ea33 030b 	bics.w	r3, r3, fp
 8003c42:	d11b      	bne.n	8003c7c <_dtoa_r+0xb4>
 8003c44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c46:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c4a:	6013      	str	r3, [r2, #0]
 8003c4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003c50:	4333      	orrs	r3, r6
 8003c52:	f000 8592 	beq.w	800477a <_dtoa_r+0xbb2>
 8003c56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c58:	b963      	cbnz	r3, 8003c74 <_dtoa_r+0xac>
 8003c5a:	4b92      	ldr	r3, [pc, #584]	; (8003ea4 <_dtoa_r+0x2dc>)
 8003c5c:	e022      	b.n	8003ca4 <_dtoa_r+0xdc>
 8003c5e:	4b92      	ldr	r3, [pc, #584]	; (8003ea8 <_dtoa_r+0x2e0>)
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	3308      	adds	r3, #8
 8003c64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	9801      	ldr	r0, [sp, #4]
 8003c6a:	b013      	add	sp, #76	; 0x4c
 8003c6c:	ecbd 8b04 	vpop	{d8-d9}
 8003c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c74:	4b8b      	ldr	r3, [pc, #556]	; (8003ea4 <_dtoa_r+0x2dc>)
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	3303      	adds	r3, #3
 8003c7a:	e7f3      	b.n	8003c64 <_dtoa_r+0x9c>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	2300      	movs	r3, #0
 8003c80:	4650      	mov	r0, sl
 8003c82:	4659      	mov	r1, fp
 8003c84:	f7fc ff20 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c88:	ec4b ab19 	vmov	d9, sl, fp
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	b158      	cbz	r0, 8003ca8 <_dtoa_r+0xe0>
 8003c90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c92:	2301      	movs	r3, #1
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 856b 	beq.w	8004774 <_dtoa_r+0xbac>
 8003c9e:	4883      	ldr	r0, [pc, #524]	; (8003eac <_dtoa_r+0x2e4>)
 8003ca0:	6018      	str	r0, [r3, #0]
 8003ca2:	1e43      	subs	r3, r0, #1
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	e7df      	b.n	8003c68 <_dtoa_r+0xa0>
 8003ca8:	ec4b ab10 	vmov	d0, sl, fp
 8003cac:	aa10      	add	r2, sp, #64	; 0x40
 8003cae:	a911      	add	r1, sp, #68	; 0x44
 8003cb0:	4620      	mov	r0, r4
 8003cb2:	f7ff fda1 	bl	80037f8 <__d2b>
 8003cb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003cba:	ee08 0a10 	vmov	s16, r0
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	f000 8084 	beq.w	8003dcc <_dtoa_r+0x204>
 8003cc4:	ee19 3a90 	vmov	r3, s19
 8003cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ccc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003cd0:	4656      	mov	r6, sl
 8003cd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003cd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003cda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003cde:	4b74      	ldr	r3, [pc, #464]	; (8003eb0 <_dtoa_r+0x2e8>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	4639      	mov	r1, r7
 8003ce6:	f7fc facf 	bl	8000288 <__aeabi_dsub>
 8003cea:	a365      	add	r3, pc, #404	; (adr r3, 8003e80 <_dtoa_r+0x2b8>)
 8003cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf0:	f7fc fc82 	bl	80005f8 <__aeabi_dmul>
 8003cf4:	a364      	add	r3, pc, #400	; (adr r3, 8003e88 <_dtoa_r+0x2c0>)
 8003cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfa:	f7fc fac7 	bl	800028c <__adddf3>
 8003cfe:	4606      	mov	r6, r0
 8003d00:	4628      	mov	r0, r5
 8003d02:	460f      	mov	r7, r1
 8003d04:	f7fc fc0e 	bl	8000524 <__aeabi_i2d>
 8003d08:	a361      	add	r3, pc, #388	; (adr r3, 8003e90 <_dtoa_r+0x2c8>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fc73 	bl	80005f8 <__aeabi_dmul>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4630      	mov	r0, r6
 8003d18:	4639      	mov	r1, r7
 8003d1a:	f7fc fab7 	bl	800028c <__adddf3>
 8003d1e:	4606      	mov	r6, r0
 8003d20:	460f      	mov	r7, r1
 8003d22:	f7fc ff03 	bl	8000b2c <__aeabi_d2iz>
 8003d26:	2200      	movs	r2, #0
 8003d28:	9000      	str	r0, [sp, #0]
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	4630      	mov	r0, r6
 8003d2e:	4639      	mov	r1, r7
 8003d30:	f7fc fed4 	bl	8000adc <__aeabi_dcmplt>
 8003d34:	b150      	cbz	r0, 8003d4c <_dtoa_r+0x184>
 8003d36:	9800      	ldr	r0, [sp, #0]
 8003d38:	f7fc fbf4 	bl	8000524 <__aeabi_i2d>
 8003d3c:	4632      	mov	r2, r6
 8003d3e:	463b      	mov	r3, r7
 8003d40:	f7fc fec2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d44:	b910      	cbnz	r0, 8003d4c <_dtoa_r+0x184>
 8003d46:	9b00      	ldr	r3, [sp, #0]
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	9b00      	ldr	r3, [sp, #0]
 8003d4e:	2b16      	cmp	r3, #22
 8003d50:	d85a      	bhi.n	8003e08 <_dtoa_r+0x240>
 8003d52:	9a00      	ldr	r2, [sp, #0]
 8003d54:	4b57      	ldr	r3, [pc, #348]	; (8003eb4 <_dtoa_r+0x2ec>)
 8003d56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5e:	ec51 0b19 	vmov	r0, r1, d9
 8003d62:	f7fc febb 	bl	8000adc <__aeabi_dcmplt>
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d050      	beq.n	8003e0c <_dtoa_r+0x244>
 8003d6a:	9b00      	ldr	r3, [sp, #0]
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2300      	movs	r3, #0
 8003d72:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003d76:	1b5d      	subs	r5, r3, r5
 8003d78:	1e6b      	subs	r3, r5, #1
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	bf45      	ittet	mi
 8003d7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8003d82:	9304      	strmi	r3, [sp, #16]
 8003d84:	2300      	movpl	r3, #0
 8003d86:	2300      	movmi	r3, #0
 8003d88:	bf4c      	ite	mi
 8003d8a:	9305      	strmi	r3, [sp, #20]
 8003d8c:	9304      	strpl	r3, [sp, #16]
 8003d8e:	9b00      	ldr	r3, [sp, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	db3d      	blt.n	8003e10 <_dtoa_r+0x248>
 8003d94:	9b05      	ldr	r3, [sp, #20]
 8003d96:	9a00      	ldr	r2, [sp, #0]
 8003d98:	920a      	str	r2, [sp, #40]	; 0x28
 8003d9a:	4413      	add	r3, r2
 8003d9c:	9305      	str	r3, [sp, #20]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	9307      	str	r3, [sp, #28]
 8003da2:	9b06      	ldr	r3, [sp, #24]
 8003da4:	2b09      	cmp	r3, #9
 8003da6:	f200 8089 	bhi.w	8003ebc <_dtoa_r+0x2f4>
 8003daa:	2b05      	cmp	r3, #5
 8003dac:	bfc4      	itt	gt
 8003dae:	3b04      	subgt	r3, #4
 8003db0:	9306      	strgt	r3, [sp, #24]
 8003db2:	9b06      	ldr	r3, [sp, #24]
 8003db4:	f1a3 0302 	sub.w	r3, r3, #2
 8003db8:	bfcc      	ite	gt
 8003dba:	2500      	movgt	r5, #0
 8003dbc:	2501      	movle	r5, #1
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	f200 8087 	bhi.w	8003ed2 <_dtoa_r+0x30a>
 8003dc4:	e8df f003 	tbb	[pc, r3]
 8003dc8:	59383a2d 	.word	0x59383a2d
 8003dcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003dd0:	441d      	add	r5, r3
 8003dd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	bfc1      	itttt	gt
 8003dda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003dde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8003de2:	fa0b f303 	lslgt.w	r3, fp, r3
 8003de6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003dea:	bfda      	itte	le
 8003dec:	f1c3 0320 	rsble	r3, r3, #32
 8003df0:	fa06 f003 	lslle.w	r0, r6, r3
 8003df4:	4318      	orrgt	r0, r3
 8003df6:	f7fc fb85 	bl	8000504 <__aeabi_ui2d>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4606      	mov	r6, r0
 8003dfe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8003e02:	3d01      	subs	r5, #1
 8003e04:	930e      	str	r3, [sp, #56]	; 0x38
 8003e06:	e76a      	b.n	8003cde <_dtoa_r+0x116>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e7b2      	b.n	8003d72 <_dtoa_r+0x1aa>
 8003e0c:	900b      	str	r0, [sp, #44]	; 0x2c
 8003e0e:	e7b1      	b.n	8003d74 <_dtoa_r+0x1ac>
 8003e10:	9b04      	ldr	r3, [sp, #16]
 8003e12:	9a00      	ldr	r2, [sp, #0]
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	9304      	str	r3, [sp, #16]
 8003e18:	4253      	negs	r3, r2
 8003e1a:	9307      	str	r3, [sp, #28]
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8003e20:	e7bf      	b.n	8003da2 <_dtoa_r+0x1da>
 8003e22:	2300      	movs	r3, #0
 8003e24:	9308      	str	r3, [sp, #32]
 8003e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	dc55      	bgt.n	8003ed8 <_dtoa_r+0x310>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003e32:	461a      	mov	r2, r3
 8003e34:	9209      	str	r2, [sp, #36]	; 0x24
 8003e36:	e00c      	b.n	8003e52 <_dtoa_r+0x28a>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e7f3      	b.n	8003e24 <_dtoa_r+0x25c>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e40:	9308      	str	r3, [sp, #32]
 8003e42:	9b00      	ldr	r3, [sp, #0]
 8003e44:	4413      	add	r3, r2
 8003e46:	9302      	str	r3, [sp, #8]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	9303      	str	r3, [sp, #12]
 8003e4e:	bfb8      	it	lt
 8003e50:	2301      	movlt	r3, #1
 8003e52:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003e54:	2200      	movs	r2, #0
 8003e56:	6042      	str	r2, [r0, #4]
 8003e58:	2204      	movs	r2, #4
 8003e5a:	f102 0614 	add.w	r6, r2, #20
 8003e5e:	429e      	cmp	r6, r3
 8003e60:	6841      	ldr	r1, [r0, #4]
 8003e62:	d93d      	bls.n	8003ee0 <_dtoa_r+0x318>
 8003e64:	4620      	mov	r0, r4
 8003e66:	f7ff f99f 	bl	80031a8 <_Balloc>
 8003e6a:	9001      	str	r0, [sp, #4]
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d13b      	bne.n	8003ee8 <_dtoa_r+0x320>
 8003e70:	4b11      	ldr	r3, [pc, #68]	; (8003eb8 <_dtoa_r+0x2f0>)
 8003e72:	4602      	mov	r2, r0
 8003e74:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e78:	e6c0      	b.n	8003bfc <_dtoa_r+0x34>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e7df      	b.n	8003e3e <_dtoa_r+0x276>
 8003e7e:	bf00      	nop
 8003e80:	636f4361 	.word	0x636f4361
 8003e84:	3fd287a7 	.word	0x3fd287a7
 8003e88:	8b60c8b3 	.word	0x8b60c8b3
 8003e8c:	3fc68a28 	.word	0x3fc68a28
 8003e90:	509f79fb 	.word	0x509f79fb
 8003e94:	3fd34413 	.word	0x3fd34413
 8003e98:	0800589c 	.word	0x0800589c
 8003e9c:	08005a67 	.word	0x08005a67
 8003ea0:	7ff00000 	.word	0x7ff00000
 8003ea4:	08005a61 	.word	0x08005a61
 8003ea8:	08005a58 	.word	0x08005a58
 8003eac:	08005a66 	.word	0x08005a66
 8003eb0:	3ff80000 	.word	0x3ff80000
 8003eb4:	08005948 	.word	0x08005948
 8003eb8:	0800590f 	.word	0x0800590f
 8003ebc:	2501      	movs	r5, #1
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	9306      	str	r3, [sp, #24]
 8003ec2:	9508      	str	r5, [sp, #32]
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2312      	movs	r3, #18
 8003ed0:	e7b0      	b.n	8003e34 <_dtoa_r+0x26c>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	9308      	str	r3, [sp, #32]
 8003ed6:	e7f5      	b.n	8003ec4 <_dtoa_r+0x2fc>
 8003ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eda:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003ede:	e7b8      	b.n	8003e52 <_dtoa_r+0x28a>
 8003ee0:	3101      	adds	r1, #1
 8003ee2:	6041      	str	r1, [r0, #4]
 8003ee4:	0052      	lsls	r2, r2, #1
 8003ee6:	e7b8      	b.n	8003e5a <_dtoa_r+0x292>
 8003ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eea:	9a01      	ldr	r2, [sp, #4]
 8003eec:	601a      	str	r2, [r3, #0]
 8003eee:	9b03      	ldr	r3, [sp, #12]
 8003ef0:	2b0e      	cmp	r3, #14
 8003ef2:	f200 809d 	bhi.w	8004030 <_dtoa_r+0x468>
 8003ef6:	2d00      	cmp	r5, #0
 8003ef8:	f000 809a 	beq.w	8004030 <_dtoa_r+0x468>
 8003efc:	9b00      	ldr	r3, [sp, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dd32      	ble.n	8003f68 <_dtoa_r+0x3a0>
 8003f02:	4ab7      	ldr	r2, [pc, #732]	; (80041e0 <_dtoa_r+0x618>)
 8003f04:	f003 030f 	and.w	r3, r3, #15
 8003f08:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f10:	9b00      	ldr	r3, [sp, #0]
 8003f12:	05d8      	lsls	r0, r3, #23
 8003f14:	ea4f 1723 	mov.w	r7, r3, asr #4
 8003f18:	d516      	bpl.n	8003f48 <_dtoa_r+0x380>
 8003f1a:	4bb2      	ldr	r3, [pc, #712]	; (80041e4 <_dtoa_r+0x61c>)
 8003f1c:	ec51 0b19 	vmov	r0, r1, d9
 8003f20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f24:	f7fc fc92 	bl	800084c <__aeabi_ddiv>
 8003f28:	f007 070f 	and.w	r7, r7, #15
 8003f2c:	4682      	mov	sl, r0
 8003f2e:	468b      	mov	fp, r1
 8003f30:	2503      	movs	r5, #3
 8003f32:	4eac      	ldr	r6, [pc, #688]	; (80041e4 <_dtoa_r+0x61c>)
 8003f34:	b957      	cbnz	r7, 8003f4c <_dtoa_r+0x384>
 8003f36:	4642      	mov	r2, r8
 8003f38:	464b      	mov	r3, r9
 8003f3a:	4650      	mov	r0, sl
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	f7fc fc85 	bl	800084c <__aeabi_ddiv>
 8003f42:	4682      	mov	sl, r0
 8003f44:	468b      	mov	fp, r1
 8003f46:	e028      	b.n	8003f9a <_dtoa_r+0x3d2>
 8003f48:	2502      	movs	r5, #2
 8003f4a:	e7f2      	b.n	8003f32 <_dtoa_r+0x36a>
 8003f4c:	07f9      	lsls	r1, r7, #31
 8003f4e:	d508      	bpl.n	8003f62 <_dtoa_r+0x39a>
 8003f50:	4640      	mov	r0, r8
 8003f52:	4649      	mov	r1, r9
 8003f54:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f58:	f7fc fb4e 	bl	80005f8 <__aeabi_dmul>
 8003f5c:	3501      	adds	r5, #1
 8003f5e:	4680      	mov	r8, r0
 8003f60:	4689      	mov	r9, r1
 8003f62:	107f      	asrs	r7, r7, #1
 8003f64:	3608      	adds	r6, #8
 8003f66:	e7e5      	b.n	8003f34 <_dtoa_r+0x36c>
 8003f68:	f000 809b 	beq.w	80040a2 <_dtoa_r+0x4da>
 8003f6c:	9b00      	ldr	r3, [sp, #0]
 8003f6e:	4f9d      	ldr	r7, [pc, #628]	; (80041e4 <_dtoa_r+0x61c>)
 8003f70:	425e      	negs	r6, r3
 8003f72:	4b9b      	ldr	r3, [pc, #620]	; (80041e0 <_dtoa_r+0x618>)
 8003f74:	f006 020f 	and.w	r2, r6, #15
 8003f78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	ec51 0b19 	vmov	r0, r1, d9
 8003f84:	f7fc fb38 	bl	80005f8 <__aeabi_dmul>
 8003f88:	1136      	asrs	r6, r6, #4
 8003f8a:	4682      	mov	sl, r0
 8003f8c:	468b      	mov	fp, r1
 8003f8e:	2300      	movs	r3, #0
 8003f90:	2502      	movs	r5, #2
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	d17a      	bne.n	800408c <_dtoa_r+0x4c4>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1d3      	bne.n	8003f42 <_dtoa_r+0x37a>
 8003f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8082 	beq.w	80040a6 <_dtoa_r+0x4de>
 8003fa2:	4b91      	ldr	r3, [pc, #580]	; (80041e8 <_dtoa_r+0x620>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4650      	mov	r0, sl
 8003fa8:	4659      	mov	r1, fp
 8003faa:	f7fc fd97 	bl	8000adc <__aeabi_dcmplt>
 8003fae:	2800      	cmp	r0, #0
 8003fb0:	d079      	beq.n	80040a6 <_dtoa_r+0x4de>
 8003fb2:	9b03      	ldr	r3, [sp, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d076      	beq.n	80040a6 <_dtoa_r+0x4de>
 8003fb8:	9b02      	ldr	r3, [sp, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	dd36      	ble.n	800402c <_dtoa_r+0x464>
 8003fbe:	9b00      	ldr	r3, [sp, #0]
 8003fc0:	4650      	mov	r0, sl
 8003fc2:	4659      	mov	r1, fp
 8003fc4:	1e5f      	subs	r7, r3, #1
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	4b88      	ldr	r3, [pc, #544]	; (80041ec <_dtoa_r+0x624>)
 8003fca:	f7fc fb15 	bl	80005f8 <__aeabi_dmul>
 8003fce:	9e02      	ldr	r6, [sp, #8]
 8003fd0:	4682      	mov	sl, r0
 8003fd2:	468b      	mov	fp, r1
 8003fd4:	3501      	adds	r5, #1
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f7fc faa4 	bl	8000524 <__aeabi_i2d>
 8003fdc:	4652      	mov	r2, sl
 8003fde:	465b      	mov	r3, fp
 8003fe0:	f7fc fb0a 	bl	80005f8 <__aeabi_dmul>
 8003fe4:	4b82      	ldr	r3, [pc, #520]	; (80041f0 <_dtoa_r+0x628>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f7fc f950 	bl	800028c <__adddf3>
 8003fec:	46d0      	mov	r8, sl
 8003fee:	46d9      	mov	r9, fp
 8003ff0:	4682      	mov	sl, r0
 8003ff2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8003ff6:	2e00      	cmp	r6, #0
 8003ff8:	d158      	bne.n	80040ac <_dtoa_r+0x4e4>
 8003ffa:	4b7e      	ldr	r3, [pc, #504]	; (80041f4 <_dtoa_r+0x62c>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc f941 	bl	8000288 <__aeabi_dsub>
 8004006:	4652      	mov	r2, sl
 8004008:	465b      	mov	r3, fp
 800400a:	4680      	mov	r8, r0
 800400c:	4689      	mov	r9, r1
 800400e:	f7fc fd83 	bl	8000b18 <__aeabi_dcmpgt>
 8004012:	2800      	cmp	r0, #0
 8004014:	f040 8295 	bne.w	8004542 <_dtoa_r+0x97a>
 8004018:	4652      	mov	r2, sl
 800401a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800401e:	4640      	mov	r0, r8
 8004020:	4649      	mov	r1, r9
 8004022:	f7fc fd5b 	bl	8000adc <__aeabi_dcmplt>
 8004026:	2800      	cmp	r0, #0
 8004028:	f040 8289 	bne.w	800453e <_dtoa_r+0x976>
 800402c:	ec5b ab19 	vmov	sl, fp, d9
 8004030:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004032:	2b00      	cmp	r3, #0
 8004034:	f2c0 8148 	blt.w	80042c8 <_dtoa_r+0x700>
 8004038:	9a00      	ldr	r2, [sp, #0]
 800403a:	2a0e      	cmp	r2, #14
 800403c:	f300 8144 	bgt.w	80042c8 <_dtoa_r+0x700>
 8004040:	4b67      	ldr	r3, [pc, #412]	; (80041e0 <_dtoa_r+0x618>)
 8004042:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004046:	e9d3 8900 	ldrd	r8, r9, [r3]
 800404a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800404c:	2b00      	cmp	r3, #0
 800404e:	f280 80d5 	bge.w	80041fc <_dtoa_r+0x634>
 8004052:	9b03      	ldr	r3, [sp, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	f300 80d1 	bgt.w	80041fc <_dtoa_r+0x634>
 800405a:	f040 826f 	bne.w	800453c <_dtoa_r+0x974>
 800405e:	4b65      	ldr	r3, [pc, #404]	; (80041f4 <_dtoa_r+0x62c>)
 8004060:	2200      	movs	r2, #0
 8004062:	4640      	mov	r0, r8
 8004064:	4649      	mov	r1, r9
 8004066:	f7fc fac7 	bl	80005f8 <__aeabi_dmul>
 800406a:	4652      	mov	r2, sl
 800406c:	465b      	mov	r3, fp
 800406e:	f7fc fd49 	bl	8000b04 <__aeabi_dcmpge>
 8004072:	9e03      	ldr	r6, [sp, #12]
 8004074:	4637      	mov	r7, r6
 8004076:	2800      	cmp	r0, #0
 8004078:	f040 8245 	bne.w	8004506 <_dtoa_r+0x93e>
 800407c:	9d01      	ldr	r5, [sp, #4]
 800407e:	2331      	movs	r3, #49	; 0x31
 8004080:	f805 3b01 	strb.w	r3, [r5], #1
 8004084:	9b00      	ldr	r3, [sp, #0]
 8004086:	3301      	adds	r3, #1
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	e240      	b.n	800450e <_dtoa_r+0x946>
 800408c:	07f2      	lsls	r2, r6, #31
 800408e:	d505      	bpl.n	800409c <_dtoa_r+0x4d4>
 8004090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004094:	f7fc fab0 	bl	80005f8 <__aeabi_dmul>
 8004098:	3501      	adds	r5, #1
 800409a:	2301      	movs	r3, #1
 800409c:	1076      	asrs	r6, r6, #1
 800409e:	3708      	adds	r7, #8
 80040a0:	e777      	b.n	8003f92 <_dtoa_r+0x3ca>
 80040a2:	2502      	movs	r5, #2
 80040a4:	e779      	b.n	8003f9a <_dtoa_r+0x3d2>
 80040a6:	9f00      	ldr	r7, [sp, #0]
 80040a8:	9e03      	ldr	r6, [sp, #12]
 80040aa:	e794      	b.n	8003fd6 <_dtoa_r+0x40e>
 80040ac:	9901      	ldr	r1, [sp, #4]
 80040ae:	4b4c      	ldr	r3, [pc, #304]	; (80041e0 <_dtoa_r+0x618>)
 80040b0:	4431      	add	r1, r6
 80040b2:	910d      	str	r1, [sp, #52]	; 0x34
 80040b4:	9908      	ldr	r1, [sp, #32]
 80040b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80040ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040be:	2900      	cmp	r1, #0
 80040c0:	d043      	beq.n	800414a <_dtoa_r+0x582>
 80040c2:	494d      	ldr	r1, [pc, #308]	; (80041f8 <_dtoa_r+0x630>)
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fc fbc1 	bl	800084c <__aeabi_ddiv>
 80040ca:	4652      	mov	r2, sl
 80040cc:	465b      	mov	r3, fp
 80040ce:	f7fc f8db 	bl	8000288 <__aeabi_dsub>
 80040d2:	9d01      	ldr	r5, [sp, #4]
 80040d4:	4682      	mov	sl, r0
 80040d6:	468b      	mov	fp, r1
 80040d8:	4649      	mov	r1, r9
 80040da:	4640      	mov	r0, r8
 80040dc:	f7fc fd26 	bl	8000b2c <__aeabi_d2iz>
 80040e0:	4606      	mov	r6, r0
 80040e2:	f7fc fa1f 	bl	8000524 <__aeabi_i2d>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4640      	mov	r0, r8
 80040ec:	4649      	mov	r1, r9
 80040ee:	f7fc f8cb 	bl	8000288 <__aeabi_dsub>
 80040f2:	3630      	adds	r6, #48	; 0x30
 80040f4:	f805 6b01 	strb.w	r6, [r5], #1
 80040f8:	4652      	mov	r2, sl
 80040fa:	465b      	mov	r3, fp
 80040fc:	4680      	mov	r8, r0
 80040fe:	4689      	mov	r9, r1
 8004100:	f7fc fcec 	bl	8000adc <__aeabi_dcmplt>
 8004104:	2800      	cmp	r0, #0
 8004106:	d163      	bne.n	80041d0 <_dtoa_r+0x608>
 8004108:	4642      	mov	r2, r8
 800410a:	464b      	mov	r3, r9
 800410c:	4936      	ldr	r1, [pc, #216]	; (80041e8 <_dtoa_r+0x620>)
 800410e:	2000      	movs	r0, #0
 8004110:	f7fc f8ba 	bl	8000288 <__aeabi_dsub>
 8004114:	4652      	mov	r2, sl
 8004116:	465b      	mov	r3, fp
 8004118:	f7fc fce0 	bl	8000adc <__aeabi_dcmplt>
 800411c:	2800      	cmp	r0, #0
 800411e:	f040 80b5 	bne.w	800428c <_dtoa_r+0x6c4>
 8004122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004124:	429d      	cmp	r5, r3
 8004126:	d081      	beq.n	800402c <_dtoa_r+0x464>
 8004128:	4b30      	ldr	r3, [pc, #192]	; (80041ec <_dtoa_r+0x624>)
 800412a:	2200      	movs	r2, #0
 800412c:	4650      	mov	r0, sl
 800412e:	4659      	mov	r1, fp
 8004130:	f7fc fa62 	bl	80005f8 <__aeabi_dmul>
 8004134:	4b2d      	ldr	r3, [pc, #180]	; (80041ec <_dtoa_r+0x624>)
 8004136:	4682      	mov	sl, r0
 8004138:	468b      	mov	fp, r1
 800413a:	4640      	mov	r0, r8
 800413c:	4649      	mov	r1, r9
 800413e:	2200      	movs	r2, #0
 8004140:	f7fc fa5a 	bl	80005f8 <__aeabi_dmul>
 8004144:	4680      	mov	r8, r0
 8004146:	4689      	mov	r9, r1
 8004148:	e7c6      	b.n	80040d8 <_dtoa_r+0x510>
 800414a:	4650      	mov	r0, sl
 800414c:	4659      	mov	r1, fp
 800414e:	f7fc fa53 	bl	80005f8 <__aeabi_dmul>
 8004152:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004154:	9d01      	ldr	r5, [sp, #4]
 8004156:	930f      	str	r3, [sp, #60]	; 0x3c
 8004158:	4682      	mov	sl, r0
 800415a:	468b      	mov	fp, r1
 800415c:	4649      	mov	r1, r9
 800415e:	4640      	mov	r0, r8
 8004160:	f7fc fce4 	bl	8000b2c <__aeabi_d2iz>
 8004164:	4606      	mov	r6, r0
 8004166:	f7fc f9dd 	bl	8000524 <__aeabi_i2d>
 800416a:	3630      	adds	r6, #48	; 0x30
 800416c:	4602      	mov	r2, r0
 800416e:	460b      	mov	r3, r1
 8004170:	4640      	mov	r0, r8
 8004172:	4649      	mov	r1, r9
 8004174:	f7fc f888 	bl	8000288 <__aeabi_dsub>
 8004178:	f805 6b01 	strb.w	r6, [r5], #1
 800417c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800417e:	429d      	cmp	r5, r3
 8004180:	4680      	mov	r8, r0
 8004182:	4689      	mov	r9, r1
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	d124      	bne.n	80041d4 <_dtoa_r+0x60c>
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <_dtoa_r+0x630>)
 800418c:	4650      	mov	r0, sl
 800418e:	4659      	mov	r1, fp
 8004190:	f7fc f87c 	bl	800028c <__adddf3>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4640      	mov	r0, r8
 800419a:	4649      	mov	r1, r9
 800419c:	f7fc fcbc 	bl	8000b18 <__aeabi_dcmpgt>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d173      	bne.n	800428c <_dtoa_r+0x6c4>
 80041a4:	4652      	mov	r2, sl
 80041a6:	465b      	mov	r3, fp
 80041a8:	4913      	ldr	r1, [pc, #76]	; (80041f8 <_dtoa_r+0x630>)
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fc f86c 	bl	8000288 <__aeabi_dsub>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4640      	mov	r0, r8
 80041b6:	4649      	mov	r1, r9
 80041b8:	f7fc fc90 	bl	8000adc <__aeabi_dcmplt>
 80041bc:	2800      	cmp	r0, #0
 80041be:	f43f af35 	beq.w	800402c <_dtoa_r+0x464>
 80041c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80041c4:	1e6b      	subs	r3, r5, #1
 80041c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80041c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d0f8      	beq.n	80041c2 <_dtoa_r+0x5fa>
 80041d0:	9700      	str	r7, [sp, #0]
 80041d2:	e049      	b.n	8004268 <_dtoa_r+0x6a0>
 80041d4:	4b05      	ldr	r3, [pc, #20]	; (80041ec <_dtoa_r+0x624>)
 80041d6:	f7fc fa0f 	bl	80005f8 <__aeabi_dmul>
 80041da:	4680      	mov	r8, r0
 80041dc:	4689      	mov	r9, r1
 80041de:	e7bd      	b.n	800415c <_dtoa_r+0x594>
 80041e0:	08005948 	.word	0x08005948
 80041e4:	08005920 	.word	0x08005920
 80041e8:	3ff00000 	.word	0x3ff00000
 80041ec:	40240000 	.word	0x40240000
 80041f0:	401c0000 	.word	0x401c0000
 80041f4:	40140000 	.word	0x40140000
 80041f8:	3fe00000 	.word	0x3fe00000
 80041fc:	9d01      	ldr	r5, [sp, #4]
 80041fe:	4656      	mov	r6, sl
 8004200:	465f      	mov	r7, fp
 8004202:	4642      	mov	r2, r8
 8004204:	464b      	mov	r3, r9
 8004206:	4630      	mov	r0, r6
 8004208:	4639      	mov	r1, r7
 800420a:	f7fc fb1f 	bl	800084c <__aeabi_ddiv>
 800420e:	f7fc fc8d 	bl	8000b2c <__aeabi_d2iz>
 8004212:	4682      	mov	sl, r0
 8004214:	f7fc f986 	bl	8000524 <__aeabi_i2d>
 8004218:	4642      	mov	r2, r8
 800421a:	464b      	mov	r3, r9
 800421c:	f7fc f9ec 	bl	80005f8 <__aeabi_dmul>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4630      	mov	r0, r6
 8004226:	4639      	mov	r1, r7
 8004228:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800422c:	f7fc f82c 	bl	8000288 <__aeabi_dsub>
 8004230:	f805 6b01 	strb.w	r6, [r5], #1
 8004234:	9e01      	ldr	r6, [sp, #4]
 8004236:	9f03      	ldr	r7, [sp, #12]
 8004238:	1bae      	subs	r6, r5, r6
 800423a:	42b7      	cmp	r7, r6
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	d135      	bne.n	80042ae <_dtoa_r+0x6e6>
 8004242:	f7fc f823 	bl	800028c <__adddf3>
 8004246:	4642      	mov	r2, r8
 8004248:	464b      	mov	r3, r9
 800424a:	4606      	mov	r6, r0
 800424c:	460f      	mov	r7, r1
 800424e:	f7fc fc63 	bl	8000b18 <__aeabi_dcmpgt>
 8004252:	b9d0      	cbnz	r0, 800428a <_dtoa_r+0x6c2>
 8004254:	4642      	mov	r2, r8
 8004256:	464b      	mov	r3, r9
 8004258:	4630      	mov	r0, r6
 800425a:	4639      	mov	r1, r7
 800425c:	f7fc fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 8004260:	b110      	cbz	r0, 8004268 <_dtoa_r+0x6a0>
 8004262:	f01a 0f01 	tst.w	sl, #1
 8004266:	d110      	bne.n	800428a <_dtoa_r+0x6c2>
 8004268:	4620      	mov	r0, r4
 800426a:	ee18 1a10 	vmov	r1, s16
 800426e:	f7fe ffdb 	bl	8003228 <_Bfree>
 8004272:	2300      	movs	r3, #0
 8004274:	9800      	ldr	r0, [sp, #0]
 8004276:	702b      	strb	r3, [r5, #0]
 8004278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800427a:	3001      	adds	r0, #1
 800427c:	6018      	str	r0, [r3, #0]
 800427e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004280:	2b00      	cmp	r3, #0
 8004282:	f43f acf1 	beq.w	8003c68 <_dtoa_r+0xa0>
 8004286:	601d      	str	r5, [r3, #0]
 8004288:	e4ee      	b.n	8003c68 <_dtoa_r+0xa0>
 800428a:	9f00      	ldr	r7, [sp, #0]
 800428c:	462b      	mov	r3, r5
 800428e:	461d      	mov	r5, r3
 8004290:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004294:	2a39      	cmp	r2, #57	; 0x39
 8004296:	d106      	bne.n	80042a6 <_dtoa_r+0x6de>
 8004298:	9a01      	ldr	r2, [sp, #4]
 800429a:	429a      	cmp	r2, r3
 800429c:	d1f7      	bne.n	800428e <_dtoa_r+0x6c6>
 800429e:	9901      	ldr	r1, [sp, #4]
 80042a0:	2230      	movs	r2, #48	; 0x30
 80042a2:	3701      	adds	r7, #1
 80042a4:	700a      	strb	r2, [r1, #0]
 80042a6:	781a      	ldrb	r2, [r3, #0]
 80042a8:	3201      	adds	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e790      	b.n	80041d0 <_dtoa_r+0x608>
 80042ae:	4ba6      	ldr	r3, [pc, #664]	; (8004548 <_dtoa_r+0x980>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	f7fc f9a1 	bl	80005f8 <__aeabi_dmul>
 80042b6:	2200      	movs	r2, #0
 80042b8:	2300      	movs	r3, #0
 80042ba:	4606      	mov	r6, r0
 80042bc:	460f      	mov	r7, r1
 80042be:	f7fc fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	d09d      	beq.n	8004202 <_dtoa_r+0x63a>
 80042c6:	e7cf      	b.n	8004268 <_dtoa_r+0x6a0>
 80042c8:	9a08      	ldr	r2, [sp, #32]
 80042ca:	2a00      	cmp	r2, #0
 80042cc:	f000 80d7 	beq.w	800447e <_dtoa_r+0x8b6>
 80042d0:	9a06      	ldr	r2, [sp, #24]
 80042d2:	2a01      	cmp	r2, #1
 80042d4:	f300 80ba 	bgt.w	800444c <_dtoa_r+0x884>
 80042d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042da:	2a00      	cmp	r2, #0
 80042dc:	f000 80b2 	beq.w	8004444 <_dtoa_r+0x87c>
 80042e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80042e4:	9e07      	ldr	r6, [sp, #28]
 80042e6:	9d04      	ldr	r5, [sp, #16]
 80042e8:	9a04      	ldr	r2, [sp, #16]
 80042ea:	441a      	add	r2, r3
 80042ec:	9204      	str	r2, [sp, #16]
 80042ee:	9a05      	ldr	r2, [sp, #20]
 80042f0:	2101      	movs	r1, #1
 80042f2:	441a      	add	r2, r3
 80042f4:	4620      	mov	r0, r4
 80042f6:	9205      	str	r2, [sp, #20]
 80042f8:	f7ff f84e 	bl	8003398 <__i2b>
 80042fc:	4607      	mov	r7, r0
 80042fe:	2d00      	cmp	r5, #0
 8004300:	dd0c      	ble.n	800431c <_dtoa_r+0x754>
 8004302:	9b05      	ldr	r3, [sp, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	dd09      	ble.n	800431c <_dtoa_r+0x754>
 8004308:	42ab      	cmp	r3, r5
 800430a:	9a04      	ldr	r2, [sp, #16]
 800430c:	bfa8      	it	ge
 800430e:	462b      	movge	r3, r5
 8004310:	1ad2      	subs	r2, r2, r3
 8004312:	9204      	str	r2, [sp, #16]
 8004314:	9a05      	ldr	r2, [sp, #20]
 8004316:	1aed      	subs	r5, r5, r3
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	9305      	str	r3, [sp, #20]
 800431c:	9b07      	ldr	r3, [sp, #28]
 800431e:	b31b      	cbz	r3, 8004368 <_dtoa_r+0x7a0>
 8004320:	9b08      	ldr	r3, [sp, #32]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 80af 	beq.w	8004486 <_dtoa_r+0x8be>
 8004328:	2e00      	cmp	r6, #0
 800432a:	dd13      	ble.n	8004354 <_dtoa_r+0x78c>
 800432c:	4639      	mov	r1, r7
 800432e:	4632      	mov	r2, r6
 8004330:	4620      	mov	r0, r4
 8004332:	f7ff f8f1 	bl	8003518 <__pow5mult>
 8004336:	ee18 2a10 	vmov	r2, s16
 800433a:	4601      	mov	r1, r0
 800433c:	4607      	mov	r7, r0
 800433e:	4620      	mov	r0, r4
 8004340:	f7ff f840 	bl	80033c4 <__multiply>
 8004344:	ee18 1a10 	vmov	r1, s16
 8004348:	4680      	mov	r8, r0
 800434a:	4620      	mov	r0, r4
 800434c:	f7fe ff6c 	bl	8003228 <_Bfree>
 8004350:	ee08 8a10 	vmov	s16, r8
 8004354:	9b07      	ldr	r3, [sp, #28]
 8004356:	1b9a      	subs	r2, r3, r6
 8004358:	d006      	beq.n	8004368 <_dtoa_r+0x7a0>
 800435a:	ee18 1a10 	vmov	r1, s16
 800435e:	4620      	mov	r0, r4
 8004360:	f7ff f8da 	bl	8003518 <__pow5mult>
 8004364:	ee08 0a10 	vmov	s16, r0
 8004368:	2101      	movs	r1, #1
 800436a:	4620      	mov	r0, r4
 800436c:	f7ff f814 	bl	8003398 <__i2b>
 8004370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004372:	2b00      	cmp	r3, #0
 8004374:	4606      	mov	r6, r0
 8004376:	f340 8088 	ble.w	800448a <_dtoa_r+0x8c2>
 800437a:	461a      	mov	r2, r3
 800437c:	4601      	mov	r1, r0
 800437e:	4620      	mov	r0, r4
 8004380:	f7ff f8ca 	bl	8003518 <__pow5mult>
 8004384:	9b06      	ldr	r3, [sp, #24]
 8004386:	2b01      	cmp	r3, #1
 8004388:	4606      	mov	r6, r0
 800438a:	f340 8081 	ble.w	8004490 <_dtoa_r+0x8c8>
 800438e:	f04f 0800 	mov.w	r8, #0
 8004392:	6933      	ldr	r3, [r6, #16]
 8004394:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004398:	6918      	ldr	r0, [r3, #16]
 800439a:	f7fe ffad 	bl	80032f8 <__hi0bits>
 800439e:	f1c0 0020 	rsb	r0, r0, #32
 80043a2:	9b05      	ldr	r3, [sp, #20]
 80043a4:	4418      	add	r0, r3
 80043a6:	f010 001f 	ands.w	r0, r0, #31
 80043aa:	f000 8092 	beq.w	80044d2 <_dtoa_r+0x90a>
 80043ae:	f1c0 0320 	rsb	r3, r0, #32
 80043b2:	2b04      	cmp	r3, #4
 80043b4:	f340 808a 	ble.w	80044cc <_dtoa_r+0x904>
 80043b8:	f1c0 001c 	rsb	r0, r0, #28
 80043bc:	9b04      	ldr	r3, [sp, #16]
 80043be:	4403      	add	r3, r0
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	9b05      	ldr	r3, [sp, #20]
 80043c4:	4403      	add	r3, r0
 80043c6:	4405      	add	r5, r0
 80043c8:	9305      	str	r3, [sp, #20]
 80043ca:	9b04      	ldr	r3, [sp, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	dd07      	ble.n	80043e0 <_dtoa_r+0x818>
 80043d0:	ee18 1a10 	vmov	r1, s16
 80043d4:	461a      	mov	r2, r3
 80043d6:	4620      	mov	r0, r4
 80043d8:	f7ff f8f8 	bl	80035cc <__lshift>
 80043dc:	ee08 0a10 	vmov	s16, r0
 80043e0:	9b05      	ldr	r3, [sp, #20]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	dd05      	ble.n	80043f2 <_dtoa_r+0x82a>
 80043e6:	4631      	mov	r1, r6
 80043e8:	461a      	mov	r2, r3
 80043ea:	4620      	mov	r0, r4
 80043ec:	f7ff f8ee 	bl	80035cc <__lshift>
 80043f0:	4606      	mov	r6, r0
 80043f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d06e      	beq.n	80044d6 <_dtoa_r+0x90e>
 80043f8:	ee18 0a10 	vmov	r0, s16
 80043fc:	4631      	mov	r1, r6
 80043fe:	f7ff f955 	bl	80036ac <__mcmp>
 8004402:	2800      	cmp	r0, #0
 8004404:	da67      	bge.n	80044d6 <_dtoa_r+0x90e>
 8004406:	9b00      	ldr	r3, [sp, #0]
 8004408:	3b01      	subs	r3, #1
 800440a:	ee18 1a10 	vmov	r1, s16
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	220a      	movs	r2, #10
 8004412:	2300      	movs	r3, #0
 8004414:	4620      	mov	r0, r4
 8004416:	f7fe ff29 	bl	800326c <__multadd>
 800441a:	9b08      	ldr	r3, [sp, #32]
 800441c:	ee08 0a10 	vmov	s16, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 81b1 	beq.w	8004788 <_dtoa_r+0xbc0>
 8004426:	2300      	movs	r3, #0
 8004428:	4639      	mov	r1, r7
 800442a:	220a      	movs	r2, #10
 800442c:	4620      	mov	r0, r4
 800442e:	f7fe ff1d 	bl	800326c <__multadd>
 8004432:	9b02      	ldr	r3, [sp, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	4607      	mov	r7, r0
 8004438:	f300 808e 	bgt.w	8004558 <_dtoa_r+0x990>
 800443c:	9b06      	ldr	r3, [sp, #24]
 800443e:	2b02      	cmp	r3, #2
 8004440:	dc51      	bgt.n	80044e6 <_dtoa_r+0x91e>
 8004442:	e089      	b.n	8004558 <_dtoa_r+0x990>
 8004444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004446:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800444a:	e74b      	b.n	80042e4 <_dtoa_r+0x71c>
 800444c:	9b03      	ldr	r3, [sp, #12]
 800444e:	1e5e      	subs	r6, r3, #1
 8004450:	9b07      	ldr	r3, [sp, #28]
 8004452:	42b3      	cmp	r3, r6
 8004454:	bfbf      	itttt	lt
 8004456:	9b07      	ldrlt	r3, [sp, #28]
 8004458:	9607      	strlt	r6, [sp, #28]
 800445a:	1af2      	sublt	r2, r6, r3
 800445c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800445e:	bfb6      	itet	lt
 8004460:	189b      	addlt	r3, r3, r2
 8004462:	1b9e      	subge	r6, r3, r6
 8004464:	930a      	strlt	r3, [sp, #40]	; 0x28
 8004466:	9b03      	ldr	r3, [sp, #12]
 8004468:	bfb8      	it	lt
 800446a:	2600      	movlt	r6, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	bfb7      	itett	lt
 8004470:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004474:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004478:	1a9d      	sublt	r5, r3, r2
 800447a:	2300      	movlt	r3, #0
 800447c:	e734      	b.n	80042e8 <_dtoa_r+0x720>
 800447e:	9e07      	ldr	r6, [sp, #28]
 8004480:	9d04      	ldr	r5, [sp, #16]
 8004482:	9f08      	ldr	r7, [sp, #32]
 8004484:	e73b      	b.n	80042fe <_dtoa_r+0x736>
 8004486:	9a07      	ldr	r2, [sp, #28]
 8004488:	e767      	b.n	800435a <_dtoa_r+0x792>
 800448a:	9b06      	ldr	r3, [sp, #24]
 800448c:	2b01      	cmp	r3, #1
 800448e:	dc18      	bgt.n	80044c2 <_dtoa_r+0x8fa>
 8004490:	f1ba 0f00 	cmp.w	sl, #0
 8004494:	d115      	bne.n	80044c2 <_dtoa_r+0x8fa>
 8004496:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800449a:	b993      	cbnz	r3, 80044c2 <_dtoa_r+0x8fa>
 800449c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80044a0:	0d1b      	lsrs	r3, r3, #20
 80044a2:	051b      	lsls	r3, r3, #20
 80044a4:	b183      	cbz	r3, 80044c8 <_dtoa_r+0x900>
 80044a6:	9b04      	ldr	r3, [sp, #16]
 80044a8:	3301      	adds	r3, #1
 80044aa:	9304      	str	r3, [sp, #16]
 80044ac:	9b05      	ldr	r3, [sp, #20]
 80044ae:	3301      	adds	r3, #1
 80044b0:	9305      	str	r3, [sp, #20]
 80044b2:	f04f 0801 	mov.w	r8, #1
 80044b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f47f af6a 	bne.w	8004392 <_dtoa_r+0x7ca>
 80044be:	2001      	movs	r0, #1
 80044c0:	e76f      	b.n	80043a2 <_dtoa_r+0x7da>
 80044c2:	f04f 0800 	mov.w	r8, #0
 80044c6:	e7f6      	b.n	80044b6 <_dtoa_r+0x8ee>
 80044c8:	4698      	mov	r8, r3
 80044ca:	e7f4      	b.n	80044b6 <_dtoa_r+0x8ee>
 80044cc:	f43f af7d 	beq.w	80043ca <_dtoa_r+0x802>
 80044d0:	4618      	mov	r0, r3
 80044d2:	301c      	adds	r0, #28
 80044d4:	e772      	b.n	80043bc <_dtoa_r+0x7f4>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	dc37      	bgt.n	800454c <_dtoa_r+0x984>
 80044dc:	9b06      	ldr	r3, [sp, #24]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	dd34      	ble.n	800454c <_dtoa_r+0x984>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	9302      	str	r3, [sp, #8]
 80044e6:	9b02      	ldr	r3, [sp, #8]
 80044e8:	b96b      	cbnz	r3, 8004506 <_dtoa_r+0x93e>
 80044ea:	4631      	mov	r1, r6
 80044ec:	2205      	movs	r2, #5
 80044ee:	4620      	mov	r0, r4
 80044f0:	f7fe febc 	bl	800326c <__multadd>
 80044f4:	4601      	mov	r1, r0
 80044f6:	4606      	mov	r6, r0
 80044f8:	ee18 0a10 	vmov	r0, s16
 80044fc:	f7ff f8d6 	bl	80036ac <__mcmp>
 8004500:	2800      	cmp	r0, #0
 8004502:	f73f adbb 	bgt.w	800407c <_dtoa_r+0x4b4>
 8004506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004508:	9d01      	ldr	r5, [sp, #4]
 800450a:	43db      	mvns	r3, r3
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	f04f 0800 	mov.w	r8, #0
 8004512:	4631      	mov	r1, r6
 8004514:	4620      	mov	r0, r4
 8004516:	f7fe fe87 	bl	8003228 <_Bfree>
 800451a:	2f00      	cmp	r7, #0
 800451c:	f43f aea4 	beq.w	8004268 <_dtoa_r+0x6a0>
 8004520:	f1b8 0f00 	cmp.w	r8, #0
 8004524:	d005      	beq.n	8004532 <_dtoa_r+0x96a>
 8004526:	45b8      	cmp	r8, r7
 8004528:	d003      	beq.n	8004532 <_dtoa_r+0x96a>
 800452a:	4641      	mov	r1, r8
 800452c:	4620      	mov	r0, r4
 800452e:	f7fe fe7b 	bl	8003228 <_Bfree>
 8004532:	4639      	mov	r1, r7
 8004534:	4620      	mov	r0, r4
 8004536:	f7fe fe77 	bl	8003228 <_Bfree>
 800453a:	e695      	b.n	8004268 <_dtoa_r+0x6a0>
 800453c:	2600      	movs	r6, #0
 800453e:	4637      	mov	r7, r6
 8004540:	e7e1      	b.n	8004506 <_dtoa_r+0x93e>
 8004542:	9700      	str	r7, [sp, #0]
 8004544:	4637      	mov	r7, r6
 8004546:	e599      	b.n	800407c <_dtoa_r+0x4b4>
 8004548:	40240000 	.word	0x40240000
 800454c:	9b08      	ldr	r3, [sp, #32]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f000 80ca 	beq.w	80046e8 <_dtoa_r+0xb20>
 8004554:	9b03      	ldr	r3, [sp, #12]
 8004556:	9302      	str	r3, [sp, #8]
 8004558:	2d00      	cmp	r5, #0
 800455a:	dd05      	ble.n	8004568 <_dtoa_r+0x9a0>
 800455c:	4639      	mov	r1, r7
 800455e:	462a      	mov	r2, r5
 8004560:	4620      	mov	r0, r4
 8004562:	f7ff f833 	bl	80035cc <__lshift>
 8004566:	4607      	mov	r7, r0
 8004568:	f1b8 0f00 	cmp.w	r8, #0
 800456c:	d05b      	beq.n	8004626 <_dtoa_r+0xa5e>
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4620      	mov	r0, r4
 8004572:	f7fe fe19 	bl	80031a8 <_Balloc>
 8004576:	4605      	mov	r5, r0
 8004578:	b928      	cbnz	r0, 8004586 <_dtoa_r+0x9be>
 800457a:	4b87      	ldr	r3, [pc, #540]	; (8004798 <_dtoa_r+0xbd0>)
 800457c:	4602      	mov	r2, r0
 800457e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004582:	f7ff bb3b 	b.w	8003bfc <_dtoa_r+0x34>
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	3202      	adds	r2, #2
 800458a:	0092      	lsls	r2, r2, #2
 800458c:	f107 010c 	add.w	r1, r7, #12
 8004590:	300c      	adds	r0, #12
 8004592:	f000 f921 	bl	80047d8 <memcpy>
 8004596:	2201      	movs	r2, #1
 8004598:	4629      	mov	r1, r5
 800459a:	4620      	mov	r0, r4
 800459c:	f7ff f816 	bl	80035cc <__lshift>
 80045a0:	9b01      	ldr	r3, [sp, #4]
 80045a2:	f103 0901 	add.w	r9, r3, #1
 80045a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80045aa:	4413      	add	r3, r2
 80045ac:	9305      	str	r3, [sp, #20]
 80045ae:	f00a 0301 	and.w	r3, sl, #1
 80045b2:	46b8      	mov	r8, r7
 80045b4:	9304      	str	r3, [sp, #16]
 80045b6:	4607      	mov	r7, r0
 80045b8:	4631      	mov	r1, r6
 80045ba:	ee18 0a10 	vmov	r0, s16
 80045be:	f7ff fa75 	bl	8003aac <quorem>
 80045c2:	4641      	mov	r1, r8
 80045c4:	9002      	str	r0, [sp, #8]
 80045c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80045ca:	ee18 0a10 	vmov	r0, s16
 80045ce:	f7ff f86d 	bl	80036ac <__mcmp>
 80045d2:	463a      	mov	r2, r7
 80045d4:	9003      	str	r0, [sp, #12]
 80045d6:	4631      	mov	r1, r6
 80045d8:	4620      	mov	r0, r4
 80045da:	f7ff f883 	bl	80036e4 <__mdiff>
 80045de:	68c2      	ldr	r2, [r0, #12]
 80045e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80045e4:	4605      	mov	r5, r0
 80045e6:	bb02      	cbnz	r2, 800462a <_dtoa_r+0xa62>
 80045e8:	4601      	mov	r1, r0
 80045ea:	ee18 0a10 	vmov	r0, s16
 80045ee:	f7ff f85d 	bl	80036ac <__mcmp>
 80045f2:	4602      	mov	r2, r0
 80045f4:	4629      	mov	r1, r5
 80045f6:	4620      	mov	r0, r4
 80045f8:	9207      	str	r2, [sp, #28]
 80045fa:	f7fe fe15 	bl	8003228 <_Bfree>
 80045fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004602:	ea43 0102 	orr.w	r1, r3, r2
 8004606:	9b04      	ldr	r3, [sp, #16]
 8004608:	430b      	orrs	r3, r1
 800460a:	464d      	mov	r5, r9
 800460c:	d10f      	bne.n	800462e <_dtoa_r+0xa66>
 800460e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004612:	d02a      	beq.n	800466a <_dtoa_r+0xaa2>
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	2b00      	cmp	r3, #0
 8004618:	dd02      	ble.n	8004620 <_dtoa_r+0xa58>
 800461a:	9b02      	ldr	r3, [sp, #8]
 800461c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004620:	f88b a000 	strb.w	sl, [fp]
 8004624:	e775      	b.n	8004512 <_dtoa_r+0x94a>
 8004626:	4638      	mov	r0, r7
 8004628:	e7ba      	b.n	80045a0 <_dtoa_r+0x9d8>
 800462a:	2201      	movs	r2, #1
 800462c:	e7e2      	b.n	80045f4 <_dtoa_r+0xa2c>
 800462e:	9b03      	ldr	r3, [sp, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db04      	blt.n	800463e <_dtoa_r+0xa76>
 8004634:	9906      	ldr	r1, [sp, #24]
 8004636:	430b      	orrs	r3, r1
 8004638:	9904      	ldr	r1, [sp, #16]
 800463a:	430b      	orrs	r3, r1
 800463c:	d122      	bne.n	8004684 <_dtoa_r+0xabc>
 800463e:	2a00      	cmp	r2, #0
 8004640:	ddee      	ble.n	8004620 <_dtoa_r+0xa58>
 8004642:	ee18 1a10 	vmov	r1, s16
 8004646:	2201      	movs	r2, #1
 8004648:	4620      	mov	r0, r4
 800464a:	f7fe ffbf 	bl	80035cc <__lshift>
 800464e:	4631      	mov	r1, r6
 8004650:	ee08 0a10 	vmov	s16, r0
 8004654:	f7ff f82a 	bl	80036ac <__mcmp>
 8004658:	2800      	cmp	r0, #0
 800465a:	dc03      	bgt.n	8004664 <_dtoa_r+0xa9c>
 800465c:	d1e0      	bne.n	8004620 <_dtoa_r+0xa58>
 800465e:	f01a 0f01 	tst.w	sl, #1
 8004662:	d0dd      	beq.n	8004620 <_dtoa_r+0xa58>
 8004664:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004668:	d1d7      	bne.n	800461a <_dtoa_r+0xa52>
 800466a:	2339      	movs	r3, #57	; 0x39
 800466c:	f88b 3000 	strb.w	r3, [fp]
 8004670:	462b      	mov	r3, r5
 8004672:	461d      	mov	r5, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800467a:	2a39      	cmp	r2, #57	; 0x39
 800467c:	d071      	beq.n	8004762 <_dtoa_r+0xb9a>
 800467e:	3201      	adds	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e746      	b.n	8004512 <_dtoa_r+0x94a>
 8004684:	2a00      	cmp	r2, #0
 8004686:	dd07      	ble.n	8004698 <_dtoa_r+0xad0>
 8004688:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800468c:	d0ed      	beq.n	800466a <_dtoa_r+0xaa2>
 800468e:	f10a 0301 	add.w	r3, sl, #1
 8004692:	f88b 3000 	strb.w	r3, [fp]
 8004696:	e73c      	b.n	8004512 <_dtoa_r+0x94a>
 8004698:	9b05      	ldr	r3, [sp, #20]
 800469a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800469e:	4599      	cmp	r9, r3
 80046a0:	d047      	beq.n	8004732 <_dtoa_r+0xb6a>
 80046a2:	ee18 1a10 	vmov	r1, s16
 80046a6:	2300      	movs	r3, #0
 80046a8:	220a      	movs	r2, #10
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fe fdde 	bl	800326c <__multadd>
 80046b0:	45b8      	cmp	r8, r7
 80046b2:	ee08 0a10 	vmov	s16, r0
 80046b6:	f04f 0300 	mov.w	r3, #0
 80046ba:	f04f 020a 	mov.w	r2, #10
 80046be:	4641      	mov	r1, r8
 80046c0:	4620      	mov	r0, r4
 80046c2:	d106      	bne.n	80046d2 <_dtoa_r+0xb0a>
 80046c4:	f7fe fdd2 	bl	800326c <__multadd>
 80046c8:	4680      	mov	r8, r0
 80046ca:	4607      	mov	r7, r0
 80046cc:	f109 0901 	add.w	r9, r9, #1
 80046d0:	e772      	b.n	80045b8 <_dtoa_r+0x9f0>
 80046d2:	f7fe fdcb 	bl	800326c <__multadd>
 80046d6:	4639      	mov	r1, r7
 80046d8:	4680      	mov	r8, r0
 80046da:	2300      	movs	r3, #0
 80046dc:	220a      	movs	r2, #10
 80046de:	4620      	mov	r0, r4
 80046e0:	f7fe fdc4 	bl	800326c <__multadd>
 80046e4:	4607      	mov	r7, r0
 80046e6:	e7f1      	b.n	80046cc <_dtoa_r+0xb04>
 80046e8:	9b03      	ldr	r3, [sp, #12]
 80046ea:	9302      	str	r3, [sp, #8]
 80046ec:	9d01      	ldr	r5, [sp, #4]
 80046ee:	ee18 0a10 	vmov	r0, s16
 80046f2:	4631      	mov	r1, r6
 80046f4:	f7ff f9da 	bl	8003aac <quorem>
 80046f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80046fc:	9b01      	ldr	r3, [sp, #4]
 80046fe:	f805 ab01 	strb.w	sl, [r5], #1
 8004702:	1aea      	subs	r2, r5, r3
 8004704:	9b02      	ldr	r3, [sp, #8]
 8004706:	4293      	cmp	r3, r2
 8004708:	dd09      	ble.n	800471e <_dtoa_r+0xb56>
 800470a:	ee18 1a10 	vmov	r1, s16
 800470e:	2300      	movs	r3, #0
 8004710:	220a      	movs	r2, #10
 8004712:	4620      	mov	r0, r4
 8004714:	f7fe fdaa 	bl	800326c <__multadd>
 8004718:	ee08 0a10 	vmov	s16, r0
 800471c:	e7e7      	b.n	80046ee <_dtoa_r+0xb26>
 800471e:	9b02      	ldr	r3, [sp, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	bfc8      	it	gt
 8004724:	461d      	movgt	r5, r3
 8004726:	9b01      	ldr	r3, [sp, #4]
 8004728:	bfd8      	it	le
 800472a:	2501      	movle	r5, #1
 800472c:	441d      	add	r5, r3
 800472e:	f04f 0800 	mov.w	r8, #0
 8004732:	ee18 1a10 	vmov	r1, s16
 8004736:	2201      	movs	r2, #1
 8004738:	4620      	mov	r0, r4
 800473a:	f7fe ff47 	bl	80035cc <__lshift>
 800473e:	4631      	mov	r1, r6
 8004740:	ee08 0a10 	vmov	s16, r0
 8004744:	f7fe ffb2 	bl	80036ac <__mcmp>
 8004748:	2800      	cmp	r0, #0
 800474a:	dc91      	bgt.n	8004670 <_dtoa_r+0xaa8>
 800474c:	d102      	bne.n	8004754 <_dtoa_r+0xb8c>
 800474e:	f01a 0f01 	tst.w	sl, #1
 8004752:	d18d      	bne.n	8004670 <_dtoa_r+0xaa8>
 8004754:	462b      	mov	r3, r5
 8004756:	461d      	mov	r5, r3
 8004758:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800475c:	2a30      	cmp	r2, #48	; 0x30
 800475e:	d0fa      	beq.n	8004756 <_dtoa_r+0xb8e>
 8004760:	e6d7      	b.n	8004512 <_dtoa_r+0x94a>
 8004762:	9a01      	ldr	r2, [sp, #4]
 8004764:	429a      	cmp	r2, r3
 8004766:	d184      	bne.n	8004672 <_dtoa_r+0xaaa>
 8004768:	9b00      	ldr	r3, [sp, #0]
 800476a:	3301      	adds	r3, #1
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	2331      	movs	r3, #49	; 0x31
 8004770:	7013      	strb	r3, [r2, #0]
 8004772:	e6ce      	b.n	8004512 <_dtoa_r+0x94a>
 8004774:	4b09      	ldr	r3, [pc, #36]	; (800479c <_dtoa_r+0xbd4>)
 8004776:	f7ff ba95 	b.w	8003ca4 <_dtoa_r+0xdc>
 800477a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f aa6e 	bne.w	8003c5e <_dtoa_r+0x96>
 8004782:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <_dtoa_r+0xbd8>)
 8004784:	f7ff ba8e 	b.w	8003ca4 <_dtoa_r+0xdc>
 8004788:	9b02      	ldr	r3, [sp, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	dcae      	bgt.n	80046ec <_dtoa_r+0xb24>
 800478e:	9b06      	ldr	r3, [sp, #24]
 8004790:	2b02      	cmp	r3, #2
 8004792:	f73f aea8 	bgt.w	80044e6 <_dtoa_r+0x91e>
 8004796:	e7a9      	b.n	80046ec <_dtoa_r+0xb24>
 8004798:	0800590f 	.word	0x0800590f
 800479c:	08005a65 	.word	0x08005a65
 80047a0:	08005a58 	.word	0x08005a58

080047a4 <fiprintf>:
 80047a4:	b40e      	push	{r1, r2, r3}
 80047a6:	b503      	push	{r0, r1, lr}
 80047a8:	4601      	mov	r1, r0
 80047aa:	ab03      	add	r3, sp, #12
 80047ac:	4805      	ldr	r0, [pc, #20]	; (80047c4 <fiprintf+0x20>)
 80047ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80047b2:	6800      	ldr	r0, [r0, #0]
 80047b4:	9301      	str	r3, [sp, #4]
 80047b6:	f000 f89f 	bl	80048f8 <_vfiprintf_r>
 80047ba:	b002      	add	sp, #8
 80047bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80047c0:	b003      	add	sp, #12
 80047c2:	4770      	bx	lr
 80047c4:	2000000c 	.word	0x2000000c

080047c8 <malloc>:
 80047c8:	4b02      	ldr	r3, [pc, #8]	; (80047d4 <malloc+0xc>)
 80047ca:	4601      	mov	r1, r0
 80047cc:	6818      	ldr	r0, [r3, #0]
 80047ce:	f7ff b8c3 	b.w	8003958 <_malloc_r>
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c

080047d8 <memcpy>:
 80047d8:	440a      	add	r2, r1
 80047da:	4291      	cmp	r1, r2
 80047dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80047e0:	d100      	bne.n	80047e4 <memcpy+0xc>
 80047e2:	4770      	bx	lr
 80047e4:	b510      	push	{r4, lr}
 80047e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ee:	4291      	cmp	r1, r2
 80047f0:	d1f9      	bne.n	80047e6 <memcpy+0xe>
 80047f2:	bd10      	pop	{r4, pc}

080047f4 <__malloc_lock>:
 80047f4:	4801      	ldr	r0, [pc, #4]	; (80047fc <__malloc_lock+0x8>)
 80047f6:	f000 bdc3 	b.w	8005380 <__retarget_lock_acquire_recursive>
 80047fa:	bf00      	nop
 80047fc:	20000330 	.word	0x20000330

08004800 <__malloc_unlock>:
 8004800:	4801      	ldr	r0, [pc, #4]	; (8004808 <__malloc_unlock+0x8>)
 8004802:	f000 bdbe 	b.w	8005382 <__retarget_lock_release_recursive>
 8004806:	bf00      	nop
 8004808:	20000330 	.word	0x20000330

0800480c <_free_r>:
 800480c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800480e:	2900      	cmp	r1, #0
 8004810:	d044      	beq.n	800489c <_free_r+0x90>
 8004812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004816:	9001      	str	r0, [sp, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f1a1 0404 	sub.w	r4, r1, #4
 800481e:	bfb8      	it	lt
 8004820:	18e4      	addlt	r4, r4, r3
 8004822:	f7ff ffe7 	bl	80047f4 <__malloc_lock>
 8004826:	4a1e      	ldr	r2, [pc, #120]	; (80048a0 <_free_r+0x94>)
 8004828:	9801      	ldr	r0, [sp, #4]
 800482a:	6813      	ldr	r3, [r2, #0]
 800482c:	b933      	cbnz	r3, 800483c <_free_r+0x30>
 800482e:	6063      	str	r3, [r4, #4]
 8004830:	6014      	str	r4, [r2, #0]
 8004832:	b003      	add	sp, #12
 8004834:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004838:	f7ff bfe2 	b.w	8004800 <__malloc_unlock>
 800483c:	42a3      	cmp	r3, r4
 800483e:	d908      	bls.n	8004852 <_free_r+0x46>
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	1961      	adds	r1, r4, r5
 8004844:	428b      	cmp	r3, r1
 8004846:	bf01      	itttt	eq
 8004848:	6819      	ldreq	r1, [r3, #0]
 800484a:	685b      	ldreq	r3, [r3, #4]
 800484c:	1949      	addeq	r1, r1, r5
 800484e:	6021      	streq	r1, [r4, #0]
 8004850:	e7ed      	b.n	800482e <_free_r+0x22>
 8004852:	461a      	mov	r2, r3
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	b10b      	cbz	r3, 800485c <_free_r+0x50>
 8004858:	42a3      	cmp	r3, r4
 800485a:	d9fa      	bls.n	8004852 <_free_r+0x46>
 800485c:	6811      	ldr	r1, [r2, #0]
 800485e:	1855      	adds	r5, r2, r1
 8004860:	42a5      	cmp	r5, r4
 8004862:	d10b      	bne.n	800487c <_free_r+0x70>
 8004864:	6824      	ldr	r4, [r4, #0]
 8004866:	4421      	add	r1, r4
 8004868:	1854      	adds	r4, r2, r1
 800486a:	42a3      	cmp	r3, r4
 800486c:	6011      	str	r1, [r2, #0]
 800486e:	d1e0      	bne.n	8004832 <_free_r+0x26>
 8004870:	681c      	ldr	r4, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	6053      	str	r3, [r2, #4]
 8004876:	4421      	add	r1, r4
 8004878:	6011      	str	r1, [r2, #0]
 800487a:	e7da      	b.n	8004832 <_free_r+0x26>
 800487c:	d902      	bls.n	8004884 <_free_r+0x78>
 800487e:	230c      	movs	r3, #12
 8004880:	6003      	str	r3, [r0, #0]
 8004882:	e7d6      	b.n	8004832 <_free_r+0x26>
 8004884:	6825      	ldr	r5, [r4, #0]
 8004886:	1961      	adds	r1, r4, r5
 8004888:	428b      	cmp	r3, r1
 800488a:	bf04      	itt	eq
 800488c:	6819      	ldreq	r1, [r3, #0]
 800488e:	685b      	ldreq	r3, [r3, #4]
 8004890:	6063      	str	r3, [r4, #4]
 8004892:	bf04      	itt	eq
 8004894:	1949      	addeq	r1, r1, r5
 8004896:	6021      	streq	r1, [r4, #0]
 8004898:	6054      	str	r4, [r2, #4]
 800489a:	e7ca      	b.n	8004832 <_free_r+0x26>
 800489c:	b003      	add	sp, #12
 800489e:	bd30      	pop	{r4, r5, pc}
 80048a0:	20000324 	.word	0x20000324

080048a4 <__sfputc_r>:
 80048a4:	6893      	ldr	r3, [r2, #8]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	b410      	push	{r4}
 80048ac:	6093      	str	r3, [r2, #8]
 80048ae:	da08      	bge.n	80048c2 <__sfputc_r+0x1e>
 80048b0:	6994      	ldr	r4, [r2, #24]
 80048b2:	42a3      	cmp	r3, r4
 80048b4:	db01      	blt.n	80048ba <__sfputc_r+0x16>
 80048b6:	290a      	cmp	r1, #10
 80048b8:	d103      	bne.n	80048c2 <__sfputc_r+0x1e>
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048be:	f000 badf 	b.w	8004e80 <__swbuf_r>
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	1c58      	adds	r0, r3, #1
 80048c6:	6010      	str	r0, [r2, #0]
 80048c8:	7019      	strb	r1, [r3, #0]
 80048ca:	4608      	mov	r0, r1
 80048cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <__sfputs_r>:
 80048d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d4:	4606      	mov	r6, r0
 80048d6:	460f      	mov	r7, r1
 80048d8:	4614      	mov	r4, r2
 80048da:	18d5      	adds	r5, r2, r3
 80048dc:	42ac      	cmp	r4, r5
 80048de:	d101      	bne.n	80048e4 <__sfputs_r+0x12>
 80048e0:	2000      	movs	r0, #0
 80048e2:	e007      	b.n	80048f4 <__sfputs_r+0x22>
 80048e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048e8:	463a      	mov	r2, r7
 80048ea:	4630      	mov	r0, r6
 80048ec:	f7ff ffda 	bl	80048a4 <__sfputc_r>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d1f3      	bne.n	80048dc <__sfputs_r+0xa>
 80048f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048f8 <_vfiprintf_r>:
 80048f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048fc:	460d      	mov	r5, r1
 80048fe:	b09d      	sub	sp, #116	; 0x74
 8004900:	4614      	mov	r4, r2
 8004902:	4698      	mov	r8, r3
 8004904:	4606      	mov	r6, r0
 8004906:	b118      	cbz	r0, 8004910 <_vfiprintf_r+0x18>
 8004908:	6983      	ldr	r3, [r0, #24]
 800490a:	b90b      	cbnz	r3, 8004910 <_vfiprintf_r+0x18>
 800490c:	f000 fc9a 	bl	8005244 <__sinit>
 8004910:	4b89      	ldr	r3, [pc, #548]	; (8004b38 <_vfiprintf_r+0x240>)
 8004912:	429d      	cmp	r5, r3
 8004914:	d11b      	bne.n	800494e <_vfiprintf_r+0x56>
 8004916:	6875      	ldr	r5, [r6, #4]
 8004918:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800491a:	07d9      	lsls	r1, r3, #31
 800491c:	d405      	bmi.n	800492a <_vfiprintf_r+0x32>
 800491e:	89ab      	ldrh	r3, [r5, #12]
 8004920:	059a      	lsls	r2, r3, #22
 8004922:	d402      	bmi.n	800492a <_vfiprintf_r+0x32>
 8004924:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004926:	f000 fd2b 	bl	8005380 <__retarget_lock_acquire_recursive>
 800492a:	89ab      	ldrh	r3, [r5, #12]
 800492c:	071b      	lsls	r3, r3, #28
 800492e:	d501      	bpl.n	8004934 <_vfiprintf_r+0x3c>
 8004930:	692b      	ldr	r3, [r5, #16]
 8004932:	b9eb      	cbnz	r3, 8004970 <_vfiprintf_r+0x78>
 8004934:	4629      	mov	r1, r5
 8004936:	4630      	mov	r0, r6
 8004938:	f000 faf4 	bl	8004f24 <__swsetup_r>
 800493c:	b1c0      	cbz	r0, 8004970 <_vfiprintf_r+0x78>
 800493e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004940:	07dc      	lsls	r4, r3, #31
 8004942:	d50e      	bpl.n	8004962 <_vfiprintf_r+0x6a>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	b01d      	add	sp, #116	; 0x74
 800494a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800494e:	4b7b      	ldr	r3, [pc, #492]	; (8004b3c <_vfiprintf_r+0x244>)
 8004950:	429d      	cmp	r5, r3
 8004952:	d101      	bne.n	8004958 <_vfiprintf_r+0x60>
 8004954:	68b5      	ldr	r5, [r6, #8]
 8004956:	e7df      	b.n	8004918 <_vfiprintf_r+0x20>
 8004958:	4b79      	ldr	r3, [pc, #484]	; (8004b40 <_vfiprintf_r+0x248>)
 800495a:	429d      	cmp	r5, r3
 800495c:	bf08      	it	eq
 800495e:	68f5      	ldreq	r5, [r6, #12]
 8004960:	e7da      	b.n	8004918 <_vfiprintf_r+0x20>
 8004962:	89ab      	ldrh	r3, [r5, #12]
 8004964:	0598      	lsls	r0, r3, #22
 8004966:	d4ed      	bmi.n	8004944 <_vfiprintf_r+0x4c>
 8004968:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800496a:	f000 fd0a 	bl	8005382 <__retarget_lock_release_recursive>
 800496e:	e7e9      	b.n	8004944 <_vfiprintf_r+0x4c>
 8004970:	2300      	movs	r3, #0
 8004972:	9309      	str	r3, [sp, #36]	; 0x24
 8004974:	2320      	movs	r3, #32
 8004976:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800497a:	f8cd 800c 	str.w	r8, [sp, #12]
 800497e:	2330      	movs	r3, #48	; 0x30
 8004980:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004b44 <_vfiprintf_r+0x24c>
 8004984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004988:	f04f 0901 	mov.w	r9, #1
 800498c:	4623      	mov	r3, r4
 800498e:	469a      	mov	sl, r3
 8004990:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004994:	b10a      	cbz	r2, 800499a <_vfiprintf_r+0xa2>
 8004996:	2a25      	cmp	r2, #37	; 0x25
 8004998:	d1f9      	bne.n	800498e <_vfiprintf_r+0x96>
 800499a:	ebba 0b04 	subs.w	fp, sl, r4
 800499e:	d00b      	beq.n	80049b8 <_vfiprintf_r+0xc0>
 80049a0:	465b      	mov	r3, fp
 80049a2:	4622      	mov	r2, r4
 80049a4:	4629      	mov	r1, r5
 80049a6:	4630      	mov	r0, r6
 80049a8:	f7ff ff93 	bl	80048d2 <__sfputs_r>
 80049ac:	3001      	adds	r0, #1
 80049ae:	f000 80aa 	beq.w	8004b06 <_vfiprintf_r+0x20e>
 80049b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049b4:	445a      	add	r2, fp
 80049b6:	9209      	str	r2, [sp, #36]	; 0x24
 80049b8:	f89a 3000 	ldrb.w	r3, [sl]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 80a2 	beq.w	8004b06 <_vfiprintf_r+0x20e>
 80049c2:	2300      	movs	r3, #0
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049cc:	f10a 0a01 	add.w	sl, sl, #1
 80049d0:	9304      	str	r3, [sp, #16]
 80049d2:	9307      	str	r3, [sp, #28]
 80049d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049d8:	931a      	str	r3, [sp, #104]	; 0x68
 80049da:	4654      	mov	r4, sl
 80049dc:	2205      	movs	r2, #5
 80049de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049e2:	4858      	ldr	r0, [pc, #352]	; (8004b44 <_vfiprintf_r+0x24c>)
 80049e4:	f7fb fbfc 	bl	80001e0 <memchr>
 80049e8:	9a04      	ldr	r2, [sp, #16]
 80049ea:	b9d8      	cbnz	r0, 8004a24 <_vfiprintf_r+0x12c>
 80049ec:	06d1      	lsls	r1, r2, #27
 80049ee:	bf44      	itt	mi
 80049f0:	2320      	movmi	r3, #32
 80049f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049f6:	0713      	lsls	r3, r2, #28
 80049f8:	bf44      	itt	mi
 80049fa:	232b      	movmi	r3, #43	; 0x2b
 80049fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a00:	f89a 3000 	ldrb.w	r3, [sl]
 8004a04:	2b2a      	cmp	r3, #42	; 0x2a
 8004a06:	d015      	beq.n	8004a34 <_vfiprintf_r+0x13c>
 8004a08:	9a07      	ldr	r2, [sp, #28]
 8004a0a:	4654      	mov	r4, sl
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	f04f 0c0a 	mov.w	ip, #10
 8004a12:	4621      	mov	r1, r4
 8004a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a18:	3b30      	subs	r3, #48	; 0x30
 8004a1a:	2b09      	cmp	r3, #9
 8004a1c:	d94e      	bls.n	8004abc <_vfiprintf_r+0x1c4>
 8004a1e:	b1b0      	cbz	r0, 8004a4e <_vfiprintf_r+0x156>
 8004a20:	9207      	str	r2, [sp, #28]
 8004a22:	e014      	b.n	8004a4e <_vfiprintf_r+0x156>
 8004a24:	eba0 0308 	sub.w	r3, r0, r8
 8004a28:	fa09 f303 	lsl.w	r3, r9, r3
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	46a2      	mov	sl, r4
 8004a32:	e7d2      	b.n	80049da <_vfiprintf_r+0xe2>
 8004a34:	9b03      	ldr	r3, [sp, #12]
 8004a36:	1d19      	adds	r1, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	9103      	str	r1, [sp, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	bfbb      	ittet	lt
 8004a40:	425b      	neglt	r3, r3
 8004a42:	f042 0202 	orrlt.w	r2, r2, #2
 8004a46:	9307      	strge	r3, [sp, #28]
 8004a48:	9307      	strlt	r3, [sp, #28]
 8004a4a:	bfb8      	it	lt
 8004a4c:	9204      	strlt	r2, [sp, #16]
 8004a4e:	7823      	ldrb	r3, [r4, #0]
 8004a50:	2b2e      	cmp	r3, #46	; 0x2e
 8004a52:	d10c      	bne.n	8004a6e <_vfiprintf_r+0x176>
 8004a54:	7863      	ldrb	r3, [r4, #1]
 8004a56:	2b2a      	cmp	r3, #42	; 0x2a
 8004a58:	d135      	bne.n	8004ac6 <_vfiprintf_r+0x1ce>
 8004a5a:	9b03      	ldr	r3, [sp, #12]
 8004a5c:	1d1a      	adds	r2, r3, #4
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	9203      	str	r2, [sp, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	bfb8      	it	lt
 8004a66:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a6a:	3402      	adds	r4, #2
 8004a6c:	9305      	str	r3, [sp, #20]
 8004a6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004b54 <_vfiprintf_r+0x25c>
 8004a72:	7821      	ldrb	r1, [r4, #0]
 8004a74:	2203      	movs	r2, #3
 8004a76:	4650      	mov	r0, sl
 8004a78:	f7fb fbb2 	bl	80001e0 <memchr>
 8004a7c:	b140      	cbz	r0, 8004a90 <_vfiprintf_r+0x198>
 8004a7e:	2340      	movs	r3, #64	; 0x40
 8004a80:	eba0 000a 	sub.w	r0, r0, sl
 8004a84:	fa03 f000 	lsl.w	r0, r3, r0
 8004a88:	9b04      	ldr	r3, [sp, #16]
 8004a8a:	4303      	orrs	r3, r0
 8004a8c:	3401      	adds	r4, #1
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a94:	482c      	ldr	r0, [pc, #176]	; (8004b48 <_vfiprintf_r+0x250>)
 8004a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a9a:	2206      	movs	r2, #6
 8004a9c:	f7fb fba0 	bl	80001e0 <memchr>
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d03f      	beq.n	8004b24 <_vfiprintf_r+0x22c>
 8004aa4:	4b29      	ldr	r3, [pc, #164]	; (8004b4c <_vfiprintf_r+0x254>)
 8004aa6:	bb1b      	cbnz	r3, 8004af0 <_vfiprintf_r+0x1f8>
 8004aa8:	9b03      	ldr	r3, [sp, #12]
 8004aaa:	3307      	adds	r3, #7
 8004aac:	f023 0307 	bic.w	r3, r3, #7
 8004ab0:	3308      	adds	r3, #8
 8004ab2:	9303      	str	r3, [sp, #12]
 8004ab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ab6:	443b      	add	r3, r7
 8004ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aba:	e767      	b.n	800498c <_vfiprintf_r+0x94>
 8004abc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	e7a5      	b.n	8004a12 <_vfiprintf_r+0x11a>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	3401      	adds	r4, #1
 8004aca:	9305      	str	r3, [sp, #20]
 8004acc:	4619      	mov	r1, r3
 8004ace:	f04f 0c0a 	mov.w	ip, #10
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ad8:	3a30      	subs	r2, #48	; 0x30
 8004ada:	2a09      	cmp	r2, #9
 8004adc:	d903      	bls.n	8004ae6 <_vfiprintf_r+0x1ee>
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0c5      	beq.n	8004a6e <_vfiprintf_r+0x176>
 8004ae2:	9105      	str	r1, [sp, #20]
 8004ae4:	e7c3      	b.n	8004a6e <_vfiprintf_r+0x176>
 8004ae6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004aea:	4604      	mov	r4, r0
 8004aec:	2301      	movs	r3, #1
 8004aee:	e7f0      	b.n	8004ad2 <_vfiprintf_r+0x1da>
 8004af0:	ab03      	add	r3, sp, #12
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	462a      	mov	r2, r5
 8004af6:	4b16      	ldr	r3, [pc, #88]	; (8004b50 <_vfiprintf_r+0x258>)
 8004af8:	a904      	add	r1, sp, #16
 8004afa:	4630      	mov	r0, r6
 8004afc:	f3af 8000 	nop.w
 8004b00:	4607      	mov	r7, r0
 8004b02:	1c78      	adds	r0, r7, #1
 8004b04:	d1d6      	bne.n	8004ab4 <_vfiprintf_r+0x1bc>
 8004b06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b08:	07d9      	lsls	r1, r3, #31
 8004b0a:	d405      	bmi.n	8004b18 <_vfiprintf_r+0x220>
 8004b0c:	89ab      	ldrh	r3, [r5, #12]
 8004b0e:	059a      	lsls	r2, r3, #22
 8004b10:	d402      	bmi.n	8004b18 <_vfiprintf_r+0x220>
 8004b12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b14:	f000 fc35 	bl	8005382 <__retarget_lock_release_recursive>
 8004b18:	89ab      	ldrh	r3, [r5, #12]
 8004b1a:	065b      	lsls	r3, r3, #25
 8004b1c:	f53f af12 	bmi.w	8004944 <_vfiprintf_r+0x4c>
 8004b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b22:	e711      	b.n	8004948 <_vfiprintf_r+0x50>
 8004b24:	ab03      	add	r3, sp, #12
 8004b26:	9300      	str	r3, [sp, #0]
 8004b28:	462a      	mov	r2, r5
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <_vfiprintf_r+0x258>)
 8004b2c:	a904      	add	r1, sp, #16
 8004b2e:	4630      	mov	r0, r6
 8004b30:	f000 f880 	bl	8004c34 <_printf_i>
 8004b34:	e7e4      	b.n	8004b00 <_vfiprintf_r+0x208>
 8004b36:	bf00      	nop
 8004b38:	08005b18 	.word	0x08005b18
 8004b3c:	08005b38 	.word	0x08005b38
 8004b40:	08005af8 	.word	0x08005af8
 8004b44:	08005ac2 	.word	0x08005ac2
 8004b48:	08005acc 	.word	0x08005acc
 8004b4c:	00000000 	.word	0x00000000
 8004b50:	080048d3 	.word	0x080048d3
 8004b54:	08005ac8 	.word	0x08005ac8

08004b58 <_printf_common>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	4616      	mov	r6, r2
 8004b5e:	4699      	mov	r9, r3
 8004b60:	688a      	ldr	r2, [r1, #8]
 8004b62:	690b      	ldr	r3, [r1, #16]
 8004b64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	bfb8      	it	lt
 8004b6c:	4613      	movlt	r3, r2
 8004b6e:	6033      	str	r3, [r6, #0]
 8004b70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b74:	4607      	mov	r7, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	b10a      	cbz	r2, 8004b7e <_printf_common+0x26>
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	0699      	lsls	r1, r3, #26
 8004b82:	bf42      	ittt	mi
 8004b84:	6833      	ldrmi	r3, [r6, #0]
 8004b86:	3302      	addmi	r3, #2
 8004b88:	6033      	strmi	r3, [r6, #0]
 8004b8a:	6825      	ldr	r5, [r4, #0]
 8004b8c:	f015 0506 	ands.w	r5, r5, #6
 8004b90:	d106      	bne.n	8004ba0 <_printf_common+0x48>
 8004b92:	f104 0a19 	add.w	sl, r4, #25
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	6832      	ldr	r2, [r6, #0]
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	dc26      	bgt.n	8004bee <_printf_common+0x96>
 8004ba0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ba4:	1e13      	subs	r3, r2, #0
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	bf18      	it	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	0692      	lsls	r2, r2, #26
 8004bae:	d42b      	bmi.n	8004c08 <_printf_common+0xb0>
 8004bb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	4638      	mov	r0, r7
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d01e      	beq.n	8004bfc <_printf_common+0xa4>
 8004bbe:	6823      	ldr	r3, [r4, #0]
 8004bc0:	68e5      	ldr	r5, [r4, #12]
 8004bc2:	6832      	ldr	r2, [r6, #0]
 8004bc4:	f003 0306 	and.w	r3, r3, #6
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	bf08      	it	eq
 8004bcc:	1aad      	subeq	r5, r5, r2
 8004bce:	68a3      	ldr	r3, [r4, #8]
 8004bd0:	6922      	ldr	r2, [r4, #16]
 8004bd2:	bf0c      	ite	eq
 8004bd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bd8:	2500      	movne	r5, #0
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	bfc4      	itt	gt
 8004bde:	1a9b      	subgt	r3, r3, r2
 8004be0:	18ed      	addgt	r5, r5, r3
 8004be2:	2600      	movs	r6, #0
 8004be4:	341a      	adds	r4, #26
 8004be6:	42b5      	cmp	r5, r6
 8004be8:	d11a      	bne.n	8004c20 <_printf_common+0xc8>
 8004bea:	2000      	movs	r0, #0
 8004bec:	e008      	b.n	8004c00 <_printf_common+0xa8>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	4652      	mov	r2, sl
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	47c0      	blx	r8
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d103      	bne.n	8004c04 <_printf_common+0xac>
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c04:	3501      	adds	r5, #1
 8004c06:	e7c6      	b.n	8004b96 <_printf_common+0x3e>
 8004c08:	18e1      	adds	r1, r4, r3
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	2030      	movs	r0, #48	; 0x30
 8004c0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c12:	4422      	add	r2, r4
 8004c14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	e7c7      	b.n	8004bb0 <_printf_common+0x58>
 8004c20:	2301      	movs	r3, #1
 8004c22:	4622      	mov	r2, r4
 8004c24:	4649      	mov	r1, r9
 8004c26:	4638      	mov	r0, r7
 8004c28:	47c0      	blx	r8
 8004c2a:	3001      	adds	r0, #1
 8004c2c:	d0e6      	beq.n	8004bfc <_printf_common+0xa4>
 8004c2e:	3601      	adds	r6, #1
 8004c30:	e7d9      	b.n	8004be6 <_printf_common+0x8e>
	...

08004c34 <_printf_i>:
 8004c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c38:	7e0f      	ldrb	r7, [r1, #24]
 8004c3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c3c:	2f78      	cmp	r7, #120	; 0x78
 8004c3e:	4691      	mov	r9, r2
 8004c40:	4680      	mov	r8, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	469a      	mov	sl, r3
 8004c46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c4a:	d807      	bhi.n	8004c5c <_printf_i+0x28>
 8004c4c:	2f62      	cmp	r7, #98	; 0x62
 8004c4e:	d80a      	bhi.n	8004c66 <_printf_i+0x32>
 8004c50:	2f00      	cmp	r7, #0
 8004c52:	f000 80d8 	beq.w	8004e06 <_printf_i+0x1d2>
 8004c56:	2f58      	cmp	r7, #88	; 0x58
 8004c58:	f000 80a3 	beq.w	8004da2 <_printf_i+0x16e>
 8004c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c64:	e03a      	b.n	8004cdc <_printf_i+0xa8>
 8004c66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c6a:	2b15      	cmp	r3, #21
 8004c6c:	d8f6      	bhi.n	8004c5c <_printf_i+0x28>
 8004c6e:	a101      	add	r1, pc, #4	; (adr r1, 8004c74 <_printf_i+0x40>)
 8004c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004ce1 	.word	0x08004ce1
 8004c7c:	08004c5d 	.word	0x08004c5d
 8004c80:	08004c5d 	.word	0x08004c5d
 8004c84:	08004c5d 	.word	0x08004c5d
 8004c88:	08004c5d 	.word	0x08004c5d
 8004c8c:	08004ce1 	.word	0x08004ce1
 8004c90:	08004c5d 	.word	0x08004c5d
 8004c94:	08004c5d 	.word	0x08004c5d
 8004c98:	08004c5d 	.word	0x08004c5d
 8004c9c:	08004c5d 	.word	0x08004c5d
 8004ca0:	08004ded 	.word	0x08004ded
 8004ca4:	08004d11 	.word	0x08004d11
 8004ca8:	08004dcf 	.word	0x08004dcf
 8004cac:	08004c5d 	.word	0x08004c5d
 8004cb0:	08004c5d 	.word	0x08004c5d
 8004cb4:	08004e0f 	.word	0x08004e0f
 8004cb8:	08004c5d 	.word	0x08004c5d
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004c5d 	.word	0x08004c5d
 8004cc4:	08004c5d 	.word	0x08004c5d
 8004cc8:	08004dd7 	.word	0x08004dd7
 8004ccc:	682b      	ldr	r3, [r5, #0]
 8004cce:	1d1a      	adds	r2, r3, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	602a      	str	r2, [r5, #0]
 8004cd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0a3      	b.n	8004e28 <_printf_i+0x1f4>
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	6829      	ldr	r1, [r5, #0]
 8004ce4:	0606      	lsls	r6, r0, #24
 8004ce6:	f101 0304 	add.w	r3, r1, #4
 8004cea:	d50a      	bpl.n	8004d02 <_printf_i+0xce>
 8004cec:	680e      	ldr	r6, [r1, #0]
 8004cee:	602b      	str	r3, [r5, #0]
 8004cf0:	2e00      	cmp	r6, #0
 8004cf2:	da03      	bge.n	8004cfc <_printf_i+0xc8>
 8004cf4:	232d      	movs	r3, #45	; 0x2d
 8004cf6:	4276      	negs	r6, r6
 8004cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfc:	485e      	ldr	r0, [pc, #376]	; (8004e78 <_printf_i+0x244>)
 8004cfe:	230a      	movs	r3, #10
 8004d00:	e019      	b.n	8004d36 <_printf_i+0x102>
 8004d02:	680e      	ldr	r6, [r1, #0]
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d0a:	bf18      	it	ne
 8004d0c:	b236      	sxthne	r6, r6
 8004d0e:	e7ef      	b.n	8004cf0 <_printf_i+0xbc>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	6820      	ldr	r0, [r4, #0]
 8004d14:	1d19      	adds	r1, r3, #4
 8004d16:	6029      	str	r1, [r5, #0]
 8004d18:	0601      	lsls	r1, r0, #24
 8004d1a:	d501      	bpl.n	8004d20 <_printf_i+0xec>
 8004d1c:	681e      	ldr	r6, [r3, #0]
 8004d1e:	e002      	b.n	8004d26 <_printf_i+0xf2>
 8004d20:	0646      	lsls	r6, r0, #25
 8004d22:	d5fb      	bpl.n	8004d1c <_printf_i+0xe8>
 8004d24:	881e      	ldrh	r6, [r3, #0]
 8004d26:	4854      	ldr	r0, [pc, #336]	; (8004e78 <_printf_i+0x244>)
 8004d28:	2f6f      	cmp	r7, #111	; 0x6f
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2308      	moveq	r3, #8
 8004d2e:	230a      	movne	r3, #10
 8004d30:	2100      	movs	r1, #0
 8004d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d36:	6865      	ldr	r5, [r4, #4]
 8004d38:	60a5      	str	r5, [r4, #8]
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	bfa2      	ittt	ge
 8004d3e:	6821      	ldrge	r1, [r4, #0]
 8004d40:	f021 0104 	bicge.w	r1, r1, #4
 8004d44:	6021      	strge	r1, [r4, #0]
 8004d46:	b90e      	cbnz	r6, 8004d4c <_printf_i+0x118>
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	d04d      	beq.n	8004de8 <_printf_i+0x1b4>
 8004d4c:	4615      	mov	r5, r2
 8004d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d52:	fb03 6711 	mls	r7, r3, r1, r6
 8004d56:	5dc7      	ldrb	r7, [r0, r7]
 8004d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d5c:	4637      	mov	r7, r6
 8004d5e:	42bb      	cmp	r3, r7
 8004d60:	460e      	mov	r6, r1
 8004d62:	d9f4      	bls.n	8004d4e <_printf_i+0x11a>
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d10b      	bne.n	8004d80 <_printf_i+0x14c>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	07de      	lsls	r6, r3, #31
 8004d6c:	d508      	bpl.n	8004d80 <_printf_i+0x14c>
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	6861      	ldr	r1, [r4, #4]
 8004d72:	4299      	cmp	r1, r3
 8004d74:	bfde      	ittt	le
 8004d76:	2330      	movle	r3, #48	; 0x30
 8004d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d80:	1b52      	subs	r2, r2, r5
 8004d82:	6122      	str	r2, [r4, #16]
 8004d84:	f8cd a000 	str.w	sl, [sp]
 8004d88:	464b      	mov	r3, r9
 8004d8a:	aa03      	add	r2, sp, #12
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f7ff fee2 	bl	8004b58 <_printf_common>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d14c      	bne.n	8004e32 <_printf_i+0x1fe>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b004      	add	sp, #16
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	4835      	ldr	r0, [pc, #212]	; (8004e78 <_printf_i+0x244>)
 8004da4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004da8:	6829      	ldr	r1, [r5, #0]
 8004daa:	6823      	ldr	r3, [r4, #0]
 8004dac:	f851 6b04 	ldr.w	r6, [r1], #4
 8004db0:	6029      	str	r1, [r5, #0]
 8004db2:	061d      	lsls	r5, r3, #24
 8004db4:	d514      	bpl.n	8004de0 <_printf_i+0x1ac>
 8004db6:	07df      	lsls	r7, r3, #31
 8004db8:	bf44      	itt	mi
 8004dba:	f043 0320 	orrmi.w	r3, r3, #32
 8004dbe:	6023      	strmi	r3, [r4, #0]
 8004dc0:	b91e      	cbnz	r6, 8004dca <_printf_i+0x196>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	f023 0320 	bic.w	r3, r3, #32
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	2310      	movs	r3, #16
 8004dcc:	e7b0      	b.n	8004d30 <_printf_i+0xfc>
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f043 0320 	orr.w	r3, r3, #32
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	2378      	movs	r3, #120	; 0x78
 8004dd8:	4828      	ldr	r0, [pc, #160]	; (8004e7c <_printf_i+0x248>)
 8004dda:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dde:	e7e3      	b.n	8004da8 <_printf_i+0x174>
 8004de0:	0659      	lsls	r1, r3, #25
 8004de2:	bf48      	it	mi
 8004de4:	b2b6      	uxthmi	r6, r6
 8004de6:	e7e6      	b.n	8004db6 <_printf_i+0x182>
 8004de8:	4615      	mov	r5, r2
 8004dea:	e7bb      	b.n	8004d64 <_printf_i+0x130>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	6826      	ldr	r6, [r4, #0]
 8004df0:	6961      	ldr	r1, [r4, #20]
 8004df2:	1d18      	adds	r0, r3, #4
 8004df4:	6028      	str	r0, [r5, #0]
 8004df6:	0635      	lsls	r5, r6, #24
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0x1cc>
 8004dfc:	6019      	str	r1, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0x1d2>
 8004e00:	0670      	lsls	r0, r6, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0x1c8>
 8004e04:	8019      	strh	r1, [r3, #0]
 8004e06:	2300      	movs	r3, #0
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	4615      	mov	r5, r2
 8004e0c:	e7ba      	b.n	8004d84 <_printf_i+0x150>
 8004e0e:	682b      	ldr	r3, [r5, #0]
 8004e10:	1d1a      	adds	r2, r3, #4
 8004e12:	602a      	str	r2, [r5, #0]
 8004e14:	681d      	ldr	r5, [r3, #0]
 8004e16:	6862      	ldr	r2, [r4, #4]
 8004e18:	2100      	movs	r1, #0
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7fb f9e0 	bl	80001e0 <memchr>
 8004e20:	b108      	cbz	r0, 8004e26 <_printf_i+0x1f2>
 8004e22:	1b40      	subs	r0, r0, r5
 8004e24:	6060      	str	r0, [r4, #4]
 8004e26:	6863      	ldr	r3, [r4, #4]
 8004e28:	6123      	str	r3, [r4, #16]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e30:	e7a8      	b.n	8004d84 <_printf_i+0x150>
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	462a      	mov	r2, r5
 8004e36:	4649      	mov	r1, r9
 8004e38:	4640      	mov	r0, r8
 8004e3a:	47d0      	blx	sl
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d0ab      	beq.n	8004d98 <_printf_i+0x164>
 8004e40:	6823      	ldr	r3, [r4, #0]
 8004e42:	079b      	lsls	r3, r3, #30
 8004e44:	d413      	bmi.n	8004e6e <_printf_i+0x23a>
 8004e46:	68e0      	ldr	r0, [r4, #12]
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	4298      	cmp	r0, r3
 8004e4c:	bfb8      	it	lt
 8004e4e:	4618      	movlt	r0, r3
 8004e50:	e7a4      	b.n	8004d9c <_printf_i+0x168>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4632      	mov	r2, r6
 8004e56:	4649      	mov	r1, r9
 8004e58:	4640      	mov	r0, r8
 8004e5a:	47d0      	blx	sl
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d09b      	beq.n	8004d98 <_printf_i+0x164>
 8004e60:	3501      	adds	r5, #1
 8004e62:	68e3      	ldr	r3, [r4, #12]
 8004e64:	9903      	ldr	r1, [sp, #12]
 8004e66:	1a5b      	subs	r3, r3, r1
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	dcf2      	bgt.n	8004e52 <_printf_i+0x21e>
 8004e6c:	e7eb      	b.n	8004e46 <_printf_i+0x212>
 8004e6e:	2500      	movs	r5, #0
 8004e70:	f104 0619 	add.w	r6, r4, #25
 8004e74:	e7f5      	b.n	8004e62 <_printf_i+0x22e>
 8004e76:	bf00      	nop
 8004e78:	08005ad3 	.word	0x08005ad3
 8004e7c:	08005ae4 	.word	0x08005ae4

08004e80 <__swbuf_r>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	460e      	mov	r6, r1
 8004e84:	4614      	mov	r4, r2
 8004e86:	4605      	mov	r5, r0
 8004e88:	b118      	cbz	r0, 8004e92 <__swbuf_r+0x12>
 8004e8a:	6983      	ldr	r3, [r0, #24]
 8004e8c:	b90b      	cbnz	r3, 8004e92 <__swbuf_r+0x12>
 8004e8e:	f000 f9d9 	bl	8005244 <__sinit>
 8004e92:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <__swbuf_r+0x98>)
 8004e94:	429c      	cmp	r4, r3
 8004e96:	d12b      	bne.n	8004ef0 <__swbuf_r+0x70>
 8004e98:	686c      	ldr	r4, [r5, #4]
 8004e9a:	69a3      	ldr	r3, [r4, #24]
 8004e9c:	60a3      	str	r3, [r4, #8]
 8004e9e:	89a3      	ldrh	r3, [r4, #12]
 8004ea0:	071a      	lsls	r2, r3, #28
 8004ea2:	d52f      	bpl.n	8004f04 <__swbuf_r+0x84>
 8004ea4:	6923      	ldr	r3, [r4, #16]
 8004ea6:	b36b      	cbz	r3, 8004f04 <__swbuf_r+0x84>
 8004ea8:	6923      	ldr	r3, [r4, #16]
 8004eaa:	6820      	ldr	r0, [r4, #0]
 8004eac:	1ac0      	subs	r0, r0, r3
 8004eae:	6963      	ldr	r3, [r4, #20]
 8004eb0:	b2f6      	uxtb	r6, r6
 8004eb2:	4283      	cmp	r3, r0
 8004eb4:	4637      	mov	r7, r6
 8004eb6:	dc04      	bgt.n	8004ec2 <__swbuf_r+0x42>
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f92e 	bl	800511c <_fflush_r>
 8004ec0:	bb30      	cbnz	r0, 8004f10 <__swbuf_r+0x90>
 8004ec2:	68a3      	ldr	r3, [r4, #8]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60a3      	str	r3, [r4, #8]
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	6022      	str	r2, [r4, #0]
 8004ece:	701e      	strb	r6, [r3, #0]
 8004ed0:	6963      	ldr	r3, [r4, #20]
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	4283      	cmp	r3, r0
 8004ed6:	d004      	beq.n	8004ee2 <__swbuf_r+0x62>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	07db      	lsls	r3, r3, #31
 8004edc:	d506      	bpl.n	8004eec <__swbuf_r+0x6c>
 8004ede:	2e0a      	cmp	r6, #10
 8004ee0:	d104      	bne.n	8004eec <__swbuf_r+0x6c>
 8004ee2:	4621      	mov	r1, r4
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	f000 f919 	bl	800511c <_fflush_r>
 8004eea:	b988      	cbnz	r0, 8004f10 <__swbuf_r+0x90>
 8004eec:	4638      	mov	r0, r7
 8004eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <__swbuf_r+0x9c>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d101      	bne.n	8004efa <__swbuf_r+0x7a>
 8004ef6:	68ac      	ldr	r4, [r5, #8]
 8004ef8:	e7cf      	b.n	8004e9a <__swbuf_r+0x1a>
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <__swbuf_r+0xa0>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	bf08      	it	eq
 8004f00:	68ec      	ldreq	r4, [r5, #12]
 8004f02:	e7ca      	b.n	8004e9a <__swbuf_r+0x1a>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4628      	mov	r0, r5
 8004f08:	f000 f80c 	bl	8004f24 <__swsetup_r>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d0cb      	beq.n	8004ea8 <__swbuf_r+0x28>
 8004f10:	f04f 37ff 	mov.w	r7, #4294967295
 8004f14:	e7ea      	b.n	8004eec <__swbuf_r+0x6c>
 8004f16:	bf00      	nop
 8004f18:	08005b18 	.word	0x08005b18
 8004f1c:	08005b38 	.word	0x08005b38
 8004f20:	08005af8 	.word	0x08005af8

08004f24 <__swsetup_r>:
 8004f24:	4b32      	ldr	r3, [pc, #200]	; (8004ff0 <__swsetup_r+0xcc>)
 8004f26:	b570      	push	{r4, r5, r6, lr}
 8004f28:	681d      	ldr	r5, [r3, #0]
 8004f2a:	4606      	mov	r6, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	b125      	cbz	r5, 8004f3a <__swsetup_r+0x16>
 8004f30:	69ab      	ldr	r3, [r5, #24]
 8004f32:	b913      	cbnz	r3, 8004f3a <__swsetup_r+0x16>
 8004f34:	4628      	mov	r0, r5
 8004f36:	f000 f985 	bl	8005244 <__sinit>
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <__swsetup_r+0xd0>)
 8004f3c:	429c      	cmp	r4, r3
 8004f3e:	d10f      	bne.n	8004f60 <__swsetup_r+0x3c>
 8004f40:	686c      	ldr	r4, [r5, #4]
 8004f42:	89a3      	ldrh	r3, [r4, #12]
 8004f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f48:	0719      	lsls	r1, r3, #28
 8004f4a:	d42c      	bmi.n	8004fa6 <__swsetup_r+0x82>
 8004f4c:	06dd      	lsls	r5, r3, #27
 8004f4e:	d411      	bmi.n	8004f74 <__swsetup_r+0x50>
 8004f50:	2309      	movs	r3, #9
 8004f52:	6033      	str	r3, [r6, #0]
 8004f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f58:	81a3      	strh	r3, [r4, #12]
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	e03e      	b.n	8004fde <__swsetup_r+0xba>
 8004f60:	4b25      	ldr	r3, [pc, #148]	; (8004ff8 <__swsetup_r+0xd4>)
 8004f62:	429c      	cmp	r4, r3
 8004f64:	d101      	bne.n	8004f6a <__swsetup_r+0x46>
 8004f66:	68ac      	ldr	r4, [r5, #8]
 8004f68:	e7eb      	b.n	8004f42 <__swsetup_r+0x1e>
 8004f6a:	4b24      	ldr	r3, [pc, #144]	; (8004ffc <__swsetup_r+0xd8>)
 8004f6c:	429c      	cmp	r4, r3
 8004f6e:	bf08      	it	eq
 8004f70:	68ec      	ldreq	r4, [r5, #12]
 8004f72:	e7e6      	b.n	8004f42 <__swsetup_r+0x1e>
 8004f74:	0758      	lsls	r0, r3, #29
 8004f76:	d512      	bpl.n	8004f9e <__swsetup_r+0x7a>
 8004f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f7a:	b141      	cbz	r1, 8004f8e <__swsetup_r+0x6a>
 8004f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f80:	4299      	cmp	r1, r3
 8004f82:	d002      	beq.n	8004f8a <__swsetup_r+0x66>
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff fc41 	bl	800480c <_free_r>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f8e:	89a3      	ldrh	r3, [r4, #12]
 8004f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f94:	81a3      	strh	r3, [r4, #12]
 8004f96:	2300      	movs	r3, #0
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	6923      	ldr	r3, [r4, #16]
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	89a3      	ldrh	r3, [r4, #12]
 8004fa0:	f043 0308 	orr.w	r3, r3, #8
 8004fa4:	81a3      	strh	r3, [r4, #12]
 8004fa6:	6923      	ldr	r3, [r4, #16]
 8004fa8:	b94b      	cbnz	r3, 8004fbe <__swsetup_r+0x9a>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb4:	d003      	beq.n	8004fbe <__swsetup_r+0x9a>
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	4630      	mov	r0, r6
 8004fba:	f000 fa09 	bl	80053d0 <__smakebuf_r>
 8004fbe:	89a0      	ldrh	r0, [r4, #12]
 8004fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fc4:	f010 0301 	ands.w	r3, r0, #1
 8004fc8:	d00a      	beq.n	8004fe0 <__swsetup_r+0xbc>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60a3      	str	r3, [r4, #8]
 8004fce:	6963      	ldr	r3, [r4, #20]
 8004fd0:	425b      	negs	r3, r3
 8004fd2:	61a3      	str	r3, [r4, #24]
 8004fd4:	6923      	ldr	r3, [r4, #16]
 8004fd6:	b943      	cbnz	r3, 8004fea <__swsetup_r+0xc6>
 8004fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fdc:	d1ba      	bne.n	8004f54 <__swsetup_r+0x30>
 8004fde:	bd70      	pop	{r4, r5, r6, pc}
 8004fe0:	0781      	lsls	r1, r0, #30
 8004fe2:	bf58      	it	pl
 8004fe4:	6963      	ldrpl	r3, [r4, #20]
 8004fe6:	60a3      	str	r3, [r4, #8]
 8004fe8:	e7f4      	b.n	8004fd4 <__swsetup_r+0xb0>
 8004fea:	2000      	movs	r0, #0
 8004fec:	e7f7      	b.n	8004fde <__swsetup_r+0xba>
 8004fee:	bf00      	nop
 8004ff0:	2000000c 	.word	0x2000000c
 8004ff4:	08005b18 	.word	0x08005b18
 8004ff8:	08005b38 	.word	0x08005b38
 8004ffc:	08005af8 	.word	0x08005af8

08005000 <abort>:
 8005000:	b508      	push	{r3, lr}
 8005002:	2006      	movs	r0, #6
 8005004:	f000 fa4c 	bl	80054a0 <raise>
 8005008:	2001      	movs	r0, #1
 800500a:	f7fc fbc7 	bl	800179c <_exit>
	...

08005010 <__sflush_r>:
 8005010:	898a      	ldrh	r2, [r1, #12]
 8005012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005016:	4605      	mov	r5, r0
 8005018:	0710      	lsls	r0, r2, #28
 800501a:	460c      	mov	r4, r1
 800501c:	d458      	bmi.n	80050d0 <__sflush_r+0xc0>
 800501e:	684b      	ldr	r3, [r1, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	dc05      	bgt.n	8005030 <__sflush_r+0x20>
 8005024:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	dc02      	bgt.n	8005030 <__sflush_r+0x20>
 800502a:	2000      	movs	r0, #0
 800502c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005030:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005032:	2e00      	cmp	r6, #0
 8005034:	d0f9      	beq.n	800502a <__sflush_r+0x1a>
 8005036:	2300      	movs	r3, #0
 8005038:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800503c:	682f      	ldr	r7, [r5, #0]
 800503e:	602b      	str	r3, [r5, #0]
 8005040:	d032      	beq.n	80050a8 <__sflush_r+0x98>
 8005042:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005044:	89a3      	ldrh	r3, [r4, #12]
 8005046:	075a      	lsls	r2, r3, #29
 8005048:	d505      	bpl.n	8005056 <__sflush_r+0x46>
 800504a:	6863      	ldr	r3, [r4, #4]
 800504c:	1ac0      	subs	r0, r0, r3
 800504e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005050:	b10b      	cbz	r3, 8005056 <__sflush_r+0x46>
 8005052:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005054:	1ac0      	subs	r0, r0, r3
 8005056:	2300      	movs	r3, #0
 8005058:	4602      	mov	r2, r0
 800505a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800505c:	6a21      	ldr	r1, [r4, #32]
 800505e:	4628      	mov	r0, r5
 8005060:	47b0      	blx	r6
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	d106      	bne.n	8005076 <__sflush_r+0x66>
 8005068:	6829      	ldr	r1, [r5, #0]
 800506a:	291d      	cmp	r1, #29
 800506c:	d82c      	bhi.n	80050c8 <__sflush_r+0xb8>
 800506e:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <__sflush_r+0x108>)
 8005070:	40ca      	lsrs	r2, r1
 8005072:	07d6      	lsls	r6, r2, #31
 8005074:	d528      	bpl.n	80050c8 <__sflush_r+0xb8>
 8005076:	2200      	movs	r2, #0
 8005078:	6062      	str	r2, [r4, #4]
 800507a:	04d9      	lsls	r1, r3, #19
 800507c:	6922      	ldr	r2, [r4, #16]
 800507e:	6022      	str	r2, [r4, #0]
 8005080:	d504      	bpl.n	800508c <__sflush_r+0x7c>
 8005082:	1c42      	adds	r2, r0, #1
 8005084:	d101      	bne.n	800508a <__sflush_r+0x7a>
 8005086:	682b      	ldr	r3, [r5, #0]
 8005088:	b903      	cbnz	r3, 800508c <__sflush_r+0x7c>
 800508a:	6560      	str	r0, [r4, #84]	; 0x54
 800508c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800508e:	602f      	str	r7, [r5, #0]
 8005090:	2900      	cmp	r1, #0
 8005092:	d0ca      	beq.n	800502a <__sflush_r+0x1a>
 8005094:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005098:	4299      	cmp	r1, r3
 800509a:	d002      	beq.n	80050a2 <__sflush_r+0x92>
 800509c:	4628      	mov	r0, r5
 800509e:	f7ff fbb5 	bl	800480c <_free_r>
 80050a2:	2000      	movs	r0, #0
 80050a4:	6360      	str	r0, [r4, #52]	; 0x34
 80050a6:	e7c1      	b.n	800502c <__sflush_r+0x1c>
 80050a8:	6a21      	ldr	r1, [r4, #32]
 80050aa:	2301      	movs	r3, #1
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	1c41      	adds	r1, r0, #1
 80050b2:	d1c7      	bne.n	8005044 <__sflush_r+0x34>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d0c4      	beq.n	8005044 <__sflush_r+0x34>
 80050ba:	2b1d      	cmp	r3, #29
 80050bc:	d001      	beq.n	80050c2 <__sflush_r+0xb2>
 80050be:	2b16      	cmp	r3, #22
 80050c0:	d101      	bne.n	80050c6 <__sflush_r+0xb6>
 80050c2:	602f      	str	r7, [r5, #0]
 80050c4:	e7b1      	b.n	800502a <__sflush_r+0x1a>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	e7ad      	b.n	800502c <__sflush_r+0x1c>
 80050d0:	690f      	ldr	r7, [r1, #16]
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	d0a9      	beq.n	800502a <__sflush_r+0x1a>
 80050d6:	0793      	lsls	r3, r2, #30
 80050d8:	680e      	ldr	r6, [r1, #0]
 80050da:	bf08      	it	eq
 80050dc:	694b      	ldreq	r3, [r1, #20]
 80050de:	600f      	str	r7, [r1, #0]
 80050e0:	bf18      	it	ne
 80050e2:	2300      	movne	r3, #0
 80050e4:	eba6 0807 	sub.w	r8, r6, r7
 80050e8:	608b      	str	r3, [r1, #8]
 80050ea:	f1b8 0f00 	cmp.w	r8, #0
 80050ee:	dd9c      	ble.n	800502a <__sflush_r+0x1a>
 80050f0:	6a21      	ldr	r1, [r4, #32]
 80050f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80050f4:	4643      	mov	r3, r8
 80050f6:	463a      	mov	r2, r7
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b0      	blx	r6
 80050fc:	2800      	cmp	r0, #0
 80050fe:	dc06      	bgt.n	800510e <__sflush_r+0xfe>
 8005100:	89a3      	ldrh	r3, [r4, #12]
 8005102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005106:	81a3      	strh	r3, [r4, #12]
 8005108:	f04f 30ff 	mov.w	r0, #4294967295
 800510c:	e78e      	b.n	800502c <__sflush_r+0x1c>
 800510e:	4407      	add	r7, r0
 8005110:	eba8 0800 	sub.w	r8, r8, r0
 8005114:	e7e9      	b.n	80050ea <__sflush_r+0xda>
 8005116:	bf00      	nop
 8005118:	20400001 	.word	0x20400001

0800511c <_fflush_r>:
 800511c:	b538      	push	{r3, r4, r5, lr}
 800511e:	690b      	ldr	r3, [r1, #16]
 8005120:	4605      	mov	r5, r0
 8005122:	460c      	mov	r4, r1
 8005124:	b913      	cbnz	r3, 800512c <_fflush_r+0x10>
 8005126:	2500      	movs	r5, #0
 8005128:	4628      	mov	r0, r5
 800512a:	bd38      	pop	{r3, r4, r5, pc}
 800512c:	b118      	cbz	r0, 8005136 <_fflush_r+0x1a>
 800512e:	6983      	ldr	r3, [r0, #24]
 8005130:	b90b      	cbnz	r3, 8005136 <_fflush_r+0x1a>
 8005132:	f000 f887 	bl	8005244 <__sinit>
 8005136:	4b14      	ldr	r3, [pc, #80]	; (8005188 <_fflush_r+0x6c>)
 8005138:	429c      	cmp	r4, r3
 800513a:	d11b      	bne.n	8005174 <_fflush_r+0x58>
 800513c:	686c      	ldr	r4, [r5, #4]
 800513e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0ef      	beq.n	8005126 <_fflush_r+0xa>
 8005146:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005148:	07d0      	lsls	r0, r2, #31
 800514a:	d404      	bmi.n	8005156 <_fflush_r+0x3a>
 800514c:	0599      	lsls	r1, r3, #22
 800514e:	d402      	bmi.n	8005156 <_fflush_r+0x3a>
 8005150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005152:	f000 f915 	bl	8005380 <__retarget_lock_acquire_recursive>
 8005156:	4628      	mov	r0, r5
 8005158:	4621      	mov	r1, r4
 800515a:	f7ff ff59 	bl	8005010 <__sflush_r>
 800515e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005160:	07da      	lsls	r2, r3, #31
 8005162:	4605      	mov	r5, r0
 8005164:	d4e0      	bmi.n	8005128 <_fflush_r+0xc>
 8005166:	89a3      	ldrh	r3, [r4, #12]
 8005168:	059b      	lsls	r3, r3, #22
 800516a:	d4dd      	bmi.n	8005128 <_fflush_r+0xc>
 800516c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800516e:	f000 f908 	bl	8005382 <__retarget_lock_release_recursive>
 8005172:	e7d9      	b.n	8005128 <_fflush_r+0xc>
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <_fflush_r+0x70>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d101      	bne.n	800517e <_fflush_r+0x62>
 800517a:	68ac      	ldr	r4, [r5, #8]
 800517c:	e7df      	b.n	800513e <_fflush_r+0x22>
 800517e:	4b04      	ldr	r3, [pc, #16]	; (8005190 <_fflush_r+0x74>)
 8005180:	429c      	cmp	r4, r3
 8005182:	bf08      	it	eq
 8005184:	68ec      	ldreq	r4, [r5, #12]
 8005186:	e7da      	b.n	800513e <_fflush_r+0x22>
 8005188:	08005b18 	.word	0x08005b18
 800518c:	08005b38 	.word	0x08005b38
 8005190:	08005af8 	.word	0x08005af8

08005194 <std>:
 8005194:	2300      	movs	r3, #0
 8005196:	b510      	push	{r4, lr}
 8005198:	4604      	mov	r4, r0
 800519a:	e9c0 3300 	strd	r3, r3, [r0]
 800519e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051a2:	6083      	str	r3, [r0, #8]
 80051a4:	8181      	strh	r1, [r0, #12]
 80051a6:	6643      	str	r3, [r0, #100]	; 0x64
 80051a8:	81c2      	strh	r2, [r0, #14]
 80051aa:	6183      	str	r3, [r0, #24]
 80051ac:	4619      	mov	r1, r3
 80051ae:	2208      	movs	r2, #8
 80051b0:	305c      	adds	r0, #92	; 0x5c
 80051b2:	f7fd feb9 	bl	8002f28 <memset>
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <std+0x38>)
 80051b8:	6263      	str	r3, [r4, #36]	; 0x24
 80051ba:	4b05      	ldr	r3, [pc, #20]	; (80051d0 <std+0x3c>)
 80051bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80051be:	4b05      	ldr	r3, [pc, #20]	; (80051d4 <std+0x40>)
 80051c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <std+0x44>)
 80051c4:	6224      	str	r4, [r4, #32]
 80051c6:	6323      	str	r3, [r4, #48]	; 0x30
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	bf00      	nop
 80051cc:	080054d9 	.word	0x080054d9
 80051d0:	080054fb 	.word	0x080054fb
 80051d4:	08005533 	.word	0x08005533
 80051d8:	08005557 	.word	0x08005557

080051dc <_cleanup_r>:
 80051dc:	4901      	ldr	r1, [pc, #4]	; (80051e4 <_cleanup_r+0x8>)
 80051de:	f000 b8af 	b.w	8005340 <_fwalk_reent>
 80051e2:	bf00      	nop
 80051e4:	0800511d 	.word	0x0800511d

080051e8 <__sfmoreglue>:
 80051e8:	b570      	push	{r4, r5, r6, lr}
 80051ea:	2268      	movs	r2, #104	; 0x68
 80051ec:	1e4d      	subs	r5, r1, #1
 80051ee:	4355      	muls	r5, r2
 80051f0:	460e      	mov	r6, r1
 80051f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051f6:	f7fe fbaf 	bl	8003958 <_malloc_r>
 80051fa:	4604      	mov	r4, r0
 80051fc:	b140      	cbz	r0, 8005210 <__sfmoreglue+0x28>
 80051fe:	2100      	movs	r1, #0
 8005200:	e9c0 1600 	strd	r1, r6, [r0]
 8005204:	300c      	adds	r0, #12
 8005206:	60a0      	str	r0, [r4, #8]
 8005208:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800520c:	f7fd fe8c 	bl	8002f28 <memset>
 8005210:	4620      	mov	r0, r4
 8005212:	bd70      	pop	{r4, r5, r6, pc}

08005214 <__sfp_lock_acquire>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__sfp_lock_acquire+0x8>)
 8005216:	f000 b8b3 	b.w	8005380 <__retarget_lock_acquire_recursive>
 800521a:	bf00      	nop
 800521c:	20000331 	.word	0x20000331

08005220 <__sfp_lock_release>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__sfp_lock_release+0x8>)
 8005222:	f000 b8ae 	b.w	8005382 <__retarget_lock_release_recursive>
 8005226:	bf00      	nop
 8005228:	20000331 	.word	0x20000331

0800522c <__sinit_lock_acquire>:
 800522c:	4801      	ldr	r0, [pc, #4]	; (8005234 <__sinit_lock_acquire+0x8>)
 800522e:	f000 b8a7 	b.w	8005380 <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	20000332 	.word	0x20000332

08005238 <__sinit_lock_release>:
 8005238:	4801      	ldr	r0, [pc, #4]	; (8005240 <__sinit_lock_release+0x8>)
 800523a:	f000 b8a2 	b.w	8005382 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	20000332 	.word	0x20000332

08005244 <__sinit>:
 8005244:	b510      	push	{r4, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	f7ff fff0 	bl	800522c <__sinit_lock_acquire>
 800524c:	69a3      	ldr	r3, [r4, #24]
 800524e:	b11b      	cbz	r3, 8005258 <__sinit+0x14>
 8005250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005254:	f7ff bff0 	b.w	8005238 <__sinit_lock_release>
 8005258:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800525c:	6523      	str	r3, [r4, #80]	; 0x50
 800525e:	4b13      	ldr	r3, [pc, #76]	; (80052ac <__sinit+0x68>)
 8005260:	4a13      	ldr	r2, [pc, #76]	; (80052b0 <__sinit+0x6c>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62a2      	str	r2, [r4, #40]	; 0x28
 8005266:	42a3      	cmp	r3, r4
 8005268:	bf04      	itt	eq
 800526a:	2301      	moveq	r3, #1
 800526c:	61a3      	streq	r3, [r4, #24]
 800526e:	4620      	mov	r0, r4
 8005270:	f000 f820 	bl	80052b4 <__sfp>
 8005274:	6060      	str	r0, [r4, #4]
 8005276:	4620      	mov	r0, r4
 8005278:	f000 f81c 	bl	80052b4 <__sfp>
 800527c:	60a0      	str	r0, [r4, #8]
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f818 	bl	80052b4 <__sfp>
 8005284:	2200      	movs	r2, #0
 8005286:	60e0      	str	r0, [r4, #12]
 8005288:	2104      	movs	r1, #4
 800528a:	6860      	ldr	r0, [r4, #4]
 800528c:	f7ff ff82 	bl	8005194 <std>
 8005290:	68a0      	ldr	r0, [r4, #8]
 8005292:	2201      	movs	r2, #1
 8005294:	2109      	movs	r1, #9
 8005296:	f7ff ff7d 	bl	8005194 <std>
 800529a:	68e0      	ldr	r0, [r4, #12]
 800529c:	2202      	movs	r2, #2
 800529e:	2112      	movs	r1, #18
 80052a0:	f7ff ff78 	bl	8005194 <std>
 80052a4:	2301      	movs	r3, #1
 80052a6:	61a3      	str	r3, [r4, #24]
 80052a8:	e7d2      	b.n	8005250 <__sinit+0xc>
 80052aa:	bf00      	nop
 80052ac:	08005898 	.word	0x08005898
 80052b0:	080051dd 	.word	0x080051dd

080052b4 <__sfp>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	4607      	mov	r7, r0
 80052b8:	f7ff ffac 	bl	8005214 <__sfp_lock_acquire>
 80052bc:	4b1e      	ldr	r3, [pc, #120]	; (8005338 <__sfp+0x84>)
 80052be:	681e      	ldr	r6, [r3, #0]
 80052c0:	69b3      	ldr	r3, [r6, #24]
 80052c2:	b913      	cbnz	r3, 80052ca <__sfp+0x16>
 80052c4:	4630      	mov	r0, r6
 80052c6:	f7ff ffbd 	bl	8005244 <__sinit>
 80052ca:	3648      	adds	r6, #72	; 0x48
 80052cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052d0:	3b01      	subs	r3, #1
 80052d2:	d503      	bpl.n	80052dc <__sfp+0x28>
 80052d4:	6833      	ldr	r3, [r6, #0]
 80052d6:	b30b      	cbz	r3, 800531c <__sfp+0x68>
 80052d8:	6836      	ldr	r6, [r6, #0]
 80052da:	e7f7      	b.n	80052cc <__sfp+0x18>
 80052dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052e0:	b9d5      	cbnz	r5, 8005318 <__sfp+0x64>
 80052e2:	4b16      	ldr	r3, [pc, #88]	; (800533c <__sfp+0x88>)
 80052e4:	60e3      	str	r3, [r4, #12]
 80052e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052ea:	6665      	str	r5, [r4, #100]	; 0x64
 80052ec:	f000 f847 	bl	800537e <__retarget_lock_init_recursive>
 80052f0:	f7ff ff96 	bl	8005220 <__sfp_lock_release>
 80052f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052fc:	6025      	str	r5, [r4, #0]
 80052fe:	61a5      	str	r5, [r4, #24]
 8005300:	2208      	movs	r2, #8
 8005302:	4629      	mov	r1, r5
 8005304:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005308:	f7fd fe0e 	bl	8002f28 <memset>
 800530c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005310:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005314:	4620      	mov	r0, r4
 8005316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005318:	3468      	adds	r4, #104	; 0x68
 800531a:	e7d9      	b.n	80052d0 <__sfp+0x1c>
 800531c:	2104      	movs	r1, #4
 800531e:	4638      	mov	r0, r7
 8005320:	f7ff ff62 	bl	80051e8 <__sfmoreglue>
 8005324:	4604      	mov	r4, r0
 8005326:	6030      	str	r0, [r6, #0]
 8005328:	2800      	cmp	r0, #0
 800532a:	d1d5      	bne.n	80052d8 <__sfp+0x24>
 800532c:	f7ff ff78 	bl	8005220 <__sfp_lock_release>
 8005330:	230c      	movs	r3, #12
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	e7ee      	b.n	8005314 <__sfp+0x60>
 8005336:	bf00      	nop
 8005338:	08005898 	.word	0x08005898
 800533c:	ffff0001 	.word	0xffff0001

08005340 <_fwalk_reent>:
 8005340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005344:	4606      	mov	r6, r0
 8005346:	4688      	mov	r8, r1
 8005348:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800534c:	2700      	movs	r7, #0
 800534e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005352:	f1b9 0901 	subs.w	r9, r9, #1
 8005356:	d505      	bpl.n	8005364 <_fwalk_reent+0x24>
 8005358:	6824      	ldr	r4, [r4, #0]
 800535a:	2c00      	cmp	r4, #0
 800535c:	d1f7      	bne.n	800534e <_fwalk_reent+0xe>
 800535e:	4638      	mov	r0, r7
 8005360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005364:	89ab      	ldrh	r3, [r5, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d907      	bls.n	800537a <_fwalk_reent+0x3a>
 800536a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800536e:	3301      	adds	r3, #1
 8005370:	d003      	beq.n	800537a <_fwalk_reent+0x3a>
 8005372:	4629      	mov	r1, r5
 8005374:	4630      	mov	r0, r6
 8005376:	47c0      	blx	r8
 8005378:	4307      	orrs	r7, r0
 800537a:	3568      	adds	r5, #104	; 0x68
 800537c:	e7e9      	b.n	8005352 <_fwalk_reent+0x12>

0800537e <__retarget_lock_init_recursive>:
 800537e:	4770      	bx	lr

08005380 <__retarget_lock_acquire_recursive>:
 8005380:	4770      	bx	lr

08005382 <__retarget_lock_release_recursive>:
 8005382:	4770      	bx	lr

08005384 <__swhatbuf_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	460e      	mov	r6, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2900      	cmp	r1, #0
 800538e:	b096      	sub	sp, #88	; 0x58
 8005390:	4614      	mov	r4, r2
 8005392:	461d      	mov	r5, r3
 8005394:	da08      	bge.n	80053a8 <__swhatbuf_r+0x24>
 8005396:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	602a      	str	r2, [r5, #0]
 800539e:	061a      	lsls	r2, r3, #24
 80053a0:	d410      	bmi.n	80053c4 <__swhatbuf_r+0x40>
 80053a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a6:	e00e      	b.n	80053c6 <__swhatbuf_r+0x42>
 80053a8:	466a      	mov	r2, sp
 80053aa:	f000 f8fb 	bl	80055a4 <_fstat_r>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	dbf1      	blt.n	8005396 <__swhatbuf_r+0x12>
 80053b2:	9a01      	ldr	r2, [sp, #4]
 80053b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053bc:	425a      	negs	r2, r3
 80053be:	415a      	adcs	r2, r3
 80053c0:	602a      	str	r2, [r5, #0]
 80053c2:	e7ee      	b.n	80053a2 <__swhatbuf_r+0x1e>
 80053c4:	2340      	movs	r3, #64	; 0x40
 80053c6:	2000      	movs	r0, #0
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	b016      	add	sp, #88	; 0x58
 80053cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080053d0 <__smakebuf_r>:
 80053d0:	898b      	ldrh	r3, [r1, #12]
 80053d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053d4:	079d      	lsls	r5, r3, #30
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	d507      	bpl.n	80053ec <__smakebuf_r+0x1c>
 80053dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	2301      	movs	r3, #1
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	b002      	add	sp, #8
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	ab01      	add	r3, sp, #4
 80053ee:	466a      	mov	r2, sp
 80053f0:	f7ff ffc8 	bl	8005384 <__swhatbuf_r>
 80053f4:	9900      	ldr	r1, [sp, #0]
 80053f6:	4605      	mov	r5, r0
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7fe faad 	bl	8003958 <_malloc_r>
 80053fe:	b948      	cbnz	r0, 8005414 <__smakebuf_r+0x44>
 8005400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005404:	059a      	lsls	r2, r3, #22
 8005406:	d4ef      	bmi.n	80053e8 <__smakebuf_r+0x18>
 8005408:	f023 0303 	bic.w	r3, r3, #3
 800540c:	f043 0302 	orr.w	r3, r3, #2
 8005410:	81a3      	strh	r3, [r4, #12]
 8005412:	e7e3      	b.n	80053dc <__smakebuf_r+0xc>
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <__smakebuf_r+0x7c>)
 8005416:	62b3      	str	r3, [r6, #40]	; 0x28
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	6020      	str	r0, [r4, #0]
 800541c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	9b00      	ldr	r3, [sp, #0]
 8005424:	6163      	str	r3, [r4, #20]
 8005426:	9b01      	ldr	r3, [sp, #4]
 8005428:	6120      	str	r0, [r4, #16]
 800542a:	b15b      	cbz	r3, 8005444 <__smakebuf_r+0x74>
 800542c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005430:	4630      	mov	r0, r6
 8005432:	f000 f8c9 	bl	80055c8 <_isatty_r>
 8005436:	b128      	cbz	r0, 8005444 <__smakebuf_r+0x74>
 8005438:	89a3      	ldrh	r3, [r4, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	f043 0301 	orr.w	r3, r3, #1
 8005442:	81a3      	strh	r3, [r4, #12]
 8005444:	89a0      	ldrh	r0, [r4, #12]
 8005446:	4305      	orrs	r5, r0
 8005448:	81a5      	strh	r5, [r4, #12]
 800544a:	e7cd      	b.n	80053e8 <__smakebuf_r+0x18>
 800544c:	080051dd 	.word	0x080051dd

08005450 <_raise_r>:
 8005450:	291f      	cmp	r1, #31
 8005452:	b538      	push	{r3, r4, r5, lr}
 8005454:	4604      	mov	r4, r0
 8005456:	460d      	mov	r5, r1
 8005458:	d904      	bls.n	8005464 <_raise_r+0x14>
 800545a:	2316      	movs	r3, #22
 800545c:	6003      	str	r3, [r0, #0]
 800545e:	f04f 30ff 	mov.w	r0, #4294967295
 8005462:	bd38      	pop	{r3, r4, r5, pc}
 8005464:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005466:	b112      	cbz	r2, 800546e <_raise_r+0x1e>
 8005468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800546c:	b94b      	cbnz	r3, 8005482 <_raise_r+0x32>
 800546e:	4620      	mov	r0, r4
 8005470:	f000 f830 	bl	80054d4 <_getpid_r>
 8005474:	462a      	mov	r2, r5
 8005476:	4601      	mov	r1, r0
 8005478:	4620      	mov	r0, r4
 800547a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800547e:	f000 b817 	b.w	80054b0 <_kill_r>
 8005482:	2b01      	cmp	r3, #1
 8005484:	d00a      	beq.n	800549c <_raise_r+0x4c>
 8005486:	1c59      	adds	r1, r3, #1
 8005488:	d103      	bne.n	8005492 <_raise_r+0x42>
 800548a:	2316      	movs	r3, #22
 800548c:	6003      	str	r3, [r0, #0]
 800548e:	2001      	movs	r0, #1
 8005490:	e7e7      	b.n	8005462 <_raise_r+0x12>
 8005492:	2400      	movs	r4, #0
 8005494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005498:	4628      	mov	r0, r5
 800549a:	4798      	blx	r3
 800549c:	2000      	movs	r0, #0
 800549e:	e7e0      	b.n	8005462 <_raise_r+0x12>

080054a0 <raise>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <raise+0xc>)
 80054a2:	4601      	mov	r1, r0
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f7ff bfd3 	b.w	8005450 <_raise_r>
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c

080054b0 <_kill_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	; (80054d0 <_kill_r+0x20>)
 80054b4:	2300      	movs	r3, #0
 80054b6:	4604      	mov	r4, r0
 80054b8:	4608      	mov	r0, r1
 80054ba:	4611      	mov	r1, r2
 80054bc:	602b      	str	r3, [r5, #0]
 80054be:	f7fc f95d 	bl	800177c <_kill>
 80054c2:	1c43      	adds	r3, r0, #1
 80054c4:	d102      	bne.n	80054cc <_kill_r+0x1c>
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	b103      	cbz	r3, 80054cc <_kill_r+0x1c>
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	bd38      	pop	{r3, r4, r5, pc}
 80054ce:	bf00      	nop
 80054d0:	2000032c 	.word	0x2000032c

080054d4 <_getpid_r>:
 80054d4:	f7fc b94a 	b.w	800176c <_getpid>

080054d8 <__sread>:
 80054d8:	b510      	push	{r4, lr}
 80054da:	460c      	mov	r4, r1
 80054dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e0:	f000 f894 	bl	800560c <_read_r>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	bfab      	itete	ge
 80054e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054ea:	89a3      	ldrhlt	r3, [r4, #12]
 80054ec:	181b      	addge	r3, r3, r0
 80054ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054f2:	bfac      	ite	ge
 80054f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80054f6:	81a3      	strhlt	r3, [r4, #12]
 80054f8:	bd10      	pop	{r4, pc}

080054fa <__swrite>:
 80054fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	461f      	mov	r7, r3
 8005500:	898b      	ldrh	r3, [r1, #12]
 8005502:	05db      	lsls	r3, r3, #23
 8005504:	4605      	mov	r5, r0
 8005506:	460c      	mov	r4, r1
 8005508:	4616      	mov	r6, r2
 800550a:	d505      	bpl.n	8005518 <__swrite+0x1e>
 800550c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005510:	2302      	movs	r3, #2
 8005512:	2200      	movs	r2, #0
 8005514:	f000 f868 	bl	80055e8 <_lseek_r>
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800551e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005522:	81a3      	strh	r3, [r4, #12]
 8005524:	4632      	mov	r2, r6
 8005526:	463b      	mov	r3, r7
 8005528:	4628      	mov	r0, r5
 800552a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800552e:	f000 b817 	b.w	8005560 <_write_r>

08005532 <__sseek>:
 8005532:	b510      	push	{r4, lr}
 8005534:	460c      	mov	r4, r1
 8005536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800553a:	f000 f855 	bl	80055e8 <_lseek_r>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	89a3      	ldrh	r3, [r4, #12]
 8005542:	bf15      	itete	ne
 8005544:	6560      	strne	r0, [r4, #84]	; 0x54
 8005546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800554a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800554e:	81a3      	strheq	r3, [r4, #12]
 8005550:	bf18      	it	ne
 8005552:	81a3      	strhne	r3, [r4, #12]
 8005554:	bd10      	pop	{r4, pc}

08005556 <__sclose>:
 8005556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800555a:	f000 b813 	b.w	8005584 <_close_r>
	...

08005560 <_write_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4d07      	ldr	r5, [pc, #28]	; (8005580 <_write_r+0x20>)
 8005564:	4604      	mov	r4, r0
 8005566:	4608      	mov	r0, r1
 8005568:	4611      	mov	r1, r2
 800556a:	2200      	movs	r2, #0
 800556c:	602a      	str	r2, [r5, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	f7fc f93b 	bl	80017ea <_write>
 8005574:	1c43      	adds	r3, r0, #1
 8005576:	d102      	bne.n	800557e <_write_r+0x1e>
 8005578:	682b      	ldr	r3, [r5, #0]
 800557a:	b103      	cbz	r3, 800557e <_write_r+0x1e>
 800557c:	6023      	str	r3, [r4, #0]
 800557e:	bd38      	pop	{r3, r4, r5, pc}
 8005580:	2000032c 	.word	0x2000032c

08005584 <_close_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	4d06      	ldr	r5, [pc, #24]	; (80055a0 <_close_r+0x1c>)
 8005588:	2300      	movs	r3, #0
 800558a:	4604      	mov	r4, r0
 800558c:	4608      	mov	r0, r1
 800558e:	602b      	str	r3, [r5, #0]
 8005590:	f7fc f947 	bl	8001822 <_close>
 8005594:	1c43      	adds	r3, r0, #1
 8005596:	d102      	bne.n	800559e <_close_r+0x1a>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	b103      	cbz	r3, 800559e <_close_r+0x1a>
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	bd38      	pop	{r3, r4, r5, pc}
 80055a0:	2000032c 	.word	0x2000032c

080055a4 <_fstat_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d07      	ldr	r5, [pc, #28]	; (80055c4 <_fstat_r+0x20>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	4611      	mov	r1, r2
 80055b0:	602b      	str	r3, [r5, #0]
 80055b2:	f7fc f942 	bl	800183a <_fstat>
 80055b6:	1c43      	adds	r3, r0, #1
 80055b8:	d102      	bne.n	80055c0 <_fstat_r+0x1c>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	b103      	cbz	r3, 80055c0 <_fstat_r+0x1c>
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	bd38      	pop	{r3, r4, r5, pc}
 80055c2:	bf00      	nop
 80055c4:	2000032c 	.word	0x2000032c

080055c8 <_isatty_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d06      	ldr	r5, [pc, #24]	; (80055e4 <_isatty_r+0x1c>)
 80055cc:	2300      	movs	r3, #0
 80055ce:	4604      	mov	r4, r0
 80055d0:	4608      	mov	r0, r1
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	f7fc f941 	bl	800185a <_isatty>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_isatty_r+0x1a>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_isatty_r+0x1a>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	2000032c 	.word	0x2000032c

080055e8 <_lseek_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4d07      	ldr	r5, [pc, #28]	; (8005608 <_lseek_r+0x20>)
 80055ec:	4604      	mov	r4, r0
 80055ee:	4608      	mov	r0, r1
 80055f0:	4611      	mov	r1, r2
 80055f2:	2200      	movs	r2, #0
 80055f4:	602a      	str	r2, [r5, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f7fc f93a 	bl	8001870 <_lseek>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_lseek_r+0x1e>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_lseek_r+0x1e>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	2000032c 	.word	0x2000032c

0800560c <_read_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d07      	ldr	r5, [pc, #28]	; (800562c <_read_r+0x20>)
 8005610:	4604      	mov	r4, r0
 8005612:	4608      	mov	r0, r1
 8005614:	4611      	mov	r1, r2
 8005616:	2200      	movs	r2, #0
 8005618:	602a      	str	r2, [r5, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f7fc f8c8 	bl	80017b0 <_read>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_read_r+0x1e>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_read_r+0x1e>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	2000032c 	.word	0x2000032c

08005630 <_init>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	bf00      	nop
 8005634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005636:	bc08      	pop	{r3}
 8005638:	469e      	mov	lr, r3
 800563a:	4770      	bx	lr

0800563c <_fini>:
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	bf00      	nop
 8005640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005642:	bc08      	pop	{r3}
 8005644:	469e      	mov	lr, r3
 8005646:	4770      	bx	lr
